
·XSS攻击：（跨站脚本攻击）
	··非持久型（反射型）：
	攻击者让用户访问被纂改的url，当用户访问该链接时，就会触发预先插入网页中的脚本，从而达到攻击的目的；

	··持久型（存储型）：
	存在于表单提交等交互功能，文章留言，提交文本信息等，黑客利用的XSS漏洞，将攻击脚本经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。

·如何防御XSS攻击：
	··从用户输入下手
	我们常说用户的输入是不可信的，把用户的输入想象成具有攻击性的代码。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义。现在有很多开源的XSS Filter。

	··输出格式化
	在前端渲染的时候对可能存在攻击的内容做XSS过滤。转义格式化标志字符，从而禁止可疑代码的执行。想要对抗XSS，以下的字符转义内容是必不可少的：
	特殊字符实体编码&&amp;<&lt;>&gt;"&quot;'&#x27;/&#x2F;

	··HttpOnly
	这是预防XSS攻击窃取用户cookie最有效的防御手段。Web应用程序在设置cookie时，将其属性设为HttpOnly，就可以避免该网页的cookie被客户端恶意JavaScript窃取，保护用户cookie信息。



·CSRF/XSRF(跨站请求伪造)：挟制用户在当前已登录的web应用程序上执行非本意的操作的攻击方法；

·如何防御CSRF:
	··Get请求不对数据进行修改；
	··不让第三方网站访问到用户Cookie；
	··阻止第三方网站请求接口；
	··请求时附带验证信息，比如验证码或者Token；

（1）SameSite
对Cookie设置SameSite属性。该属性表示Cookie不随着跨域请求发送，可以很大程度减少CSRF的攻击。
（2）Token
在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器建立一个拦截器来验证这个token。服务器读取浏览器当前域cookie中这个token值，会进行校验该请求当中的token和cookie当中的token值是否都存在且相等，才认为这是合法的请求。否则认为这次请求是违法的，拒绝该次服务。
（3）Referer
Referer是header的一部分，当浏览器向web服务器发送请求时，一般会带上Referer信息告诉服务器是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。可以通过检查请求的来源来防御CSRF攻击。正常请求的referer具有一定规律，如在提交表单的referer必定是在该页面发起的请求。所以通过检查http包头referer的值是不是这个页面，来判断是不是CSRF攻击。但是这个方法存在一定的风险。
（4）Verification code
这是一个偏向业务的方法，也在很多的网站中应用。当用户想要操作存在危险的动作，比如修改密码、更换自己的手机号、修改银行卡、转账等操作的时候，进行验证码二次确认可以很大程度上提高安全性。


