
----------------------
·java.net包中提供了两种常见的网络协议的支持：
	TCP：TCP 是传输控制协议的缩写，它保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP / IP。
	UDP：UDP 是用户数据报协议的缩写，一个无连接的协议。提供了应用程序之间要发送的数据的数据包。


套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。
当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。
java.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。



















socket：
----------------------
	Socket概念：应用层与TCP/IP协议族【应用层与传输层之间】通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面。对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。

	Socket组成：IP地址+端口号，Socket是网络上运行的程序之间双向通信链路的终结点，是TCP和UDP的基础。

	Socket套接字：就是源Ip地址，目标IP地址，源端口号和目标端口号的组合；

    Socket原理机制：通信的两端都有Socket；网络通信其实就是Socket间的通信；数据在两个Socket间通过IO传输 。

 	··端口：
	 	1.用于区分不同的应用程序；
	 	2.端口号范围为0-65535，其中0-1023是系统所保留；

 	··针对网络通信的不同层次，Java提供了不同的API，其提供的网络功能有四大类：

     	1.InetAddress：标识网络硬件资源；表示IP地址相关信息；
     		这个类没有构造方法，通过静态方法来获取实例，然后可以调用相应的API。

     	2.URL：统一资源定位符，通过URL可以直接读取或者写入网络上的数据；这个通过流进行操作，涉及到编码问题；

     	3.Sockets：使用TCP协议，实现网络通信的Socket相关的类；
	     	相关操作类：
	     	客户端的Socket类：客户端套接字；get流；
    		客户端：Socket提供的实例。
    				Socket soc=new Socket(ip地址，端口号)

	     			··创建Socket对象，指明需要连接的服务器的地址和端口号；
	     			··连接建立后，通过输出流向服务器端发送请求信息；
	     			··通过输入流获取服务器响应的信息；
	     			··关闭相关资源；

	     	服务器端的ServerSocket类：服务器套接字；
	     	服务器端：ServerSocket提供的实例。
    				  ServerSocket server= new ServerSocket(端口号)
    		Client通过 new socket(ip,端口号)来建立与服务端连接。

	     			··创建ServerSocket对象，绑定监听端口；
	     			··通过accept（）方法监听客户端请求；
	     			··连接建立后，通过输入流读取客户端发送的请求信息；
	     			··通过输出流向客户端发送响应信息；
	     			··关闭相关资源；

	     	Socket通信模型：
							建立连接：创建Socket和ServerSocket；
							开始通信：输入输出流、读写操作；
							结束通信：关闭流、关闭Socket；

     	4.Datagram：使用UDP协议，将数据保存在数据报中，通过网络通信；
	     	相关操作类：
	     	DatagramPacket：表示数据报包；
	     	DatagramSocket：进行端到端通信得类；

	     	服务端实现：
	     		··创建DatagramSocket，指定端口号；
	     		··创建DatagramPacket；
	     		··接收客户端发送的数据信息；
	     		··读取数据；
	     		
	     	客户端实现：
	     		··定义发送信息；
	     		··创建DatagramPacket,包含将要发送的信息；
	     		··创建DatagramSocket；
	     		··发送数据；



