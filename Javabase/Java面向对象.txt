
Java面向对象：
------------------------
·面向对象的五大基本原则： 
	··单一职责原则：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。 
	··开放封闭原则（Open-Closed principle）：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。 
	··里氏替换原则：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。 
	··依赖倒置原则：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。 
	··接口隔离原则（Interface-Segregation Principle）：使用多个小的专门的接口，而不要使用一个大的总接口。



继承：
----------------------
this和super：

	this：
		1.this代表当前对象；
				this.属性：操作当前对象的属性；
				this.方法：调用当前对象的方法；
		2.封装对象的属性的时候，经常会使用this；

	super：
		1.在对象的内部使用，可以代表父类对象；
		2.访问父类属性：super.age；
		  访问父类方法：super.eat()；

		3.访问构造方法：super（……）；

	this()和super()为构造方法，作用是在JVM堆中构建出一个对象，因此避免多次创建对象，同一个方法内只能调用一次this()或super()。
	为了避免操作对象时对象还未构建成功，需要this()和super()的调用在第一行实现【以此来创建对象】，防止异常。
	this和super不可能同时出现在一个构造函数里。
	this是对重载的构造函数调用，super是对父类的构造函数调用。

	注意：
		1.在子类的构造过程当中，必须调用其父类的构造方法。
		2.如果子类构造方法中没有显示调用父类的构造方法，则系统默认调用父类无参的构造方法；
		3.如果显示的调用构造方法，必须在子类的构造方法的第一行；
		4.如果子类构造方法中既没有显示调用父类的构造方法，而父类又没有无参的构造方法，则编译出错；




在继承中，代码的执行顺序为：静态>非静态，父类>子类,（同类下）非静态>构造
                          1.父类静态对象，父类静态代码块
                          2.子类静态对象，子类静态代码块
                          3.父类非静态对象，父类非静态代码块
                          4.父类构造函数
                          5.子类非静态对象，子类非静态代码块
                          6.子类构造函数

		并不是静态块最先初始化,而是静态域，而静态域中包含静态变量、静态块和静态方法,其中需要初始化的是静态变量和静态块。而他们两个的初始化顺序是靠他们俩的位置决定的!

		静态块：用static申明，JVM加载类时执行，仅执行一次
		构造块：类中直接用{}定义，每一次创建对象时执行
		执行顺序优先级：静态块>main()>构造块>构造方法




多态：同一个接口，使用不同的实例而执行不同操作
----------------------
多态存在的三个必要条件：
	继承
	重写
	父类引用指向子类对象：Parent p = new Child();

两种多态:
 	重载和重写区别：
	静态联编是指编译时多态，动态联编是指运行时多态。
	在重载中，运用的是静态多分派，即根据静态类型确定对象，因此不是根据new的类型确定调用的方法;
	在覆盖中，运用的是动态单分配，是根据new的类型确定对象，从而确定调用的方法。

	··重载是Java多态性（在一个类中）的一种表现方式，要注意以下几点：
	    1.参数列表不同。包括参数个数、参数类型、参数顺序等的不同；
	    2.不能通过方法的访问权限、返回值类型和抛出的异常类型来判断重载；
	    3.对于继承来说，如果父类方法的访问权限为private，那么就不能在子类对其重载；如果子类也定义了一个同名的函数，只是一个新方法，并不是重载方法；
	    4.构造方法也可以重载。

	··重写又称覆盖，方法的重写（override）有两同两小一大原则：
		1.方法名相同，参数类型相同；
		2.子类返回类型小于等于父类方法返回类型，
		3.子类抛出异常小于等于父类方法抛出异常，
		4.子类访问权限大于等于父类方法访问权限。

		方法重写的注意事项：
			构造方法不能被重写，不要问为什么？因为构造方法名必须和类名相同；
			private修饰的成员方法不能被重写；
			static修饰的方法不能被重写；
			final修饰的方法不能被重写；
			当子类重写了父类中的方法后，子类对象调用该方法时，调用的是子类重写后的方法。


	一个类中，可以有多个main方法，这是重载，但是public static void main(String[] args)的方法只能有一个。
    一个文件中，可以有多个public class，即，外部类为public，还可以有public的内部类。
      public class Main {
               public class Inner{

          }
      }
    类中，可以有main方法，也可以没有main方法，而有一个main()方法的时候，也可以是任意访问权限。因为这个类不一定要执行，可以只是辅助类。





抽象类和接口
-------------------------
修饰符的使用：
	··抽象类除了抽象方法在jdk1.8以后改成默认default外，其他的与普通类无区别。 抽象类可以实现接口。

		JDK 1.8以前，抽象类的方法默认访问权限为protected
		JDK 1.8时，抽象类的方法默认访问权限变为default

		抽象类不仅可以被继承，还可以直接拿来使用的，当然，这个使用是拿来声明，而不是实例化，因为抽象类不能实例化，但可以声明使用。就像接口一样。可以动态绑定地实现多态，如下例子，AbstractMap就是抽象类，它可以这样使用。
		        AbstractMap<String, Integer> am = new HashMap<String, Integer>();  
	              am.put("young", 23);
	              am.put("strongyoung", 26);
	              Iterator<String> itr = am.keySet().iterator();
	              while(itr.hasNext()){                   //hasNext（）
	                  String key = itr.next();
	                  System.out.println(key + " : " + am.get(key));
	              }


	··接口所有方法全是抽象方法只能 public abstract修饰 （默认public abstract修饰 ），属性默认public static final修饰。

		JDK 1.8以前，接口中的方法必须是public的
		JDK 1.8时，接口中的方法可以是public的，也可以是default的
		JDK 1.9时，接口中的方法可以是private的


区别：
	1、设计目的：接口体现的一种规范，类似与整个系统的总纲，制订了系统各模块应该遵循的标准，因此接口不应该经常改变，一旦改变对整个系统是辐射性的。
	            抽象类作为多个子类的共同父类，体现的是一种模板式设计，可以当作系统实现过程中的中间产品，已经实现了系统部分功能。

    2、使用不同：（1）接口只能包含抽象方法，抽象类可以包含普通方法。
               （2）接口里不能定义静态方法，抽象类可以。
               （3）接口只能定义静态常量属性不能定义普通属性，抽象类可以。
               （4）接口不包含构造器，抽象类可以（不是用于创建对象而是让子类完成初始化）。
               （5）接口里不能包含初始化块，抽象类完全可以。
               （6）接口多继承，抽象类单继承（只能有一个直接父类）。