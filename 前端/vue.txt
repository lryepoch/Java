
---------------
·搭建vue开发环境的步骤：
	··下载node.js安装包安装：(Vue项目通常通过webpack工具来构建，而webpack命令的执行是依赖node.js的环境的，所以首先要安装node.js。)
		测试是否安装成功：node -v；npm -v

	··安装cnpm：原生npm下载依赖包过慢，更换成淘宝镜像可以提高下载效率。
		安装命令：npm install -g cnpm --registry=https://registry.npm.taobao.org
		测试是否安装成功：cnpm -v

	··安装vue-cli：这是vue的脚手架工具。
		安装命令：cnpm install --global vue-cli  
		测试是否安装成功：vue (-V)

		脚手架：主体结构全部搭建好了，我们可以在利用这个主体结构去完成我们的需求。vue-cli 不是一个单独的东西，甚至它不是一个东西，它自己也没有什么特别的功能，它其实是 git 上的一个项目，或者说它就是一堆文件，真正有功能的是 webpack。

		vue-cli 这个脚手架其实什么都没干，其实，vue-cli 就是一个下载器，官方叫 vue-cli 启动器，它的作用是帮助我们快速去建立一些基本项目，但是这个项目不是完全空白的，有些基本的东西，比如说可以根据选择的项目的不同下载不同的依赖、根据我们的选择更改项目名、可以选择单元测试方法是单元测试还是一对一测试。

		在脚手架生成的package.json 里面有各种各样的 loader，webpack 只能处理 js 文件，webpack 不认识 vue，loader 的作用就是把 vue 文件转成 js 文件，之后配置上 plugin 各种扩展功能。总结一下，webpack中的 loader是为了将 webpack不认识的文件转成js文件。各种loader、plugin为webpack扩展功能，所以vue-cli没有这么了不起，真正牛逼的是 webpack。

	··安装webpack工具：现在使用的基本上都是vue-cli3.x或者vue-cli4.x，vue-cli3.x是基于webpack4打造的，vue-cli2.x是基于webpack3打造的，webpack3跟webpack4的区别挺大的，所以不建议全局安装 webpack，因为如果不同的项目是基于不同的 webpack 但是又全局安装了 webpack，这样子就可能会出问题。

		全局安装webpack命令：cnpm install -g webpack
		检测是否安装成功：webpack -v /  webpack-cli -v

		基于项目安装webpack：vue init webpack <project_name>




·创建vue项目命令：
	··vue init webpack <project_name>		#创建vue项目【在项目中创建webpack】
	··cnpm install							#安装依赖包（会生成node_modules文件夹）
	··cnpm run dev	/	npm run serce		#启动运行vue项目【主要看package.json文件中的配置】
	··cnpm run build						#打包上线，生成dist文件夹（包含static文件夹和index.html文件）

	cnpm cache clean --force				#清除npm缓存
	cnpm audit fix			#检测项目依赖中的漏洞并自动安装需要更新的有漏洞的依赖，而不必再自己进行跟踪和修复。
	cnpm audit				#允许开发人员分析复杂的代码，并查明特定的漏洞和缺陷。

	如果 npm audit fix，之后还是有问题，可能是不能自动 fix，尽量不要 --force 强制 fix。可以先 npm update，然后 npm audit 查看详情，再手动安装相关库。






·vue cli3.0快速搭建项目详解：












·vue项目结构：
	--public：公共文件，公共资源
	--src
		--assets：静态资源，如css，js，image
		--components：公共组件
		--network：众多js文件调用后台接口
		--router：路由文件，也有js调后台接口部分url
		--store：vuex状态管理
		--views：视图
		--APP.vue：根组件
		--main.js：入口文件
	--package.json





·vue运行过程：
	1.index.html：index.html如其他html一样，但一般只定义一个空的根节点，在main.js里面定义的实例将挂载在根节点下，内容都通过vue组件来填充。

	2.App.vue：一个vue页面通常由三部分组成:模板(template)、js(script)、样式(style)
		1) template
		其中模板只能包含一个父节点，<router-view/>为<router-view></router-view>的简写，是子路由视图，后面的路由页面都显示在此处。

		2) script
		vue通常用es6来写，用export default导出，其下面可以包含数据data，生命周期(mounted等)，方法(methods)等。

		3) style
		样式通过style标签<style></style>包裹，默认是影响全局的，如需定义作用域只在该组件下起作用，需在标签上加scoped，<style scoped></style>

	3.main.js：main.js主要是引入vue框架，根组件及路由设置，并且定义vue实例。
		router相当于router:router，为ES6写法，在对象中，如果键值对一样的话，可以简写为一个；
		components: { App }引入根组件App.vue，App即App:App；
		template: '<App/>' 是简写形式，等价于 <App></App>。

	4.router：router下的index.js文件中的routes定义了路径为'/'的路由，该路由对应的页面是HelloWorld组件。

	整个页面渲染过程：访问http://localhost:8080/，显示的就是public/index.html页面，index.html原本只有一个根结点id="app"。