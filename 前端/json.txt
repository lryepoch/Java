json教程:

--JSON基础知识：

	1.全称：JavaScript Object Notation.javascript --对象表示法。

	2.JSON 是用于存储和传输数据的格式。	JSON 通常用于服务端向网页传递数据 。JSON 数据可使用 AJAX 进行传输。

	3.JSON 文件：	JSON 文件的文件类型是 ".json"；	JSON 文本的 MIME 类型是 "application/json"。




--为什么使用 JSON？

	JSON 比 XML 更小、更快、更易解释。json独立于语言；

	用 eval(String)函数 处理 JSON 字符串：即计算某个字符串，并执行其中的的 JavaScript 代码。JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象



--JSON 语法规则：
						JSON 语法是 JavaScript 对象表示语法的子集。

						数据在名称/值对中；

						数据由逗号分隔；

						中括号保存数组；

						大括号保存对象，对象可以包含多个名称/值对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）；
						
						eg：
								{
										"sites": [
														{ "name":"菜鸟教程" , "url":"www.runoob.com" }, 
														{ "name":"google" , "url":"www.google.com" }, 
														{ "name":"微博" , "url":"www.weibo.com" }
													]
								}
						解析：sites对象是包含3个站点记录（对象）的数组，可以访问sites[0].name；修改sites[0].name="菜鸟教程"。



--json数据格式：
	主要由对象 { } 和数组 [ ] 组成:

	对象包括键值对（属性:属性值）{key： value}，value 可为 str，num，list，obj。
	键：值 用冒号分开，对间用，连接。
	取值使用 objcet.key。{key: value, key2: value2，} ；

	数组包含元素：num，str，list，objcet 都可以，利用索引访问 [index]，用 . 连接各个值。



--json 对象和 json 字符串的区别：
	1、json 对象
	var str2 = { "name": "asan", "sex": "man" };

	2、json字符串
	var str1 = '{ "name": "deyuyi", "sex": "man" }';




--JSON.parse()说明：用于将一个 json 字符串转换为 JavaScript 对象。

	1、JSON 通常用于与服务端交换数据。在接收服务器数据时一般是字符串。
		我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。JSON.parse(text[, reviver])
		参数说明：
		text:必需， 一个有效的 JSON 字符串。
		reviver: 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。

	注：json解析实例：解析前要确保你的数据是标准的 JSON 格式，否则会解析出错。可以使用我们的在线工具检测：https://c.runoob.com/front-end/53

		从服务端接收 JSON 数据
		我们可以使用 AJAX 从服务器请求 JSON 数据，并解析为 JavaScript 对象。如果从服务端接收的是数组的 JSON 数据，则 JSON.parse 会将其转换为 JavaScript 数组。

	2、异常
			解析数据
			JSON 不能存储 Date 对象。
			如果你需要存储 Date 对象，需要将其转换为字符串。
			之后再将字符串转换为 Date 对象。

			我们可以启用 JSON.parse 的第二个参数 reviver，一个转换结果的函数，对象的每个成员调用此函数。

	3、解析函数
			JSON 不允许包含函数，但你可以将函数作为字符串存储，之后再将字符串转换为函数。不建议在 JSON 中使用函数。

			使用 JSON.parse 的 reviver 函数时一定要注意遍历到最后的顶层对象 key 为 ""，需要返回 value。

			对于服务器返回的JSON字符串，如果 jQuery 异步请求没做类型说明，或者以字符串方式接受，那么需要做一次对象化处理，方式不是太麻烦，就是将该字符串放于 eval()中执行一次。这种方式也适合以普通 javascipt 方式获取 json 对象，以下举例说明：
			var u = eval('('+user+')');

			为什么要 eval 这里要添加 ('('+user+')') 呢？
			原因在于：eval 本身的问题。 由于 json 是以 {} 的方式来开始以及结束的，在 js 中，它会被当成一个语句块来处理，所以必须强制性的将它转换成一种表达式。
			加上圆括号的目的是迫使 eval 函数在处理 JavaScript 代码的时候强制将括号内的表达式（expression）转化为对象，而不是作为语句（statement）来执行。举一个例子，例如对象字面量 {}，如若不加外层的括号，那么 eval 会将大括号识别为 javascript 代码块的开始和结束标记，那么{}将会被认为是执行了一句空语句。所以下面两个执行结果是不同的：
			alert(eval("{}"); // return undefined
			alert(eval("({})");// return object[Object]




--JSON.stringify()说明：用于将 JavaScript 值转换为 json 字符串。


	1、JSON 通常用于与服务端交换数据。在向服务器发送数据时一般是字符串。
	我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。

	语法
	JSON.stringify(value[, replacer[, space]])
	参数说明：
	value:
	必需， 一个有效的 JSON 对象。
	replacer:
					可选。用于转换结果的函数或数组。
					如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：""。
					如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。
	space:
					可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 有可以使用非数字，如：\t。

	2、异常
		解析数据
		JSON 不能存储 Date 对象。
		JSON.stringify() 会将所有日期转换为字符串。

	3、解析函数
		JSON 不允许包含函数，JSON.stringify() 会删除 JavaScript 对象的函数，包括 key 和 value。我们可以在执行 JSON.stringify() 函数前将函数转换为字符串来避免以上问题的发生。但是我们不建议在json中使用函数。



--crud项目的json：

{
    "code": 100, 
    "msg": "处理成功", 
    "data": {
        "pageInfo": {
            "pageNum": 1, 
            "pageSize": 5, 
            "size": 5, 
            "startRow": 1, 
            "endRow": 5, 
            "total": 20, 
            "pages": 4, 
            "list": [
                {
                    "empId": 2, 
                    "empName": "李四", 
                    "gender": "F", 
                    "email": "1783510791@qq.com", 
                    "dId": 1, 
                    "department": {
                        "deptId": 1, 
                        "deptName": "开发部"
                    }
                }, 
                {
                    "empId": 3, 
                    "empName": "王五", 
                    "gender": "M", 
                    "email": "1783510791@qq.com", 
                    "dId": 1, 
                    "department": {
                        "deptId": 1, 
                        "deptName": "开发部"
                    }
                }, 
                {
                    "empId": 4, 
                    "empName": "小七", 
                    "gender": "F", 
                    "email": "1783510791@qq.com", 
                    "dId": 2, 
                    "department": {
                        "deptId": 2, 
                        "deptName": "后勤部"
                    }
                }, 
                {
                    "empId": 5, 
                    "empName": "小兵", 
                    "gender": "M", 
                    "email": "1783510791@qq.com", 
                    "dId": 1, 
                    "department": {
                        "deptId": 1, 
                        "deptName": "开发部"
                    }
                }, 
                {
                    "empId": 6, 
                    "empName": "33", 
                    "gender": "M", 
                    "email": "124789@qq.com", 
                    "dId": 1, 
                    "department": {
                        "deptId": 1, 
                        "deptName": "开发部"
                    }
                }
            ], 
            "prePage": 0, 
            "nextPage": 2, 
            "isFirstPage": true, 
            "isLastPage": false, 
            "hasPreviousPage": false, 
            "hasNextPage": true, 
            "navigatePages": 5, 
            "navigatepageNums": [
                1, 
                2, 
                3, 
                4
            ], 
            "navigateFirstPage": 1, 
            "navigateLastPage": 4, 
            "lastPage": 4, 
            "firstPage": 1
        }
    }
}