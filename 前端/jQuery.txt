jQuery：

--jQuery介绍：

	jQuery 是一个 JavaScript 函数库。它使用 CSS 选择器来访问和操作网页上的 HTML 元素（DOM 对象）。

	jQuery需要使用单独的 <script> 标签对它的文件进行引用， src 属性设置为库的 URL。

	jQuery 可供下载：一份是精简过的，另一份是未压缩的（供调试或阅读）。

	在 HTML5 中，不用在 <script> 标签中使用 type="text/javascript" ，不必那样做了。因为JavaScript 是 HTML5 以及所有现代浏览器中的默认脚本语言！




--jQuery页面加载后执行的事件(3种方式)：

	1 $(function () { });

	2 $(document).ready(function () { });				
	// 将函数绑定到文档的就绪事件（当文档完成加载时）。为了防止文档在完全加载（就绪）之前运行 jQuery 代码。							如果在文档没有完全加载之前就运行函数，操作可能失败。

	3 window.onload = function () { }



--jQuery 语法：

				jQuery 语法是为 HTML 元素的选取编制的，可以对元素执行某些操作。

				基础语法是：$(selector).action()

				美元符号定义 jQuery；
				选择符（selector）“查询”和“查找” HTML 元素；
				jQuery 的 action() 执行对元素的操作；

				示例：

				$(this).hide() - 隐藏当前元素

				$("p").hide() - 隐藏所有段落

				$(".test").hide() - 隐藏所有 class="test" 的所有元素

				$("#test").hide() - 隐藏所有 id="test" 的元素

				$("p.intro") 选取所有 class="intro" 的 <p> 元素。

				$("p#demo") 选取所有 id="demo" 的 <p> 元素。

				提示：jQuery 使用的语法是 XPath 与 CSS 选择器语法的组合。




--jQuery 选择器：关键点是学习 jQuery 选择器是如何准确地选取您希望应用效果的元素。

							jQuery 使用元素选择器来选取 HTML 元素：
														$("p#demo") 选取所有 id="demo" 的 <p> 元素。

							jQuery 使用 XPath 表达式来选择带有给定属性的元素：
														eg：$("[href='#']") 选取所有带有 href 值等于 "#" 的元素。

							jQuery 使用 CSS 选择器可用于改变 HTML 元素的 CSS 属性：
														$("p").css("background-color","red")把所有 p 元素的背景颜色更改为红色;



--更多的选择器实例
				语法                       				描述
				$(this)	               				当前 HTML 元素                   ##用的js对象调用jquery的方法。应该这样写：$(this).attr("value")
				$("p")	             				 所有 <p> 元素
				$("p.intro")	       				所有 class="intro" 的 <p> 元素
				$(".intro")	         				所有 class="intro" 的元素
				$("#intro")       				id="intro" 的元素
				$("ul li:first")                 	每个 <ul> 的第一个 <li> 元素
				$("[href$='.jpg']")	         所有带有以 ".jpg" 结尾的属性值的 href 属性
				$("div#intro .head")	          id="intro" 的 <div> 元素中的所有 class="head" 的元素




--jQuery 事件：
						下面是 jQuery 中事件方法的一些例子：

						Event 函数											绑定函数至
						$(document).ready(function)				将函数绑定到文档的就绪事件（当文档完成加载时）
						$(selector).click(function)					触发或将函数绑定到被选元素的点击事件
						$(selector).dblclick(function)				触发或将函数绑定到被选元素的双击事件
						$(selector).focus(function)					触发或将函数绑定到被选元素的获得焦点事件
						$(selector).mouseover(function)			触发或将函数绑定到被选元素的鼠标悬停事件




--jQuery 效果：

	>隐藏和显示 ：
		$(selector).hide(speed,callback);

		$(selector).show(speed,callback);

		可选的 speed 参数规定隐藏/显示的速度，可以取以下值："slow"、"fast" 或毫秒。
		可选的 callback 参数是隐藏或显示完成后所执行的函数名称。

		eg：
		$("button").click(function(){
			  $("p").hide(1000);
			});

		可以使用$(selector).toggle(speed,callback)；方法来切换 hide() 和 show() 方法。

	>淡入淡出：

	>滑动：

	>动画：




--jQuery 名称冲突：

	jQuery 使用 $ 符号作为 jQuery 的简介方式。

	某些其他 JavaScript 库中的函数（比如 Prototype）同样使用 $ 符号。

	jQuery 使用名为 noConflict() 的方法来解决该问题。

	var jq=jQuery.noConflict()，帮助您使用自己的名称（比如 jq）来代替 $ 符号。

	$.noConflict();
	jQuery(document).ready(function(){
	  jQuery("button").click(function(){
	    jQuery("p").text("jQuery 仍在运行！");
	  });
	});



jQuery HTML：

	--获取：
		1.获得内容：
		text() - 设置或返回所选元素的文本内容
		html() - 设置或返回所选元素的内容（包括 HTML 标记）
		val() - 设置或返回表单字段的值【有参数则设置，无参数则返回】

		2.获取属性
		attr() 方法用于获取属性值

		例如：获得链接中 href 属性的值
		$("button").click(function(){
			  alert($("#w3s").attr("href"));
			});


	--设置内容 /属性：
		text("Hello world!")  
		html("<b>Hello world!</b>")  
		val("Dolly Duck")  

		attr("href","http://jsrun.net/jquery")


	--添加：
		添加新内容：
		append() - 在被选元素的结尾插入内容          ##$("p").append("Some appended text.");
		prepend() - 在被选元素的开头插入内容			##$("p").prepend("Some prepended text.");
		after() - 在被选元素之后插入内容					##$("img").after("Some text after");
		before() - 在被选元素之前插入内容


	--删除：
		删除元素/内容

		remove() - 删除被选元素（及其子元素）							##$("#div1").remove();
		empty() - 从被选元素中删除子元素（本身不会被删）		##$("#div1").empty();

		empty() 方法可以过滤被删除的元素：
		jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。
		该参数可以是任何 jQuery 选择器的语法。
		下面的例子删除 class="italic" 的所有 <p> 元素：
		实例
		$("p").remove(".italic");



jQuery CSS：

	jQuery 操作 CSS，jQuery 拥有若干进行 CSS 操作的方法。

	addClass() - 向被选元素添加一个或多个类											## $("h1,h2,p").addClass("blue");
	removeClass() - 从被选元素删除一个或多个类										##  $("h1,h2,p").removeClass("blue");
	toggleClass() - 对被选元素进行添加/删除类的切换操作							## $("h1,h2,p").toggleClass("blue");
	css() - 设置或返回样式属性																	## $("p").css("background-color");





--遍历：
	>祖先：
	（1）parent() 方法返回被选元素的直接父元素。该方法只会向上一级对 DOM 树进行遍历。
	eg：$(document).ready(function(){							##返回每个 <span> 元素的的直接父元素
			  $("span").parent();
			});


	（2）parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。
	eg：$(document).ready(function(){					##返回所有 <span> 元素的所有祖先，并且它是 <ul> 元素
			  $("span").parents("ul");
			});

	（3）parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。
	eg：$(document).ready(function(){					##返回介于 <span> 与 <div> 元素之间的所有祖先元素
			  $("span").parentsUntil("div");
			});


	>后代：
	（1）children() 方法返回被选元素的所有直接子元素。该方法只会向下一级对 DOM 树进行遍历。
	eg：$(document).ready(function(){							##返回每个 <div> 元素的所有直接子元素
			  $("div").children();
			});

	也可以使用可选参数来过滤对子元素的搜索：
		$(document).ready(function(){			##返回类名为 "1" 的所有 <p> 元素，并且它们是 <div> 的直接子元素
			  $("div").children("p.1");
			});

	（2）find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。
		$(document).ready(function(){				##返回属于 <div> 后代的所有 <span> 元素
		  $("div").find("span");
		});

		$(document).ready(function(){				##返回 <div> 的所有后代
		  $("div").find("*");
		});

	>同胞：



--jQuery ajax：
	作用：通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。




--请解释 XMLHttpRequest 对象，并简要说明 jQuery 中的 $.ajax 方法使用。

	答案：XMLHttpRequest对象为我们提供了一个访问http协议的接口，可以与服务器交互数据，实现页面的局部刷新。
			  $.ajax是JQuery中封装好的使用ajax的方法，使用时传入URL、数据类型、失败成功的调用函数等等；      
					$.ajax({        
									url:'',        
									type:'get/post',        
									data:{},        
									dataType:'',        
									success:function(data){         
																			//....         
																		}     
					          });



--jquery选择器 和 css选择器有区别吗？     
	答案：jQuery选择器支持CSS里的选择器，jQuery选择器可用来添加样式和添加相应的行为，CSS 中的选择器是只能添加相应的样式。




--$.each()用法实例总结：https://blog.csdn.net/nuliPerfect/article/details/52163305



--jQuery on() 和 click() 的区别:

	二者在绑定静态控件时没有区别，但是如果面对动态产生的控件，只有 on() 能成功的绑定到动态控件中。

	以下实例中原先的 HTML 元素点击其身后的 Delete 按钮就会被删除。而动态添加的 HTML 元素，使用 click() 这种写法，点击 Delete 按钮无法删除；使用 On() 方式可以。




--提交表单数据：
	1、ajaxSubmit()：适用于不希望提交表单后页面跳转，那么，我们就可以使用ajaxSubmit(obj)来提交数据；

	2、submit()：




--window.location.href请求和ajax请求的区别：

	window.location.href：这种请求方式，需要刷新整个界面，故而用户体验度不好。但是在文件下载的时候，却只能用这种方式发送请求，ajax请求得不到响应。

	ajax：请求方式可以是同步也可以是异步，允许只刷新局部页面，故而用户体验较好，经常使用。