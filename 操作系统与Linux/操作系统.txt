操作系统：

--Java服务器网络开发时， 请说明通讯中阻塞（blocking）/非阻塞（non-blocking 与 同步/异步IO的区别。

	同步／异步主要针对客户端：
	        同步：就是当客户端发出一个功能调用时，在没有得到结果之前，该调用就不返回，不继续执行后续操作。也就是说必须一件一件的事情去做，等一件做完了才能去做下一件。

	         异步：就是当客户端发出一个功能调用时，调用者在没有得到结果之前，就可以继续执行后续操作。当这个调用完成后，一般通过状态、通知和回调来通知调用者。对于异步调用，调用的返回并不受调用者控制。虽然主要是针对客户端，但是服务器端不是完全没有关系的，同步／异步必须配合服务器端才能实现。同步／异步是由客户端自己控制，但是服务器端是否阻塞/非阻塞，客户端完全不需要关心。

	阻塞／非阻塞主要是针对服务器端：
	        阻塞：阻塞调用是指服务器端被调用者调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。
	        非阻塞：指在不能立即得到结果之前，该调用不会阻塞当前线程，而会立刻返回。

	同步是个过程，阻塞是线程的一种状态。多个线程操作共享变量时可能会出现竞争。这时需要同步来防止两个以上的线程同时进入临界区，在这个过程中，后进入临界区的线程将阻塞，等待先进入的线程走出临界区。



--操作系统的基本特性：基于进程而形成的
	---并发性：
				----并行与并发：同一时刻。宏观上，同一时刻；微观上，分时交替执行。
				----进程：程序是静态实体；为了并发执行；系统中独立运行和资源分配的基本单位；
				----线程：独立运行和独立调度的基本单位；同一进程有多个线程，可并发，线程间共享进程资源；
	---共享性：资源共享或者资源复用
				----互斥共享方式：在一段时间内只允许一个进程访问的资源称为临界资源或独占资源，如打印机；
				----同时访问方式：宏观上“同时”，微观上交替访问；	
	---虚拟技术：把一个物理实体变为若干个逻辑上的对应物。
	---异步性：不可预知的速度向前推进；



--操作系统的主要功能：
			处理机方面的管理功能：创建和撤消进程(线程)，对诸进程(线程)的运行进行协调，实现进程(线程)之间的信息交换，以及按照一定的算法把处理机分配给进程(线程)。
				----进程控制：为作业创建进程，撤消已结束的进程，控制进程在运行过程中的状态转换；为一个进程创建若干个线程和撤消(终止)已完成任务的线程；
				----进程同步：为多个进程(含线程)的运行进行协调；
							-----进程互斥方式：对临界资源的访问采用互斥方式；
							-----进程同步方式：设置同步机制，简单则是为临界资源配置锁，高级则是使用信号量机制；
				----进程通信：进程间合作完任务；一进程发送信息挂到另一进程消息队列中；
				----调度：包括两步；
							1、作业调度：作业调入内存，为其建立进程，成为就绪进程；
							2、进程调度：从就绪进程中选择，为其分配处理机，设置运行现场；



--什么是临界区？如何解决冲突？

　　每个进程中访问临界资源的那段程序称为临界区，每次只准许一个进程进入临界区，进入后不允许其他进程进入。

　　1：如果有若干进程要求进入空闲的临界区，一次仅允许一个进程进入；
　　2：任何时候，处于临界区内的进程不可多于一个。如已有进程进入自己的临界区，则其它所有试图进入临界区的进程必须等待；
　　3：进入临界区的进程要在有限时间内退出，以便其它进程能及时进入自己的临界区；
　　4：如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象。



--批处理、分时、实时各个操作系统特点

		1、批处理操作系统的主要特点是：脱机、多道和成批处理。

		脱机是指用户脱机使用计算机，即用户提交作业之后直到获得结果之前几乎不再和计算机打交道。

		多道是指多道程序运行，即按多道程序设计的调度原则，从一批后备作业中选取多道作业调入内存并组织它们运行；

		成批处理是指操作员把用户提交的作业组织成一批，由操作系统负责每批作业间的自动调度。 
		　　批处理系统自动化程度比较高，系统吞吐量大，资源利用率高，系统开销小，但各作业周转时间长，不提供用户与系统的交互手段，适合大的成熟的作业。

		 
		2、分时系统具有多路性、独立性、及时性和交互性，与批处理相比，系统开销大，资源利用率与系统接纳的作业有关，适合小的不成熟的作业。批处理和分时是以作业为单位进行处理的系统，是一个通用系统。 
		　　分时操作系统是一个专用系统，随机处理发生的外部事件，具有实时性、高度的安全可靠性，提供用户有限的人机交互，系统利用率比批处理差。 
		　　分时操作系统的主要特点：多路性、交互性、独占性和及时性。

		多路性是指一台计算机与若干台终端相连接，终端上的这些用户可以同时或基本同时使用计算机；

		交互性是指用户的操作方式是联机方式，即用户通过终端采用人-机会话的方式直接控制程序运行，同程序进行交互；

		独占性是指由于系统采用时间片轮转的办法使一台计算机同时为许多终端用户服务，因此客观效果是这些用户彼此间都感觉不到别人也在使用这台计算机，好像只有自己独占计算机一样；

		及时性是指用户请求能在很短时间内获得响应。 


		3、实时操作系统的主要特点是及时性和高可靠性。

		及时性是指系统能及时响应外部事件的请求，并在规定时间内完成对该事件的处理；

		高可靠性是指系统本身要安全可靠，因为像生产过程的实时控制、航空订票等实时事务系统，信息处理的延误或丢失往往会带来不堪设想的后果。




进程：

--进程有哪几种状态？

1）就绪状态：进程已获得除处理机以外的其他所需资源，等待分配处理机资源

2）运行状态：占用处理机资源运行

3）阻塞状态：等待资源而无法继续执行的状态



--进程与线程的区别：
	---进程是操作系统进行独立运行和资源分配的基本单位；线程是CPU独立运行和独立调度的基本单位；
	---一个进程可包含多个线程，线程间共享进程的所有资源，每个线程都有自己的堆栈以及局部变量；
	---进程有自己独立的内存空间，每当启动一个进程，系统就会为它分配空间，建立数据表来维护代码段、堆栈段和数据段，操作昂贵；而线程共享进程中的数据，使用相同的地址空间，因此CPU切换一个线程的花费更低。
	---由于线程基本不拥有系统资源，所以在进行切换时，线程切换的开销远远小于进程。

	---不同进程的多个线程可以访问单个互斥对象，这样可以确保多个线程同时访问内存块，内存块中数据不会遭到破坏。

	补充：
	进程：应用程序的执行实例，有独立的内存空间和系统资源
	线程：CPU调度和分派的基本单位，进程中执行运算的最小单位，可完成一个独立的顺序控制流程；

	进程和线程的关系：
	（1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程是操作系统可识别的最小执行和调度单位。
	（2）资源分配给进程，同一进程的所有线程共享该进程的所有资源。 同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。
	（3）处理机分给线程，即真正在处理机上运行的是线程。
	（4）线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。



--程序和进程的区别：

　　程序：计算机指令的集合，它以文件的形式存储在磁盘上。程序是静态实体（passive Entity），在多道程序系统中，它是不能独立运行的，更不能与其他程序并发执行。
使用系统资源情况：不使用（程序不能申请系统资源，不能被系统调度，也不能作为独立运行的单位，它不占用系统的运行资源）。

　　进程：进程是进程实体（包括：程序段、相关的数据段、进程控制块PCB）的运行过程，是一个程序在其自身的地址空间中的一次执行活动。是系统进行资源分配和调度的一个独立单位。
使用系统资源情况：使用（进程是资源申请、调度和独立运行的单位，因此，它使用系统中的运行资源）



--进程控制块(Process Contro1 B1ock，简称PCB)用来记录进程状态及其他相关信息的数据结构,PCB是进程存在的唯一标志，PCB存在则进程存在。系统创建进程时会产生一个PCB，撤销进程时，PCB也自动消失。

	进程控制块PCB的作用：
　　1：作为独立运行基本单位的标志
　　2：能实现间断性运行方式
　　3：提供进程通信管理所需要的信息
　　4：提供进程调度所需要的信息


--进程同步和互斥的区别：

	同步：互斥基础上，实现访问者对资源的有序访问；
	互斥：某资源某一时刻只允许一个进程访问，具有排他性和唯一性；互斥时访问是无序的；
	总的来说，同步体现一种协作性；互斥体现一种排他性。


--常用的操作系统进程（作业）调度算法

1）FCFS 先来先服务 队列：按照作业到达后备作业队列（或进程进入就绪队列）的先后次序

2）短进程（作业）优先调度算法（SPF） 后备队列：从作业后备队列中挑选所需运行时间（估计值）最短的作业进入主存运行

3）优先权调度算法 FPF （非抢占式、抢占式）：按照进程的优先权大小来调度，使高优先权进程得到优先处理的调度。优先数越多，优先权越小。

4）高响应比优先调度算法：先计算此时后备作业队列中每个作业的响应比RP然后选择其值最大的作业投入运行

5）时间片轮转法：就绪队列中的所有进程，在一给定的时间内，均能获得一时间片处理机执行时间

6）多级反馈队列调度算法 （设置多个就绪队列）：根据作业的性质和类型的不同，将就绪队列再分为若干个子队列，所有的作业（或进程）按其性质排入相应的队列中，而不同的就绪队列采用不同的调度算法。



--进程间的通信方式

		主要分为：管道、系统IPC（包括消息队列、信号量、共享存储）、SOCKET

		管道主要分为：普通管道PIPE 、流管道（s_pipe）、命名管道（name_pipe）

		1）管道：半双工通信方式、数据单向流动、只能在父子进程间使用

		2）有命管道：半双工，允许无亲缘关系进程间的通信

		3）全双工管道


		4）信号量：计数器，控制多个进程对共享资源的访问

		4.1）信号：一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。

		5）共享内存：映射一段能被其它进程访问的内存，这段共享内存由一个进程创建，但是多个进程可以访问。

		6）消息队列：消息的链表，存放在内核中并由消息队列标识符标识


		7）套接字：不同设备间的进程通信




--什么是缓冲区溢出？有什么危害？其原因是什么？

		缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据上。

		危害有以下两点：
		程序崩溃，导致拒绝额服务
		跳转并且执行一段恶意代码

		造成缓冲区溢出的主要原因是程序中没有仔细检查用户输入。 


--线程间通信

同一进程的线程共享地址空间，没有通信的必要，但要做好同步/互斥，保护共享的全局变量

1）锁机制（互斥锁、条件变量、读写锁）

2）信号量机制：计数器

3）信号机制：通过通知的操作来保持线程的同步



--四种进程或线程同步/互斥的控制方法：
		1、临界区:通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。 
		2、互斥量:为协调共同对一个共享资源的单独访问而设计的。 
		3、信号量:为控制一个具有有限数量用户资源而设计。 
		4、事 件:用来通知线程有一些事件已发生，从而启动后继任务的开始。	


--进程进入临界区的调度原则是：
		（1）如果有若干进程要求进入空闲的临界区，一次仅允许一个进程进入。
		（2）任何时候，处于临界区内的进程不可多于一个。如已有进程进入自己的临界区，则其它所有试图进入临界区的进程必须等待。
		（3）进入临界区的进程要在有限时间内退出，以便其它进程能及时进入自己的临界区。
		（4）如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象。



--操作系统中的原语是什么意思：一般地，把系统态下执行的某些具有特定功能的程序段成为原语。
	原语有俩类：
	一类是机器指令级的，其特点是执行期间不允许中断，正如在物理学中的原子一样，在操作系统中是一个不可分割的基本单位。另一类是功能型的，其特点是作为原语的程序段不允许并发执行。
	俩类原语均在系统态下执行，且都是为了完成某个系统管理所需要的功能被高层软件所调用。



死锁：

--死锁概念：
--死锁产生的原因：1、竞争资源； 2、进程推进顺序不当。

--产生死锁的四个条件：银行家算法（Banker's Algorithm）是一个避免死锁（Deadlock）的著名算法。
（1） 互斥条件：一个资源每次只能被一个进程使用。
（2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。
（3） 不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。
（4） 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。

--死锁预防：通过破坏死锁产生的4个必要条件之一来预防死锁；

--死锁避免：
		--基本思想：系统对进程发出的每一个系统能够满足的资源申请进行动态检查，并根据检查结果决定是否分配资源，如果分配后系统可能发生死锁，则不予分配，否则予以分配，这是一种保证系统不进入死锁状态的动态策略。 如果操作系统能保证所有进程在有限时间内得到需要的全部资源，则系统处于安全状态，否则系统是不安全的。

		安全状态是指：如果系统存在 由所有的安全序列{P1，P2，…Pn},则系统处于安全状态。一个进程序列是安全的，如果对其中每一个进程Pi(i >=1 && i <= n)他以后尚需要的资源不超过系统当前剩余资源量与所有进程Pj(j < i)当前占有资源量之和，系统处于安全状态则不会发生死锁。
		不安全状态：如果不存在任何一个安全序列，则系统处于不安全状态。


		 所谓银行家算法，是指在分配资源之前先看清楚，资源分配后是否会导致系统死锁。如果会死锁，则不分配，否则就分配。

		按照银行家算法的思想，当进程请求资源时，系统将按如下原则分配系统资源：
		(1) 当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程。
		(2) 进程可以分期请求资源，当请求的总数不能超过最大需求量。
		(3) 当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源。
		(4) 当系统现有的资源能满足进程尚需资源数时，必须测试系统现存的资源能否满足该进程尚需的最大资源数，若能满足则按当前的申请量分配资源，否则也要推迟分配。


--解决死锁的基本方法：

	预防死锁：
	资源一次性分配：（破坏请求和保持条件）
	可剥夺资源：即当某进程新的资源未满足时，释放已占有的资源（破坏不可剥夺条件）
	资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）

	避免死锁:
	预防死锁的几种策略，会严重地损害系统性能。因此在避免死锁时，要施加较弱的限制，从而获得 较满意的系统性能。由于在避免死锁的策略中，允许进程动态地申请资源。因而，系统在进行资源分配之前预先计算资源分配的安全性。若此次分配不会导致系统进入不安全状态，则将资源分配给进程；否则，进程等待。其中最具有代表性的避免死锁算法是银行家算法。

	检测死锁:
	首先为每个进程和每个资源指定一个唯一的号码；
	然后建立资源分配表和进程等待表，例如：

	解除死锁:
	当发现有进程死锁后，便应立即把它从死锁状态中解脱出来，常采用的方法有：
	剥夺资源：从其它进程剥夺足够数量的资源给死锁进程，以解除死锁状态；
	撤消进程：可以直接撤消死锁进程或撤消代价最小的进程，直至有足够的资源可用，死锁状态.消除为止；所谓代价是指优先级、运行代价、进程的重要性和价值等。


	
--用户模式和内核模式：

	处理器通常是用某个控制寄存器中的一个模式位来提供这种功能的，该寄存器描述了进程当前享有的特权。

	一个运行在内核模式的进程可以执行指令集中的任何指令，并且可以访问系统中任何存储器位置。 

	一个运行在用户模式的进程不允许执行特权指令，比如停止处理器，改变模式位，或者发起一个I/O操作；也不允许直接引用地址空间中内核区内的代码和数据。

	进程从用户模式变为内核模式的唯一方法是通过诸如中断，故障或者陷入系统调用这样的异常，当异常发生时，控制传递到异常处理程序，处理器将模式从用户模式变为内核模式。


