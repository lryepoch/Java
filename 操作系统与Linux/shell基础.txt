
·shell和shell script(shell脚本)：
	shell：是指"提供使用者使用界面"的软件(命令解析器)。用户必须通过"shell"将输入命令与内核通信，从而让内核可以控制硬件正确无误地工作。
	狭义的shell是指
	命令行方面的软件，广义的shell则包括图形界面软件。

	shell提供了用户与操作系统之间通讯的方式。这种通讯可以以交互方式（从键盘输入，并且可以立即得到相应），或者以shell script（非交互）方式执行。shell script是放在文件中的一串shell和操作系统命令，它们可以被重复使用。本质上，shell script是命令行命令简单的组合到一个文件里面。

	shell script是针对shell所写的脚本程序，它的功能是将许多命令写在一起，让用户可以处理复杂的操作。


·如何检查linux有多少shell?
	查看/etc/shells这个文件；

·如何知道一个命令是来自外部命令还是内置在bash中的命令？
	>type cd      打印：cd is a shell builtin



·运行脚本2种方法：
	··作为可执行程序；一定要写成./test.sh，而不是test.sh，运行其它二进制的程序也一样，直接写test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH里，你的当前目录通常不在PATH里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。

	chmod +x ./test.sh     #使脚本具有执行权限
	./test.sh              #执行脚本

	··作为解释器参数；这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。不需要执行权限，最终脚本执行显示效果一样。
	/bin/sh test.sh
	/bin/php test.php


·shell脚本一般由以下内容组成：
	1.第一行#!/bin/bash，用以声明这个文件内的语法使用bash的语法
	2.程序内容的说明，#后接批注，一般记录文件说明，作者，时间等
	3.主要环境变量的声明，如PATH
	4.主要程序部分
	5.告知执行结果，如exit o





·变量：your_name="runoob.com"

	只读变量(值不能被改变)：readonly myUrl

	删除变量(被删除后不能再次使用)：unset variable_name。
	unset命令不能删除只读变量。变量删除后不能再次使用。

	使用变量：在变量名前面加美元符号。
				变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界。推荐给所有变量加上花括号，这是个好的编程习惯。
				eg：${var} 和 $var


	··Shell脚本编程需要如下几个事项：
		Shell脚本名称命名只能使用英文字母，数字和下划线，首个字符不能以数字开头；

		不能使用特殊符号、空格来命名，中间不能有空格，可以使用下划线（_）；

		Shell脚本后缀以.sh结尾；

		不建议Shell命名为纯数字，一般以脚本功能命名；

		Shell脚本内容首行需以#!/bin/bash开头；

		Shell脚本中变量名称尽量使用大写字母，字母间不能使用“-”，可以使用“_”；

		Shell脚本变量名称不能以数字、特殊符号开头；





·变量详解：
	变量分为三种，分别是系统变量、环境变量和用户变量。变量名在定义时，首个字符必须为字母（a-z，A-Z），不能以数字开头，中间不能有空格，可以使用下划线（_），不能使用（-），也不能使用标点符号等。
	例如定义变量A=jfedu.net，定义这样一个变量，A为变量名，jfedu.net是变量的值，变量名有格式规范，变量的值可以随意指定。变量定义完成，如需要引用变量，可以使用$A。



·Shell编程之系统变量：主要是用于对参数判断和命令返回值判断时使用
	$0  当前脚本名称
	$n  当前脚本的第n个参数，n=1,2,……9；
	$*	以一个单字符串显示当前脚本的所有参数（不包括程序本身），只有一个
	$@  与$*相同，但是使用时加双引号，并在引号中返回每个参数，有多个
	$-  显示shell使用的当前选项
	$#	当前脚本的参数个数（不包括程序本身）
	$?	命令或者程序执行完后的状态，返回0表示执行成功
	$!  后台运行的最后一个进程的ID号
	$$	程序本身的PID号


·Shell编程之环境变量：主要是在程序运行时需要设置
	PATH  命令所表示路径，以冒号为分割
	HOME  打印用户家目录
	SHELL  显示当前Shell类型
	USER  打印当前用户名
	ID  打印当前用户id信息
	PWD  显示当前所在路径
	TERM   打印当前终端类型
	HOSTNAME  显示当前主机名


·Shell编程之用户变量：用户变量又称为局部变量，主要用在Shell脚本内部或者临时局部使用
A=jfedu.net  自定义变量A




·引号：
	··单引号字符串的限制：
		单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
		单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。

	··双引号的优点：
		双引号里可以有变量
		双引号里可以出现转义字符



·字符串
	··字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。

	··字符串截取：
	{var:num}：截取var字符串从第num个字符到末尾的所有字符(从0开始)，若num为负，则倒序截取并且num与冒号之间必须有空格或者()隔断；

	${var:num1:num2}，num1是位置，num2是长度(非负)

	var=abcdef
	echo ${var: -2}  #ef
	echo ${var:1-3}  #ef
	echo ${var:(-2)}  #ef

	提取子字符串：${string1:4} 从字符串第 2 个字符开始截取 4 个字符

	··字符串长度：${#string}

	··字符串查找：
	expr index "${text}" ll查找ll字符串在${text}中最初出现的位置，从1开始索引

	··字符串替换：
	单个替换：${var/pattern/pattern},将var字符串的第一个匹配的pattern替换为另一个pattern

	全部替换：${var//pattern/pattern},将var字符串中的所有能匹配的pattern替换为另一个pattern



	Shell 里面的中括号（包括单中括号与双中括号）可用于一些条件的测试：
	算术比较, 比如一个变量是否为0, [ $var -eq 0 ]。
	文件属性测试，比如一个文件是否存在，[ -e $var ], 是否是目录，[ -d $var ]。
	字符串比较, 比如两个字符串是否相同， [[ $var1 = $var2 ]]。
	[] 常常可以使用 test 命令来代替。



·数组：
	··bash支持一维数组（不支持多维数组），并且没有限定数组大小；

	··用括号来表示数组，数组元素用"空格"符号分割开：array_name=(value0 value1 value2 value3)

	··还可以单独定义数组的各个分量：可以不使用连续的下标，而且下标的范围没有限制。
	array_name[0]=value0
	array_name[1]=value1
	array_name[n]=valuen

	··读取数组：读取数组元素值的一般格式是：value=${array_name[n]}
	使用@或者*符号可以获取数组中的所有元素：${array_name[@]}/${array_name[*]}

	··创建数组：
		可以一次性创建数组并初始化所有元素或者用下标赋值的方式定义数组,
		array_name=(value1 ... valuen)
		nums=([2]=2 [0]=0 [1]=1)
		colors=(red yellow "dark blue")


	··访问数组元素：
		访问数组的单个元素：
		echo ${nums[1]} # Output: 1
		访问数组的所有元素：
		echo ${colors[*]} # Output: red yellow dark blue
		echo ${colors[@]} # Output: red yellow dark blue


	··添加元素：
		重新定义数组并将之前的值获取到并赋给新数组,
		new_array=(one "${array[@]}" three)


	··删除元素：unset array[0]







·shell注释：
	以#开头的行就是注释，会被解释器忽略；
	多行注释：
			:<<EOF
			注释内容……
			注释内容……
			注释内容……
			EOF



·shell传递参数：
	脚本内获取参数的格式为：$n。n代表一个数字，1 为执行脚本的第一个参数 $1，2 为执行脚本的第二个参数 $2，以此类推……



·shell基本运算符：
	两点注意：
	··表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。
	··完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边，叫反引号。
	··条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。


·算数运算符：+、-、*、/、%、=、==、!=

·关系运算符
	··关系运算符只支持数字，不支持字符串，除非字符串的值是数字。
	-eq/-ne/-gt/-lt/-ge/-le

·布尔运算符：！非运算，-o或运算， -a与运算

·逻辑运算符：&&逻辑与，||逻辑或

·字符串运算符：=、!=  检测两个字符串是否相等
				-z、-n  检测字符串长度是否为0
				str  检测字符串是否为空，不为空返回true
	
·文件测试运算符：
	··用于检测 Unix 文件的各种属性；

·其他检查符：
	S: 判断某文件是否socket。
	L: 检测文件是否存在并且是一个符号链接。




·shell echo 命令：
	显示变量：read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量；


·shell printf 命令：printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。



·shell test命令：
	用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。
	-eq等于则为真
	-ne不等于则为真
	-gt大于则为真
	-ge大于等于则为真
	-lt小于则为真
	-le小于等于则为真
	代码中的 [] 执行基本的算数运算。



·条件流程控制：
	··if……else……：流程控制不可为空；

		if [ 条件判断式一 ]; then
	    	当条件判断式一成立时，可以进行的指令工作内容；
		elif [ 条件判断式二 ]; then
		    当条件判断式二成立时，可以进行的指令工作内容；
		else
		    当条件判断式一与二均不成立时，可以进行的指令工作内容；
		fi

		if语句的[]内注意前后空格[ 判断 ]


	··case … esac：每个选项以;;结尾，用*)涵盖所有其他选项
		exec
		case ${oper} in
		  "+")
		    val=`expr ${x} + ${y}`
		    echo "${x} + ${y} = ${val}"
		  ;;
		  "-")
		    val=`expr ${x} - ${y}`
		    echo "${x} - ${y} = ${val}"
		  ;;
		  "*")
		    val=`expr ${x} \* ${y}`
		    echo "${x} * ${y} = ${val}"
		  ;;
		  "/")
		    val=`expr ${x} / ${y}`
		    echo "${x} / ${y} = ${val}"
		  ;;
		  *)
		    echo "Unknown oper!"
		  ;;
		esac


·循环：
	base中有四种循环：for，while，util和select；

	··不定循环：有while和until两种；
		while [ condition ]  #中括号内的状态就是判断式
		do            #do 是循环的开始！
		    程序段落
		done          #done 是循环的结束
		
		until [ condition ]
		do
		    程序段落
		done	
	
	··固定循环：
		for……in……
		for var in con1 con2 con3 ...
		do
		    程序段
		done

	··for(())：
		for （（ 初始值; 限制值; 执行步阶 ））
		do
		    程序段
		done

	··select循环：帮助我们组织一个用户菜单。它的语法几乎跟for循环一致；
		select answer in elem1 elem2 ... elemN
		do
		  ### 语句
		done

	#!/usr/bin/env bash
	PS3="Choose the package manager"
	select ITEM in bower npm gem pip
	do
	echo -n "Enter the package name:" && read PACKAGE
	case ${ITEM} in
		bower) bower install ${PACKAGE} ;;
		npm) npm install ${PACKAGE} ;;
		gem) gem install ${PACKAGE} ;;
		pip) pip install ${PACKAGE} ;;
	esac
	break # 避免无限循环
	done




·函数：
	··使用函数可以简化代码，方便调用；

	··可以带function fun()定义，也可以直接fun() 定义,不带任何参数。
	function fname(){
		程序段
	}

	··shell script的执行方式是由上而下，从左到右，因此在shell script当中的function的设置一定要在程序的最前面，这样才能够在执行时被找到可用的程序段；

	··方法返回值的处理方式有3种：return返回(仅支持数值结果码，最大256)、echo返回、保存于全局变量




·Debug：
	$ sh [-nvx] xxx.sh
	选项与参数：
	-n：不要执行xxx，仅查询语法的问题；
	-v：在执行xxx前，先将xxx的内容输出到屏幕上；
	-x：将使用到的xxx内容显示到屏幕上，这是很有用的参数！

	1.几种不错的调试方法
		1.1使用echo打印信息，类似与python的print打印
		1.2命令行中使用sh -x script.sh
		1.3shell脚本中设置：
			set -x 开启调试，set +x 禁止调试

	2.调试方式的选择
	首选调试方式sh -x ，简单便捷。
	这能跟踪执行信息,将执行脚本的过程中把实际执行的每个命令显示出来。行首显示+, +后面显示经过替换之后的命令行内容，有助于分析实际执行的是什么命令。这里也相当于打印出来了执行的命令。



·参数
	··位置参数：位置参数是在调用一个函数并传给它参数时创建的变量：
		变量			描述
		$0				脚本名称
		$1 … $9			第 1 个到第 9 个参数列表
		${10} … ${N}	第 10 个到 N 个参数列表
		$* or $@		除了$0外的所有位置参数
		$#				不包括$0在内的位置参数的个数
		$FUNCNAME		函数名称（仅在函数内部有值）

	··函数处理参数：
		参数处理	说明
		$#			返回参数个数
		$*			返回所有参数
		$$			脚本运行的当前进程 ID 号
		$!			后台运行的最后一个进程的 ID 号
		$@			返回所有参数
		$-			返回 Shell 使用的当前选项，与 set 命令功能相同。
		$?			函数返回值







