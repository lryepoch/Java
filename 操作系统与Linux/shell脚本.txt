
·运行shell脚本2种方法：
	··作为可执行程序；一定要写成./test.sh，而不是test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。

	chmod +x ./test.sh  #使脚本具有执行权限
	./test.sh  #执行脚本

	··作为解释器参数；这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。
	/bin/sh test.sh
	/bin/php test.php


·变量规则：your_name="runoob.com"
	变量名和等号之间不能有空格。
	命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
	中间不能有空格，可以使用下划线（_）。
	不能使用标点符号。
	不能使用bash里的关键字（可用help命令查看保留关键字）。
	调用一个定义过的变量，只要在变量名前面加美元符号即可。

	只读变量(值不能被改变)：readonly myUrl
	删除变量(被删除后不能再次使用)：unset variable_name。unset命令不能删除只读变量。

	使用变量：在变量名前面加美元符号，变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界。推荐给所有变量加上花括号，这是个好的编程习惯。


·变量类型：
	运行shell时，会同时存在三种变量：

	1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
	2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
	3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。


·Shell字符串
	字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。

	单引号字符串的限制：
		单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
		单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。


	双引号的优点：
		双引号里可以有变量
		双引号里可以出现转义字符


	获取字符串长度：${#string}
	提取子字符串：${string1:4} 从字符串第 2 个字符开始截取 4 个字符


	Shell 里面的中括号（包括单中括号与双中括号）可用于一些条件的测试：
	算术比较, 比如一个变量是否为0, [ $var -eq 0 ]。
	文件属性测试，比如一个文件是否存在，[ -e $var ], 是否是目录，[ -d $var ]。
	字符串比较, 比如两个字符串是否相同， [[ $var1 = $var2 ]]。
	[] 常常可以使用 test 命令来代替。



·shell数组：
	··bash支持一维数组（不支持多维数组），并且没有限定数组大小；

	··用括号来表示数组，数组元素用"空格"符号分割开：array_name=(value0 value1 value2 value3)
	··还可以单独定义数组的各个分量：可以不使用连续的下标，而且下标的范围没有限制。
	array_name[0]=value0
	array_name[1]=value1
	array_name[n]=valuen

	读取数组：读取数组元素值的一般格式是：value=${array_name[n]}
	使用@或者*符号可以获取数组中的所有元素：${array_name[@]}/${array_name[*]}





·shell注释：
	以#开头的行就是注释，会被解释器忽略；
	多行注释：
				:<<EOF
				注释内容……
				注释内容……
				注释内容……
				EOF



·shell传递参数：
	脚本内获取参数的格式为：$n。n代表一个数字，1 为执行脚本的第一个参数 $1，2 为执行脚本的第二个参数 $2，以此类推……



·shell基本运算符：
	两点注意：
	··表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。
	··完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边，叫反引号。
	··条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。

·关系运算符
	··关系运算符只支持数字，不支持字符串，除非字符串的值是数字。

·布尔运算符：！-o -a

·逻辑运算符：&& ||

·字符串运算符：
	
·文件测试运算符：
	··用于检测 Unix 文件的各种属性；

·其他检查符：
	S: 判断某文件是否socket。
	L: 检测文件是否存在并且是一个符号链接。




·shell echo 命令：
	显示变量：read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量；


·shell printf 命令：printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。



·shell test命令：
	用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。
	-eq等于则为真
	-ne不等于则为真
	-gt大于则为真
	-ge大于等于则为真
	-lt小于则为真
	-le小于等于则为真
	代码中的 [] 执行基本的算数运算。



·Shell 流程控制:
	f else-if else 语法格式：if else语句经常与test命令结合使用
							if condition1
							then
							    command1
							elif condition2 
							then 
							    command2
							else
							    commandN
							fi


	for循环一般格式为：
						for var in item1 item2 ... itemN
						do
						    command1
						    command2
						    ...
						    commandN
						done


	无限循环语法格式：
						while :
						do
						    command
						done
						或者

						while true
						do
						    command
						done
						或者

						for (( ; ; ))



·shell函数：可以用户定义函数，然后在shell脚本中可以随便调用
	1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
	2、参数返回，可以显示加：return返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255













---------------------
·Shell脚本及Hello World

	··要熟练掌握Shell编程语言，需要大量的练习，初学者可以用Shell打印“Hello World”字符，寓意着开始新的启程！

	··Shell脚本编程需要如下几个事项：
		Shell脚本名称命名一般为英文、大写、小写；
		不能使用特殊符号、空格来命名；
		Shell脚本后缀以.sh结尾；
		不建议Shell命名为纯数字，一般以脚本功能命名；
		Shell脚本内容首行需以#!/bin/bash开头；
		Shell脚本中变量名称尽量使用大写字母，字母间不能使用“-”，可以使用“_”；
		Shell脚本变量名称不能以数字、特殊符号开头；

	··Shell脚本编写完毕，如果运行该脚本，运行用户需要有执行权限，可以使用chmod +x first_shell.sh赋予可执行权限。然后./first_shell.sh执行即可，还可以直接使用命令执行: /bin/sh first_shell.sh直接运行脚本，不需要执行权限，最终脚本执行显示效果一样。

	··脚本开头固定格式：#!/bin/bash


·Shell编程之变量详解：
	变量分为三种，分别是系统变量、环境变量和用户变量。变量名在定义时，首个字符必须为字母（a-z，A-Z），不能以数字开头，中间不能有空格，可以使用下划线（_），不能使用（-），也不能使用标点符号等。
	例如定义变量A=jfedu.net，定义这样一个变量，A为变量名，jfedu.net是变量的值，变量名有格式规范，变量的值可以随意指定。变量定义完成，如需要引用变量，可以使用$A。



·Shell编程之系统变量：主要是用于对参数判断和命令返回值判断时使用
	$0  当前脚本名称
	$n  当前脚本的第n个参数，n=1,2,……9；
	$*	以一个单字符串显示当前脚本的所有参数（不包括程序本身），只有一个
	$@  与$*相同，但是使用时加双引号，并在引号中返回每个参数，有多个
	$-  显示shell使用的当前选项
	$#	当前脚本的参数个数（不包括程序本身）
	$?	命令或者程序执行完后的状态，返回0表示执行成功
	$!  后台运行的最后一个进程的ID号
	$$	程序本身的PID号


·Shell编程之环境变量：主要是在程序运行时需要设置
	PATH  命令所表示路径，以冒号为分割
	HOME  打印用户家目录
	SHELL  显示当前Shell类型
	USER  打印当前用户名
	ID  打印当前用户id信息
	PWD  显示当前所在路径
	TERM   打印当前终端类型
	HOSTNAME  显示当前主机名


·Shell编程之用户变量：用户变量又称为局部变量，主要用在Shell脚本内部或者临时局部使用
A=jfedu.net  自定义变量A