11:03 2019/9/10

第2章：

·向上转型是安全的，但是向下转型是不安全的除非知道所要处理的对象的类型。【参数化类型】

·最重要的是正确评估自己的需求，并决定Java是否能够最好的满足这种需求。即使最终仍旧选择Java作为编程语言，至少也要理解还有哪些选项可供选择，并且对为什么选择这个方法要有清楚的认识。





第18章：

·可以用InputStream以字节的形式读取任何数据（例如一个文件）。
·available()!=0在没有阻塞的情况下读取的字节数。（DataInputStream）
·等待数据输入是会产生阻塞的，所以read()方法是会产生在阻塞的。对于BufferedReader的readline()方法，只有读到换行，才会打破阻塞。
·从键盘获得输入，可以封装一个BufferedReader：
BufferedReader br = new BufferedReader(new InputStreamReader(System.in))




第21章：

·Java的线程机制是抢占式的，会周期性地中断线程，将上下文切换成另一个线程，从而为每个线程提供时间片。
·java.util.concurrent包中的Executor管理Thread对象，Executor在客户端和任务执行之间提供了一个间接层，这个中介对象将执行任务。
	··CachedThreadPool将为每个任务都创建一个线程。（Executor的首选，有多少建多少）
	··FixedThreadPool使用了有限的线程集来执行所提交的任务。（限定参数）
	··SingleThreadExecutor就像是线程数量为1的FixedThreadPool。（如果提交了多个任务，那么将会排队）
·Runnable接口不产生返回值，Callable接口将产生返回值。
·异常不能跨线程传播回main()，所以必须在本地处理所有在任务内部产生的异常。

·绝大多数时间里，所有线程都应该以默认的优先级运行。试图操控线程优先级通常是一种错误。
·优先级是在run()的开头部分设定的，在构造器中设置他们不会有任何好处，因为Executor在此刻还没有开始执行任务。Thread.currentThread().setPriority(priority);
·JDK有10个优先级，但可移植的是只使用MAX_PRIORITY、NORM_PRIORITY和MIN_PRIORITY三种级别。

·sleep():使任务中止执行给定的时间。
·yield():你的工作完成的差不多，可以让出CPU。(给出一种暗示，不一定就会执行) 

·join():当前线程直到目标线程结束才恢复执行。(可带超时参数)

·解决线程冲突问题都是采用序列化访问共享资源的。
·互斥量不是一个变量，而是一种机制。
·使用并发时，将域设置为private是非常重要的，否则synchroinzed关键字就不能防止其他任务直接访问域。
·每个访问临界共享资源的方法都必须被同步，必须同步所有相关的方法。
·使用显式的Lock对象，必须被显式地创建、锁定和释放。相对于内建的synchronized锁来说，还赋予了你更细粒度的控制力。
·原子操作不可中断。
·Atomic类被设计用来构建java.util.concurrent中的类，只有特殊情况才在自己代码中使用它们。通常依赖于锁更安全。
·临界区/互斥区：synchronized修饰的代码块/方法。
·ThreadLocal可以为使用相同变量的每个不同的线程都创建不同的存储。如果有5个线程都要使用变量x所表示的对象，那线程本地存储就会生成5个用于x的不同的存储块。



·进入阻塞状态原因：
	··调用sleep();
	··调用wait();
	··任务在等待某个输入或者输出；
	··任务试图调用某个同步控制方法，但是对象锁不可用；



·中断：
	··Thread.interrupted()提供了离开run()循环而不抛出异常；
	··不能中断正在试图获取synchronized锁或者试图执行I/O操作的线程。
	··任务：如何理解？一个方法！？