
---------------
理解ThreadLocal：
	··ThreadLocal类在多线程环境下访问时，能保证各个线程里的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程的上下文。 

	··ThreadLocal的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。 

	··Java中的ThreadLocal类允许我们创建只能被同一个线程读写的变量。因此，如果一段代码含有一个ThreadLocal变量的引用，即使两个线程同时执行这段代码，它们也无法访问到对方的ThreadLocal变量。

	··ThreadLocal类为每一个线程都维护了自己独有的变量拷贝。所以ThreadLocal作用并不在于多线程间的数据共享，而是数据的独立；由于每个线程在访问该变量时，读取和修改的，都是自己独有的那一份变量拷贝，不会被其他线程访问，变量被彻底封闭在每个访问的线程中。



ThreadLocal是什么？
	ThreadLocal叫做线程变量，意思是ThreadLocal中填充的变量属于当前线程，该变量对其他线程而言是隔离的。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。




ThreadLocal源码分析？
	set方法：首先获取到了当前线程t，然后调用getMap获取ThreadLocalMap，如果map存在，则将当前线程对象t作为key，要存储的对象作为value存到map里面去。如果该Map不存在，则初始化一个。
	ThreadLocalMap其实就是ThreadLocal的一个静态内部类，里面定义了一个Entry来保存数据，而且还是继承的弱引用。在Entry内部使用ThreadLocal作为key，使用我们设置的value作为value。

	get方法：首先获取当前线程，然后调用getMap方法获取一个ThreadLocalMap，如果map不为null，那就使用当前线程作为ThreadLocalMap的Entry的键，然后值就作为相应的的值，如果没有那就设置一个初始值。

	remove方法：从我们的map移除即可；将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。 

	initialValue()：返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。





ThreadLocal的工作原理：
	··ThreadLocal类用于创建一个线程本地变量；线程内共享，线程间互斥；Threadlocal使用弱引用的ThreadLocalMap保存不同的Threadlocal变量。
		ThreadLocal并没有继承自Thread，也没有实现Runnable接口。ThreadLocal并不是一个Thread，而是Thread的局部变量。

	··Map.Entry的作用。Map.Entry是为了更方便的输出map键值对。一般情况下，要输出Map中的key和value是先得到key的集合keySet()，然后再迭代每个key得到每个value。values()方法是获取集合中的所有值，不包含键，没有对应关系。而Entry可以一次性获得这两个值。

	··ThreadLocal是如何为每个线程创建变量的副本的？
		首先，在每个线程Thread内部有一个（ThreadLocal.ThreadLocalMap类型）的成员变量threadLocals（相当于entrySet），这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。通过ThreadLocal的get()方法可以获取该线程变量的本地副本，在get()之前要先set()，否则就要重写initialValue()。

		初始时，在Thread里面，threadLocals为空，当通过ThreadLocal变量调用get()方法或者set()方法，就会对Thread类中的threadLocals进行初始化，并且以当前ThreadLocal变量为键值，以ThreadLocal要保存的副本变量为value，存到threadLocals。然后在当前线程里面，如果要使用副本变量，就可以通过get方法在threadLocals里面查找。





ThreadLocal和线程并发的区别：
	··ThreadLocal是用来维护本地线程的变量，并不能解决线程间共享变量的并发问题。
		ThreadLocal只是一个工具，一个往各个线程的ThreadLocal.ThreadLocalMap中table的某一位置set一个值的工具而已。
		ThreadLocal是各线程将值存入该线程的map中，以ThreadLocal自身作为key，需要用时获得线的是该程之前存入的值。
		如果存入的是共享变量，那取出的也是共享变量，并发问题还是存在的。

	··ThreadLocal和多线程并发没有什么关系！
		ThreadLocal模式是为了解决单线程内的跨类跨方法调用的。ThreadLocal不是用来解决对象共享访问问题的，而主要是提供了保持对象的方法和避免参数传递的方便的对象访问方式。一般情况下，通过ThreadLocal.set() 到线程中的对象是该线程自己使用的对象，其他线程是不需要访问的，也访问不到的。各个线程中访问的是不同的对象。
		同步与ThreadLocal是解决多线程中数据访问问题的两种思路，前者是数据共享的思路，后者是数据隔离的思路。





ThreadLocal的使用场景：
    ··需要保存线程上下文信息，在任意需要的地方可以获取！！！

	··要求线程安全的，避免某些情况需要考虑线程安全必须同步而带来的性能损失！！！

		数据库连接：在多线程中，如果使用懒汉式的单例模式创建Connection对象，由于该对象是共享的，那么必须要使用同步方法保证线程安全。
			        这样当一个线程在连接数据库时，那么另外一个线程只能等待，这样就造成性能降低。
			        如果改为哪里要连接数据库，就进行连接，那么就会频繁的对数据库进行连接，性能还是不高。
			        这时使用ThreadLocal就可以既可以保证线程安全又可以让性能不会太低。但是ThreadLocal的缺点是占用了较多的空间。

        注意：数据库连接时之所以使用threadlocal是因为数据库连接池，连接池里面很多connection，导致同一个事务（可理解为涉及多个DAO）每次获取的connection不是同一个。
        		  所以为了解决这个问题，就用threadlocal，把当前的connection放到当前线程里，如果是这个线程就获取得到对应的connection。 
	    




ThreadLocal内存泄漏问题？
	Thread中ThreadLocalMap中的Entry的key是ThreadLocal，值是我们自己设定的；

	当仅仅只有ThreadLocalMap中的Entry的key指向ThreadLocal的时候，该对象仅仅被弱引用关联，ThreadLocal会进行回收的！！！
	ThreadLocal被垃圾回收后，在ThreadLocalMap里对应的Entry的键值会变成null，但是Entry是强引用，那么Entry里面存储的Object，并没有办法进行回收，这时候就出现了一个现象。那就是ThreadLocalMap的key没了，但是value还在，这就造成了内存泄漏。

	最佳实践/解决办法：使用完ThreadLocal后，执行remove操作，避免出现内存溢出情况。