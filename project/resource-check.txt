
·@Valid 和 BindingResult 是一一对应的，如果有多个@Valid，那么每个@Valid后面都需要添加BindingResult用于接收bean中的校验信息；
	能否通过注解判断属性的数据类型？


·实体转换器：
	1.无论是org.springframework.beans或者org.apache.commons.beanutils，与get/set方式相比，都存在性能问题。
	2.效率由高到底：get/set 》PropertyUtils 》BeanUtils。
	3.PropertyUtils和BeanUtils两个工具类都是对bean之间存在属性名相同的属性进行处理，无论是源bean或者是目标bean中多出来的属性均不处理。
	4.具体来说：
		BeanUtils.copyProperties()可以在一定范围内进行类型转换，同时还要注意一些不能转换时候，会将默认null值转化成0;
		Property.copyProperties()则是严格的类型转化，必须类型和属性名完全一致才转化。
		对于null的处理：PropertyUtils支持为null的场景；BeanUtils对部分属性不支持null，具体如下：
			a.  java.util.Date类型不支持,但是它的自雷java.sql.Date是被支持的。java.util.Date直接copy会报异常；
			b.  Boolean，Integer，Long等不支持，会将null转化为0；
			c.  String支持，转化后依然为null。

	5.BeanUtils的高级功能org.apache.commons.beanutils.Converter接口可以自定义类型转化，也可以对部分类型数据的null值进行特殊处理，如
	ConvertUtils.register(new DateConverter(null), java.util.Date.class)；但是PropertyUtils没有。

	另外：值得注意的是，在测试过程中发现，commons-beanutils-1.8.0.jar版本中的BeanUtils类，支持Byte到Integer或int的转化。说明实际使用过程中，我们还是要多看源码，多做测试，并且注意版本号升级带来的微小变化。

	BeanUtils.copyProperties(dest,orgi)实际是调用了PropertyUtils.copyProperties(dest,orgi)这个方法来实现的；
	这个方法的效率是非常低的，通过查看源代码：发现属性之间的copy主要用到了java.beans包里面的相关类和方法；
	对于原对象首先获取BeanInfo类型的对象，如：Introspector.getBeanInfo(a.class)，这个BeanInfo类型的实例包含了所有的Class类对象的信息。如果有父类将首先加载获取父类的信息。
	通过BeanInfo对象，可以获得PropertyDescriptor[]的数组。通过这个数组，可以获得原对象的所有属性以及属性的值。

	在BeanUtils.copyProperties()方法中，首先循环获得原对象的一个属性和属性对应的值。然后根据这个属性循环目的对象（dest）的属性。找出两个属性一致的那个属性。然后通过PropertyDescriptor对象中，获得WriteMethod的一个Method 类型对象。最好通过反射写入属性的值到目标对象对应的属性。假如：原来对象有10个属性。目标对象有10个属性。则在整个copy方法中。需要执行至少10×10比较。少于10×10次的赋值。效率将非常低下。



·java实现map和object互转的三种方法详解
/**  
 * 1.使用org.apache.commons.beanutils进行转换  
 */   
class A {
    public static Object mapToObject(Map<String, Object> map, Class<?> beanClass) throws Exception { 
        if (map == null)   
            return null;   
        Object obj = beanClass.newInstance();   
        org.apache.commons.beanutils.BeanUtils.populate(obj, map);   
        return obj;   
    }
    
    public static Map<?, ?> objectToMap(Object obj) {   
        if(obj == null)   
            return null;    
        return new org.apache.commons.beanutils.BeanMap(obj);   
    }
}
   
/**  
 * 2.使用Introspector进行转换  
 */   
class B {   
   
    public static Object mapToObject(Map<String, Object> map, Class<?> beanClass) throws Exception {     
        if (map == null)    
            return null;     
   
        Object obj = beanClass.newInstance();   
   
        BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());     
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();     
        for (PropertyDescriptor property : propertyDescriptors) {   
            Method setter = property.getWriteMethod();     
            if (setter != null) {   
                setter.invoke(obj, map.get(property.getName()));    
            }   
        }   
   
        return obj;   
    }     
       
    public static Map<String, Object> objectToMap(Object obj) throws Exception {     
        if(obj == null)
            return null;
   
        Map<String, Object> map = new HashMap<String, Object>();    
   
        BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());     
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();     
        for (PropertyDescriptor property : propertyDescriptors) {     
            String key = property.getName();     
            if (key.compareToIgnoreCase("class") == 0) {    
                continue;   
            }   
            Method getter = property.getReadMethod();   
            Object value = getter!=null ? getter.invoke(obj) : null;   
            map.put(key, value);   
        }     
   
        return map;   
    }     
       
}   
   
/**  
 * 3.使用reflect进行转换		
 */   
class C {   
   
    public static Object mapToObject(Map<String, Object> map, Class<?> beanClass) throws Exception {     
        if (map == null)   
            return null;     
   
        Object obj = beanClass.newInstance();   
   
        Field[] fields = obj.getClass().getDeclaredFields();    
        for (Field field : fields) {     
            int mod = field.getModifiers();     
            if(Modifier.isStatic(mod) || Modifier.isFinal(mod)){     
                continue;     
            }     
            field.setAccessible(true);     
            field.set(obj, map.get(field.getName()));    
        }    
        return obj;     
    }     
   
    public static Map<String, Object> objectToMap(Object obj) throws Exception {     
        if(obj == null){     
            return null;     
        }    
   
        Map<String, Object> map = new HashMap<String, Object>();     
   
        Field[] declaredFields = obj.getClass().getDeclaredFields();     
        for (Field field : declaredFields) {     
            field.setAccessible(true);   
            map.put(field.getName(), field.get(obj));   
        }
        return map;   
    }    
}  





·HandlerMethod：
	HandlerMethod handlerMethod = (HandlerMethod)object;
	Method method = handlerMethod.getMethod();

	//@Administrator注解有label以及description这两个属性
	if(method.isAnnotationPresent(Administrator.class)){
		Administrator administrator = method.getAnnotation(Administrator.class);
		String label = administrator.label();
		//获取token
		String email = JWT.decode(token).getAudience().get(0);
		//查库
		if(authenticationIntercepotor.managerMapper.selectByLabel(label).getRc().contains(email)){
			throw new SystemException(ResultEnum.ERR.getCode(), "对不起！您无权操作。");
		}
	}






·关于事务回滚：
	··不回滚：当发生异常后，使用了catch捕获了且没有手动回滚。
	··回滚：
			1.@Transactional(rollbackFor = { Exception.class })。在默认不写@Transactional(rollbackFor = Exception.class)，默认回滚RuntimeException ；
			
			2.方法抛异常；

			3.try catch捕获异常，手动回滚。这种方法相比于不回滚的那种写法，只是在catch作用域内多加入了一行代码：
				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();





·mybatis支持的映射方式：
	@Select：
	1. 在SQL语句中手动指定别名来匹配；
	2. 使用mybatis的自动下划线驼峰转换；
	3. 使用ResultMap；





·JWT:
	··由三部分组成: 头信息（header）, 消息体（payload）和签名（signature）；
		header 包含两部分，token 类型和加密算法，如 {typ: "jwt", alg: "HS256"}；头部用于描述关于该JWT的最基本的信息；

		Payload 负载就是存放有效信息的地方，有效信息被分为标准中注册的声明、公共的声明和私有的声明；

		Signature 这一部分指将 Header 和 Payload 通过密钥 secret 和加盐算法进行加密后生成的签名，secret，密钥保存在服务端，不会发送给任何人，所以 JWT 的传输方式是很安全的。签名的作用就是为了防止恶意篡改数据；

		最后，三部分使用 . 连接成字符串，就是要返回给浏览器的 token 浏览器一般会将这个 token 存储在 localStorge 以备其他需要验证用户的请求使用。


	··JWT 的声明一般被采用在身份提供者和服务器提供者间传递被认证的身份信息，以便于从资源服务器获取资源。
	··JWT是通信双方之间以JSON对象的形式安全传递信息的方法。其实可以理解为使用非对称算法来进行前后端校验。

	··处理验证用户身份：判断接口的cookie中是否包含 userInfo 等参数信息；
						还可以通过另外一种方式来处理-- JWT；


	··第三方库处理token：sign 用于生成 token；verify 用于检验token；

	··请求api携带token的方式：位于请求头、url、第三方类库


	eg：生成token：String token = JWT.create().withAudience(email).sign(Algorithm.HMAC256(EncryptHelper.encryptData(password)));
		存入redis：redisTemplate.opsForHash().put("tokens", name, token);

		获取email：String email = JWT.decode(request.getHeader("token")).getAudience().get(0); 



·JWT登录验证和传统session验证的区别：
	1.传统的session验证存在安全问题，主要是因为session是存在cookie，具体弊端引用别人说的：如果我们的页面出现了 XSS 漏洞，由于 cookie 可以被 JavaScript 读取，XSS 漏洞会导致用户 token 泄露。而作为后端识别用户的标识，cookie 的泄露意味着用户信息不再安全。尽管我们通过转义输出内容，使用 CDN 等可以尽量避免 XSS 注入，但谁也不能保证在大型的项目中不会出现这个问题。

	在设置 cookie 的时候，其实你还可以设置 httpOnly 以及 secure 项。设置 httpOnly 后 cookie 将不能被JS 读取，浏览器会自动的把它加在请求的 header 当中，设置 secure 的话，cookie 就只允许通过 HTTPS传输。secure 选项可以过滤掉一些使用 HTTP 协议的 XSS 注入，但并不能完全阻止。

	2.而jwt有什么特点呢?
	··后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可；
	··简洁(Compact)：可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快；
	··自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库；
	··前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题)
