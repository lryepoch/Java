
·@Valid 和 BindingResult 是一一对应的，如果有多个@Valid，那么每个@Valid后面都需要添加BindingResult用于接收bean中的校验信息；
	能否通过注解判断属性的数据类型？


·对象拷贝（实体转换器）：
-----------------------
	··Apache的BeanUtils、Spring的BeanUtils、Mapstruct：
		1.无论是org.springframework.beans或者org.apache.commons.beanutils，与(Mapstruct)get/set方式相比，都存在性能问题。
		2.效率由高到底：MapStruct>Spring>Apache。数据量越大，这个性能优势越来越明显；

	··Mapstruct：
		MapStruct使用注解处理器生成实现类，实现类内部是原生的new对象，然后SetXxx/getXxx方式赋值进行数据拷贝的，类似lombok，看实现类的.class；

	··Spring的BeanUtils：BeanUtils.copyProperties(source, target)对于null值也会直接复制；
						/**
					     * 配合beanutils设置对源对象中空的元素不进行复制，避免了目标对象某属性原本不为空，赋值后为空
					     */
					    public static String[] getNullPropertyNames (Object source) {
					        final BeanWrapper src = new BeanWrapperImpl(source);
					        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();

					        Set<String> emptyNames = new HashSet<String>();
					        for(java.beans.PropertyDescriptor pd : pds) {
					            Object srcValue = src.getPropertyValue(pd.getName());
					            if (srcValue == null) {
					                emptyNames.add(pd.getName());
					            }
					        }
					        String[] result = new String[emptyNames.size()];
					        return emptyNames.toArray(result);
					    }

	··Apache的BeanUtils:
		1.PropertyUtils和BeanUtils两个工具类都是对bean之间存在属性名相同的属性进行处理，无论是源bean或者是目标bean中多出来的属性均不处理，需要程序员手动处理。
		2.具体来说：
			BeanUtils.copyProperties(dest, orgi)提供类型转换功能，可以在一定范围内进行类型转换，同时还要注意一些不能转换时候，会将默认null值转化成0；
			Property.copyProperties(dest, orgi)则是严格的类型转化，必须类型和属性名完全一致才转化，相较于BeanUtils速度会更快一些；

			对于null的处理：PropertyUtils支持为null的场景；
							BeanUtils对部分属性不支持null，具体如下：
								a.java.util.Date类型不支持,但是它的自类java.sql.Date是被支持的。java.util.Date直接copy会报异常；
								b.Boolean，Integer，Long等不支持，会将null转化为0；
								c.String支持，转化后依然为null。

		3.BeanUtils的高级功能org.apache.commons.beanutils.Converter接口可以自定义类型转化，也可以对部分类型数据的null值进行特殊处理，如
		ConvertUtils.register(new DateConverter(null), java.util.Date.class)；但是PropertyUtils没有。

		另外：值得注意的是，在测试过程中发现，commons-beanutils-1.8.0.jar版本中的BeanUtils类，支持Byte到Integer或int的转化。说明实际使用过程中，我们还是要多看源码，多做测试，并且注意版本号升级带来的微小变化。

		apache的BeanUtils.copyProperties(dest, orgi)实际是调用了PropertyUtils.copyProperties(dest,orgi)这个方法来实现的；
		这个方法的效率是非常低的，通过查看源代码：发现属性之间的copy主要用到了java.beans包里面的相关类和方法；对于原对象首先获取BeanInfo类型的对象，如：Introspector.getBeanInfo(a.class)，这个BeanInfo类型的实例包含了所有的Class类对象的信息。如果有父类将首先加载获取父类的信息。通过BeanInfo对象，可以获得PropertyDescriptor[]的数组。通过这个数组，可以获得原对象的所有属性以及属性的值。

		在BeanUtils.copyProperties()方法中，首先循环获得原对象的一个属性和属性对应的值。然后根据这个属性循环目的对象（dest）的属性。找出两个属性一致的那个属性。然后通过PropertyDescriptor对象中，获得WriteMethod的一个Method类型对象。最好通过反射写入属性的值到目标对象对应的属性。假如：原来对象有10个属性。目标对象有10个属性。则在整个copy方法中。需要执行至少10×10比较。少于10×10次的赋值。效率将非常低下。

		<!-- Spring的BeanUtils -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Apache的BeanUtils依赖 -->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.8.3</version>
        </dependency>

        <!-- mapstruct依赖 -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <version>1.2.0.Final</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>1.2.0.Final</version>
        </dependency>




·java实现map和object互转的三种方法详解
/**  
 * 1.使用org.apache.commons.beanutils进行转换  
 */   
class A {
    public static Object mapToObject(Map<String, Object> map, Class<?> beanClass) throws Exception { 
        if (map == null)   
            return null;   
        Object obj = beanClass.newInstance();   
        org.apache.commons.beanutils.BeanUtils.populate(obj, map);   
        return obj;   
    }
    
    public static Map<?, ?> objectToMap(Object obj) {   
        if(obj == null)   
            return null;    
        return new org.apache.commons.beanutils.BeanMap(obj);   
    }
}
   
/**  
 * 2.使用Introspector进行转换  
 */   
class B {   
   
    public static Object mapToObject(Map<String, Object> map, Class<?> beanClass) throws Exception {     
        if (map == null)    
            return null;     
   
        Object obj = beanClass.newInstance();   
   
        BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());     
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();     
        for (PropertyDescriptor property : propertyDescriptors) {   
            Method setter = property.getWriteMethod();     
            if (setter != null) {   
                setter.invoke(obj, map.get(property.getName()));    
            }   
        }   
   
        return obj;   
    }     
       
    public static Map<String, Object> objectToMap(Object obj) throws Exception {     
        if(obj == null)
            return null;
   
        Map<String, Object> map = new HashMap<String, Object>();    
   
        BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());     
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();     
        for (PropertyDescriptor property : propertyDescriptors) {     
            String key = property.getName();     
            if (key.compareToIgnoreCase("class") == 0) {    
                continue;   
            }   
            Method getter = property.getReadMethod();   
            Object value = getter!=null ? getter.invoke(obj) : null;   
            map.put(key, value);   
        }     
   
        return map;   
    }     
       
}   
   
/**  
 * 3.使用reflect进行转换		
 */   
class C {   
   
    public static Object mapToObject(Map<String, Object> map, Class<?> beanClass) throws Exception {     
        if (map == null)   
            return null;     
   
        Object obj = beanClass.newInstance();   
   
        Field[] fields = obj.getClass().getDeclaredFields();    
        for (Field field : fields) {     
            int mod = field.getModifiers();     
            if(Modifier.isStatic(mod) || Modifier.isFinal(mod)){     
                continue;     
            }     
            field.setAccessible(true);     
            field.set(obj, map.get(field.getName()));    
        }    
        return obj;     
    }     
   
    public static Map<String, Object> objectToMap(Object obj) throws Exception {     
        if(obj == null){     
            return null;     
        }    
   
        Map<String, Object> map = new HashMap<String, Object>();     
   
        Field[] declaredFields = obj.getClass().getDeclaredFields();     
        for (Field field : declaredFields) {     
            field.setAccessible(true);   
            map.put(field.getName(), field.get(obj));   
        }
        return map;   
    }    
}  





·HandlerMethod：
	HandlerMethod handlerMethod = (HandlerMethod)object;
	Method method = handlerMethod.getMethod();

	//@Administrator注解有label以及description这两个属性
	if(method.isAnnotationPresent(Administrator.class)){
		Administrator administrator = method.getAnnotation(Administrator.class);
		String label = administrator.label();
		//获取token
		String email = JWT.decode(token).getAudience().get(0);
		//查库
		if(authenticationIntercepotor.managerMapper.selectByLabel(label).getRc().contains(email)){
			throw new SystemException(ResultEnum.ERR.getCode(), "对不起！您无权操作。");
		}
	}






·关于事务回滚：
	··不回滚：当发生异常后，使用了catch捕获了且没有手动回滚。
	··回滚：
			1.@Transactional(rollbackFor = { Exception.class })。在默认不写@Transactional(rollbackFor = Exception.class)，默认回滚RuntimeException ；
			2.方法抛异常；
			3.try catch 捕获异常，手动回滚。这种方法相比于不回滚的那种写法，只是在catch作用域内多加入了一行代码：
				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();





·mybatis支持的映射方式：
	@Select：
	1. 在SQL语句中手动指定别名来匹配；
	2. 使用mybatis的自动下划线驼峰转换；
	3. 使用ResultMap（association/collection）；
	
		<resultMap type="自定义规则中JavaBean类型的全路径，可用别名" id="唯一id方便引用">
		    
		    <id column="对应数据库id" property="对应javaBean属性id"/>
		  	
		    <result column="对应数据库字段" property="对应的javaBean属性"/>

		    <!-- 其他不指定的列会自动封装：建议只要写 resultMap 就把全部的映射规则都写上 -->
		    <result column="age" property="age"/>

     	    <association property="指定哪个属性是联合的对象" javaType="指定这个属性对象的类型[不能省略]">
		        <id column="对应javaBean属性id" property="对应数据库id"/>
		        <result column="对应数据库字段" property="对应的javaBean属性"/>
    		</association>

		    <collection property="集合类的属性名称" javaType="list"(集合类型) ofType="集合里面修饰的元素的类型" fetchType="lazy"(懒加载)>
		        <!-- 定义集合中元素的封装规则 -->
		        <id column="id" property="id"/>
		        <result column="name" property="name"/>
		        <result column="age" property="age"/>
		    </collection>

		</resultMap>








·数据库操作：
使用内连接，如果book中有需要删除的数据，而其他三张表中没有与其关联的数据，那么就不会有任何数据被删除，因为满足相等连接条件没有得到满足（因为其他三张表没有对应的内容啊，怎么可能会满足！）使用外连接，如果book表一定有数据，而关联的表有可能有数据也有可能没数据的话，我们可以通过左连接删除的方式，把两张表都删除。无论关联的表有没有数据，book表都可以删除成功。



·当传入两个表的数据时，可以自定义需要传入的实体（实体属性可以为基本类型，也可以是集合类型），还可以使用JSONObject（这个较麻烦）。





·BeanInfo对象有较多的方法，主要的有两个：
	一个是getPropertyDescriptor()，返回一个PropertyDescriptor类型的数组。该类型对象包括父类Object对象的class属性。
	另外一个是getMethodDescriptor()，返回的是一个MethodDescriptor类型的数组。这个数组中包括对应Bean中的所有方法的属性，甚至是Object类型定义的wait().notify()等方法。






·在Mybatis分页插件的说明中有如下内容 

	··不支持的情况：
		对于关联结果查询，使用分页得不到正常的结果，因为只有把数据全部查询出来，才能得到最终的结果，对这个结果进行分页才有效。因而如果是这种情况，必然要先全部查询，在对结果处理，这样就体现不出分页的作用了。

		对于关联嵌套查询，使用分页的时候，只会对主SQL进行分页查询，嵌套的查询不会被分页。

	··对于不支持情况：
		在Mybatis中没有任何简单的分页能实现该功能，即使Mybatis的内存分页也不能实现关联结果查询的分页。

	··如何对关联结果进行分页？
		针对这种情况最好的方法就是手写分页，针对主要语句进行分页，对连接的表不进行分页查询，针对主要语句写count查询（不需要管连接的表）。这样一来，对嵌套的结果就没有影响了。


·@DeleteMapping和@PostMapping区别：




·控制台打印mybatis注解sql：logging.level.com.example.cache.mapper = debug 



·System.getProperty(user.dir)：
    linux下获取是当前用户的文件夹根路径。例如：root用户获取是的/root/路径，其他用户获取的是/home/xxxx/路径。
    jar包位置在哪，启动就在哪。System.getproperty(user.dir)就指向哪。



·Java支持3个通用位置来查找资源：
    ··在当前的工作目录。这是你的命令提示符和System.getProperty("user.dir")返回的地方，但是你不能依赖那些与文件系统中的任何文件夹位置相关的文件，特别是与你自己的系统上的项目结构无关。
    如果你的程序有一个命令行界面并寻找一些默认的文件名来处理，你应该只使用它。
    
    ··在用户家这就是你打电话时System.getProperty("user.home")。在Unix上，这转移到$HOMEWindows上并在Windows上转移%USERPROFILE%。 这是在运行时更改文件或保存用户特定内容的最佳位置。
    
    ··在自己的代码位置。与你的课程相同的软件包中的资源可以访问，getClass().getResource("filenameWithoutPath")但通常你会将资源放在应用程序根目录中的特殊文件夹中，并像下面这样访问它：getClass().getResource("/relative/path/from/src/root/filenameWithoutPath")。
    在你的IDE中，这个特殊的文件夹应该是project/src/main/resources。