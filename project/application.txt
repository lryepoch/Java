
·更改权限状态之类的，额外添加一个实体类EnabledDo，属性只包含id以及enabled；

·更改用户状态，为什么需要携带HttpServletRequest request？

·在mapper层使用@Param 参数，可以自定义Java属性对应的SQL语句的字段；

·插入、修改数据时，如果有很多字段可以不用写出所有字段。通过在方法中传递一个实体类，然后在mapping.xml文件中声明parameterType的实体类型即可。

·批量插入,mybatis xml 用到了<foreach>

·原来update语句更新表的时候，是不用写出要更新那个字段的！额额

·create_time和update_time数据类型是datetime，并且设置默认函数是CURRENT_TIMESTAMP

·对于时间范围的选择，按照正常的数字大小判断即可。


·Application权限设计：
	1.对类（非方法）映射进行拦截。判断当前用户请求的路径（类映射+方法映射）是否包含它，如果包含，则进一步判断当前用户是否是超级管理员或者管理员。如果是，则可以对当前请求的路径执行下去，如果不是，则返回false，并给出提示“当前用户权限不足”；
	2.如果是普通用户登录系统，那么他只能操作没有进行拦截的url；




·//设置从request中取得的值或者从数据库中取出的值的编码
	request.setCharacterEncoding()
	//设置HTTP响应的编码，同时指定浏览器显示的编码
	response.setContentType("application/json; chartset=UTF-8");
	//设置HTTP响应的编码，如果前面使用了response.setContentType()设置了编码，则会覆盖之前的设置
	response.setCharacterEncoding("UTF-8");




·@SuppressWarnings注解就可以消除这些警告的产生，注解的使用有三种：
	1. @SuppressWarnings("unchecked")  [^ 抑制单类型的警告]
	2. @SuppressWarnings("unchecked","rawtypes")  [^ 抑制多类型的警告]
	3. @SuppressWarnings("all")  [^ 抑制所有类型的警告]
	***
	> 通过源码分析可知@SuppressWarnings其注解目标为类、字段、函数、函数入参、构造函数和函数的局部变量。建议把注解放在最近警告发生的位置。




·ObjectMapper的使用：数据模型转换框架。可以方便的将模型对象转换为JSON，或者JSON生成相应的模型类。

	··字符串转换成实体：
		String jsonString = "{\"id\":1001,\"name\":\"Tom\",\"info\":\"一个小男孩\"}";
		Student student = mapper.readValue(jsonString, Student.class);

	··实体类转字符串：
		Student student = new Student();
		student.setId(1002);
		student.setName("李四");
		student.setInfo("一个小女孩");
		String jsonString = mapper.writeValueAsString(student);

	··字符串转List<实体类>：
		String jsonString = "[
								{\"id\":1001,\"name\":\"Tom\",\"info\":\"一个小男孩\"}, 
								{\"id\":1002,\"name\":\"Jane\",\"info\":\"一个小女孩\"}
							]";
        Student[] stu = mapper.readValue(jsonString, Student[].class);
        for (Student student : stu) {
            System.out.println(student);
        }
        String ss = mapper.writeValueAsString(stu);




·Java对象转JSON时如何动态的增删改查属性：
    ··JSON字符串增加额外字段：
    	String json = "{\n" +
        "    \"username\":\"felord.cn\",\n" +
        "    \"age\":18\n" +
        "}";
		ObjectMapper objectMapper = new ObjectMapper();

		ObjectNode jsonNodes = objectMapper.readValue(json, ObjectNode.class);
		jsonNodes.put("gender", "male");
		String newJson = objectMapper.writeValueAsString(jsonNodes);
		// newJson = {"username":"felord.cn","age":18,"gender":"male"}


	··对象转JSON时新增字段：
		User user = new User();
		user.setUsername("felord.cn");
		user.setAge(18);

		ObjectMapper objectMapper = new ObjectMapper();
		ObjectNode jsonNodes = objectMapper.valueToTree(user);
		jsonNodes.put("gender", "male");
		String newJson = objectMapper.writeValueAsString(jsonNodes);
		// newJson = {"username":"felord.cn","age":18,"gender":"male"}
