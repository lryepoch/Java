
操作excel：

反射：https://www.jianshu.com/p/9be58ee20dee


comparator比较器：


Token：Token是在服务端产生的。如果前端使用用户名/密码向服务端请求认证，服务端认证成功，那么在服务端会返回Token给前端。前端可以在每次请求的时候带上Token证明自己的合法地位。
		如果这个 Token 在服务端持久化（比如存入数据库），那它就是一个永久的身份令牌。


<T1,T2> 泛型；


PropertyUtils.copyProperties();


-------------------------

·实体类之间的转换：
	··新建一个工具类用于转换；（BeanUtils.copyProperties(obj1,obj2)&&PropertyUtils.copyProperties(obj1,obj2)）
	··在新建类中初始化构造方法；（实体之间的转换，集合之间的转换依赖于实体之间的转换）



·mybatis中如何映射实体类
	··调用@Param注解
	··在xml文件中使用parameterType


·查：Get	无注解
·增：Post	@RequestBody
·改：Post	@RequestBody
·删：Post	@RequestParam





·后端数据处理：
	··接口多次命中数据库
	··一次性拿数据+递归整理



·mybatis别名配置：
	··当实体类中的字段与数据库表中的字段不匹配时（不符合驼峰等），需要使用as来定义别名。
	··在xml配置文件中自己定义一个resultMap实现别名配置。



·根据一张表的id删除两张有共同型号的表的数据时，要建立两张表之间的联系，即：where a表.共同字段=b表.共同字段；


·截取字符串用的是subString()，截取集合用的是subList()；


·输入一个数组参数，最后要总体删除。需要先将数组转换成集合：new ArrayList<>(Arrays.asList(ids))


·mybatis mapper接口传递一个集合。默认参数名为list；如果更改为其他的参数名，需要添加@Param注解。


·@Autowired和@Resource之间的区别：
	@Autowired注解是按类型装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它required属性为false。
	@Resource注解和@Autowired一样，也可以标注在字段或属性的setter方法上，但它默认按名称装配。名称可以通过@Resource的name属性指定，如果没有指定name属性，当注解标注在字段上，即默认取字段的名称作为bean名称寻找依赖对象，当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象。
	@Resources按名字，是ＪＤＫ的，@Autowired按类型，是Ｓｐｒｉｎｇ的。



·常见格式化时间的方法：
	··SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date = df.format(new Date());

	··String date = Timestamp.valueOf(LocalDateTime.now());



·常见分页功能的实现方式：
	··插件；
		[mybatis]pagehelper，[jpa]Pageable；pageHelper不支持一对多结果嵌套；

	··自行封装；
		定义一个Page<T>，有currentPage/pageSize/total/recordList/pageNum/, 根据sql语句的limit (currentRecord-1)*pageSize,pageSize; 对需要的字段拼接出来；


·如何处理图片问题：
	··存到数据库；存放图片路径；
	··存到服务器；上传图片到服务器；



·程序中如何获取实时时间：
	··数据库字段默认设置为 CURRENT_TIMESTAMP
	··在sql语句中对时间赋值 now()
	··在代码中调用 setter()



·fridge权限设计：
	1.设计好数据库的request_url，包括页面和操作；
	2.用户单点登录时，找出当前用户可以访问的全部url，更新进权限校验拦截器中；
	3.当前用户请求某个路径时，判断权限校验拦截器中是否包含当前请求的url，如果有，则返回true，拦截通过。



·String.format():
	这个方法第一个参数是格式串，后面的参数都是格式串的参数，用于替换格式串中的占位符。
	占位符以 "%x" 的形式表示，不同的参数类型要用不同的字母。后面会具体介绍。
	String.format() 返回值类型为字符串，也就是格式化的结果。


·Java中的getResourceAsStream有以下几种：
	1. Class.getResourceAsStream(String path) ： path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。
	2. Class.getClassLoader.getResourceAsStream(String path) ：默认则是从ClassPath根下获取，path不能以’/'开头，最终是由ClassLoader获取资源。
	3. ServletContext. getResourceAsStream(String path)：默认从WebAPP根目录下取资源，Tomcat下path是否以’/'开头无所谓，当然这和具体的容器实现有关。
	4. Jsp下的application内置对象就是上面的ServletContext的一种实现。



·spring-boot-configuration-processor 是干啥用的？
spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了

引入pom依赖

 <dependency>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-configuration-processor</artifactId>
     <optional>true</optional>
 </dependency>
 

author.name=zhangsan
author.age=20
再在配置类开头加上@PropertySource("classpath:your.properties")，其余用法与加载yml的配置一样

@Component
@PropertySource(value = {"classpath:static/config/authorSetting.properties"},
        ignoreResourceNotFound = false, encoding = "UTF-8", name = "authorSetting.properties")
public class AuthorTest {
 
    @Value("${author.name}")
    private String name;
    @Value("${author.age}")
    private int age;
}

@PropertySource 中的属性解释：
1.value：指明加载配置文件的路径。 
2.ignoreResourceNotFound：指定的配置文件不存在是否报错，默认是false。当设置为 true 时，若该文件不存在，程序不会报错。实际项目开发中，最好设置 ignoreResourceNotFound 为 false。 
3.encoding：指定读取属性文件所使用的编码，我们通常使用的是UTF-8。

当我们使用 @Value 需要注入的值较多时，代码就会显得冗余，于是 @ConfigurationProperties 登场了

@Component
@ConfigurationProperties(prefix = "author")
@PropertySource(value = {"classpath:static/config/authorSetting.properties"},
        ignoreResourceNotFound = false, encoding = "UTF-8", name = "authorSetting.properties")
public class AuthorTest {
 
    private String name;
    private int age;
 
}

@RestController
@EnableConfigurationProperties
public class DemoController {
 
    @Autowired
    AuthorTest authorTest;
 
    @RequestMapping("/")
    public String index(){
        return "author's name is " + authorTest.getName() + ",ahtuor's age is " + authorTest.getAge();
    }
}

使用 @EnableConfigurationProperties 开启 @ConfigurationProperties 注解。


















pom.xml->application.yml->entity(实体，返回的数据对象)->
----------------------
·自定义数据源；
·swagger接口文档；
·实体转换器（单个对象转换，对象集合转换）开花了：查询数据库时先查全部字段，然后在service层根据需要进行对象拷贝，最后返回新VO即可；
·对象拷贝；
·注解切面；
·用户跟角色关联，角色跟权限关联；
·获取当前用户信息，先从request中获取邮箱号；
·反射（获取字段的数据类型以及值）；

·业务：
	··getFields()：获得某个类的所有的公共（public）的字段，包括父类中的字段。 
		getDeclaredFields()：获得某个类的所有声明的字段，即包括public、private和proteced，但是不包括父类的申明字段。
		field.setAccessible(true)：反射时访问私有变量

·登录
	··单点登录：
	··普通登录：此处还是需要借助单点登录，绝了