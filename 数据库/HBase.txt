
·HBase能够“快速地”“分布式地”处理“大量数据”，基于它的
　　1.内存结构
　　2.文件存储结构


·HBase 是 BigTable 的开源（源码使用 Java 编写）版本。是 Apache Hadoop 的数据库，是建立在 HDFS 之上，被设计用来提供高可靠性、高性能、列存储、可伸缩、多版本的 NoSQL 的分布式数据存储系统，实现对大型数据的实时、随机的读写访问。
	HBase 依赖于 HDFS 做底层的数据存储，BigTable 依赖 Google GFS 做数据存储；
	HBase 依赖于 MapReduce 做数据计算，BigTable 依赖 Google MapReduce 做数据计算；
	HBase 依赖于 ZooKeeper 做服务协调，BigTable 依赖 Google Chubby 做服务协调；



·要点：
	它介于 NoSQL 和 RDBMS 之间，仅能通过主键(rowkey)和主键的 range 来检索数据
	HBase 查询数据功能很简单，不支持 join 等复杂操作
	不支持复杂的事务，只支持行级事务(可通过 hive 支持来实现多表 join 等复杂操作)。
	HBase 中支持的数据类型：byte[]（底层所有数据的存储都是字节数组）
	主要用来存储结构化和半结构化的松散数据。


·表特点：
	大：一个表可以有上十亿行，上百万列；
	面向列：面向列（族）的存储和权限控制，列（族）独立检索；
	稀疏：对于为空的列，并不占用存储空间，因此表可以设计的非常稀疏；
	无模式：每行都有一个可排序的主键和任意多的列，列可以根据需要动态的添加，同一张表中不同的行可以有截然不同的列；


·Rowkey的概念：
	··Rowkey的概念和mysql中的主键是完全一样的，Hbase使用Rowkey来唯一的区分某一行的数据；

	··rowkey 行键可以是任意字符串(最大长度是 64KB，实际应用中长度一般为 10-100bytes)，最好是 16。在 HBase 内部，rowkey 保存为字节数组。HBase 会对表中的数据按照 rowkey 排序 (字典顺序)；

	··HBase只支持3种查询方式：
		··基于Rowkey的单行查询；
		··基于Rowkey的范围扫描；
		··全表扫描；


·Column的概念：列，可理解成mysql列；


·ColumnFamily的概念：
	列族, HBase引入的概念。
	Hbase通过列族划分数据的存储，列族下面可以包含任意多的列，实现灵活的数据存取。就像是家族的概念，我们知道一个家族是由于很多个的家庭组成的。列族也类似，列族是由一个一个的列组成（任意多）。
	Hbase表的创建的时候就必须指定列族。就像关系型数据库创建的时候必须指定具体的列是一样的。
	Hbase的列族不是越多越好，官方推荐的是列族最好小于或者等于3。我们使用的场景一般是1个列族。


·TimeStamp的概念：
	timestamp是实现hbase多版本的关键；在hbase中使用不同timestamp来标识相同rowkey行对应的不同版本的数据；
	hbase中通过rowkey和columns确定的为一个存储单元，称为cell；每个cell都保存着同一份数据的多个版本，版本通过时间戳来索引；

	时间戳由hbase(在数据写入时自动)赋值，此时时间戳是精确到毫秒的当前系统时间。时间戳也可以由客户显示赋值。如果应用程序要避免数据版本冲突，就必须自己生成具有唯一性的时间戳。每个cell中，不同版本的数据按照时间倒序排序，即最新的数据排在最前面；
	
	为了避免数据存在过多版本造成的管理（包括存储和索引）负担，hbase提供了两种数据版本回收方式：
		保存数据的最后n个版本;
		保存最近一段时间内的版本（设置数据的生命周期TTL）;
		用户可以针对每个列簇进行设置；


·单元格(Cell)：
	由{rowkey,column(=+),version}唯一确定的单元。Cell中的数据是没有类型的，全部是字节码形式存储；







HBase提供的五个权限标识符：RWXCA,分别对应着READ('R'), WRITE('W'), EXEC('X'), CREATE('C'), ADMIN('A')
klist;
hbase shell;
list_namespace;