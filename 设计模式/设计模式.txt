-----------------------
·设计模式主要是基于以下的面向对象设计原则：
	对接口编程而不是对实现编程。
	优先使用对象组合而不是继承。


·模式分类：
	··创建型模式->对象怎么来
	这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用new运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。

	··结构型模式->对象和谁有关
	这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。

	··行为型模式->对象与对象在干嘛
	这些设计模式特别关注对象之间的通信。

	··J2EE模式->对象合起来要干嘛（表现层,文中表示层个人感觉用的不准确）java是面向对象的语言,所以要搞好对象,模式（套路）就是用来更加好的搞对象滴。
	这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。



·设计模式的六大原则：
	开闭原则：实现热插拔，提高扩展性。当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。
	里氏代换原则：实现抽象的规范，实现子父类互相替换。子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。
	依赖倒转原则：针对接口编程，实现开闭原则的基础。降低了客户与实现模块之间的耦合。
	单一职责原则：一个方法应该尽可能做好一件事情。
	接口隔离原则：降低耦合度，接口单独设计，互相隔离；尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。
	迪米特法则，又称不知道原则：功能模块尽量独立；
	合成复用原则：尽量使用聚合，组合，其次才是继承；要使用继承关系，则必须严格遵循里氏替换原则。



·UML中的类图及类图之间的关系：
	首先，UML从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。

	耦合度大小关系：泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖

	依赖：是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。
		在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。人通过手机的语音传送方法打电话。

	关联：是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。
		关联可以是双向的，也可以是单向的。
		在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。
		在代码中通常将一个类的对象作为另一个类的成员变量来实现关联关系。每个老师可以教多个学生，每个学生也可向多个老师学，他们是双向关联。

	聚合：是关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系。
		聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。
		在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。

	组合：是关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 cxmtains-a 关系。
		在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。
		在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。

	泛化：是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。
		在UML类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student类和Teacher类都是Person类的子类。

	实现：是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。
		在UML类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具。





-------------------
·GoF的23种设计模式的功能：
	··根据目的来分：
		根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式3种。

		···创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。5种
			单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。
			原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。
			工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。
			抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
			建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。

		···结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。7种
			代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。
			适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。
			桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。
			装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。
			外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。
			享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。
			组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。

		···行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。11种
			模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
			策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。
			命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。
			职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。
			状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。
			观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。
			中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。
			迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。
			访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。
			备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。
			解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。


	··根据作用范围来分：
		根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式2种。

		···类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。
		···对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF中除了以上4种，其他的都是对象模式。




--------------------------
·单例模式
		概念：保证一个类仅有一个实例，并提供一个访问它的全局访问点。避免了频繁地创建和销毁对象而带来性能的损耗；

		应用场景：
	　　（1）资源共享的情况下，避免由于资源操作时导致的性能或损耗等。如上述中的日志文件，应用配置。
	　　（2）控制资源的情况下，方便资源之间的互相通信。如数据库连接池，多线程线程池，Windows任务管理器。
	    （3）实际上，配置信息类、管理类、控制类、门面类、代理类。通常被设计为单例类，像Java的Struts、Spring框架，.Net的Spring.Net框架，以及Php的Zend框架都大量使用了单例模式。

		举例：1.Spring容器中使用的注册表式实现的单例模式，简单来说，就是使用同一个工具类，管理多个不同类的实例创建，每次只需在工具类中注册该类，即可获得该类的实例。
　　    	2.像我们在搭建heibernate框架时，是sessionFactory创建session，session对象操作数据库的。当多个线程共享session时就会出现数据安全问题，因此企业开发中，我们不会把它设计成单例模式。
		

		·饿汉式：线程安全；但是类加载时就初始化，浪费内存。

		·懒汉式：线程不安全；因为没有加锁 synchronized，所以严格意义上它并不算单例模式。

		·懒汉式改进1：lazy loading，能够在多线程中很好的工作，但是，效率很低；


		·懒汉式改进2：增加一个静态内部类，在这个静态内部类中创建外部类的实例，这个内部类和外部类并没有绑定的关系，而且只有被调用到才会装载，从而也可以实现了延迟加载。线程安全。


		·双检锁：线程安全且在多线程情况下能保持高性能。
						类加载时申明对象,  volatile解决多线程共享变量下及时感知变量的最新状态。 

			  问题：为什么必须要加volatile，主要用来避免重排序问题导致其他的线程看到了一个已经分配内存和地址但没有初始化的对象，也就是说这个对象还不是处于可用状态，但是就被其他线程引用了。

						双重检验锁是对同步块加锁的方法。为什么会称为双重检验，因为有两次对instance == null的检查，一次在同步块中/一次在同步块外部。

						对于两次instance是否为空的判断解释：
						1.第一次判断：
						       为了提高性能！！！
						       如果去掉这次的判断，直接运行synchronized，会使每个线程进入getInstance()都会得到一个静态内部锁。这样的话，锁的获得以及释放的开销（包括上下文切换，内存同步等）都不可避免，降低了效率。所以在synchronized前面加一次判断是否为空，则会大大减少synchronized同步块的执行次数。

						2.第二次判断：
								为了线程安全！！！
								因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例。



							//饿汉式
							public class Singleton{
								private Singleton(){

								}
								private static Singleton singleton=new Singleton();
								public static Singleton getInstance(){
									return singleton;
								}
							}


							//懒汉式
							public class Singleton{
								private Singleton(){

								}
								private static Singleton singleton;

								private static Singleton getInstance(){
									if(singleton==null)
										singleton = new Singleton();
									return singleton;
								}
							}


							//静态内部类
							public class Singleton{
								private Singleton(){

								}

								private static class SingletonH{
									private static final Singleton singleton=new Singleton();
								}

								public static final Singleton getInstance(){
									//静态内部类调用其成员属性
									return SingletonH.singleton;
								}
							}


							//双检锁
							public class Singleton{
								private Singleton(){

								}
								private volatile static Singleton singleton;
								public static Singleton getInstance(){
									if(instance==null){
										synchronized(Singleton.class){
											if (instance==null) {
												singleton= new Singleton();
											}
										}
									}
									return singleton;
								}
							}



