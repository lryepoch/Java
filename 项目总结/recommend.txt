
·如何自己构造一个多层json返回给前端；
Map，JSONArray，JSONObject；
List，Map；



·获取项目的工作目录：System.getProperty("user.dir")

·返回日期的正确格式时，需在实体类中日期属性上添加一个注解：@JsonFormat(pattern="yyyy-MM-dd HH:mm:ss",timezone="GMT+8")

·同一个对象的实体类之间的继承：1.extends；
								2.对于Object，在构造方法中对属性赋值；
								3.对于Map，写一个方法进行convert；


·log4j日志的使用；


·BeanUtils.copyProperties(Object source, Object target);//类拷贝




·Class.getResourceAsStream()与ClassLoader.getResourceAsStream()的区别：

	··Class.getResourceAsStream() 会指定要加载的资源路径与当前类所在包的路径一致。
    eg：你写了一个MyTest类在包com.test.mycode 下，那么MyTest.class.getResourceAsStream("name") 会在com.test.mycode包下查找相应的资源。
	    如果这个name是以 '/' 开头的，那么就会从classpath的根路径下开始查找。

	··ClassLoader.getResourceAsStream()  无论要查找的资源前面是否带'/' 都会从classpath的根路径下查找。
	
    所以: MyTest.getClassLoader().getResourceAsStream("name")和MyTest.getClassLoader().getResourceAsStream("name") 的效果是一样的。


·SpringBoot项目中，需要获取resources文件的路径：
1、获取resources文件夹路径
File directory = new File("xxx/xxx/src/main/resources");
String reportPath = directory.getCanonicalPath()；
xxx为你的项目内包的名称，File只会找到项目最外层地址；
这里需要注意，不能在xxx前面加/，否则只会找到顶层地址；




·规范springboot后台返回时间格式：

	1、针对json格式：在配置文件中加以下配置：
	    spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
	    spring.jackson.time-zone=GMT+8

	2、针对form表单格式，加下面这句配置就可以：
	 spring.mvc.dateFormat = yyyy-MM-dd HH:mm:ss

	3、也可以在pojo中对特定的date类型属性加了以下配置：
	    @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")
	    @JsonFormat(timezone = "GMT+8",pattern = "yyyy-MM-dd HH:mm:ss")    




·mybatis xml传入一个数组时，parameterType="int[]"



·SQL查询语句中的 limit 与 offset 的区别：

	limit y 分句表示: 读取 y 条数据

	limit x, y 分句表示: 跳过 x 条数据，读取 y 条数据

	limit y offset x 分句表示: 跳过 x 条数据，读取 y 条数据



·RestTemplate：发起http请求，代码更加简洁
	HttpHeaders headers = new HttpHeaders();
	Map map = new HashMap<>();
	HttpEntity requestBody = new HttpEntity(map,headers);
	RestTemplate restTemplate = new RestTemplate();
	ResponseEntity responseEntity = restTemplate.postForEntity(url,requestBody,JSONObject.class);
	JSONObject responseEntityBody = responseEntity.getBody();





·HandlerMethod：
HandlerMethod它作为Spring MVC的非公开API，可能绝大多数小伙伴都对它比较陌生，但我相信你对它又不是那么的生疏，因为你可能没用过但肯定见过。
比如Spring MVC的拦截器HandlerInterceptor的拦截方法的第三个入参Object handler，虽然它是Object类型，但其实绝大部分情况下我们都会当作HandlerMethod来使用；






· A.isAnnotationPresent(B.class)；意思就是：注释B是否在此A上。如果在则返回true；不在则返回false。





·权限管理：
	1.定义一个注解，把注解@Administrator添加到需要权限才能访问的方法上；
	2.HandlerInterceptor中判断：(HandlerMethod)object.getMethod().isAnnotationPresent(Administrator.class)，若为true则进入下一步；
	3.从request中获取用户信息进一步判断当前用户的状态以及角色；







·加密：
	//加密方式(MD5加密)
	String hashAlgorithmName = "MD5";
	//盐：为了即使相同的密码不同的盐加密后的结果也不同
	ByteSource byteSalt = ByteSource.Util.bytes(salt);
	//密码
	Object source = "qwe!2345";
	//加密次数
	int hashIterations = 1024;

	String newData = new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations).toHex();