-----------------------------------------------------------------------------------------------------------------------------------
项目概述：

2018.07-2018.08 信息管理系统 开发人员
管理个人的基本信息，方便企业对所用员工进行人事方面的规范与管理；
功能模块：通过数据库表的联合查询，显示个人全部信息，包括个人基本信息和所在部门名；
				对添加人员的个人信息进行数据格式校验，包括姓名和邮箱格式；【前端格式校验+后端数据是否重复校验】
				更新时个人信息合法校验，主要指邮箱格式校验；【前端格式校验】
				可以单个删除或者批量删除个人信息；【JavaScript实现】
				以及分页信息和分页条的创建；	【分页插件】
技术要点：Maven、SSM、Pagehelper、Bootstrap、jQuery、Ajax；


2018.04-2018.05 点餐管理系统 开发人员
为餐厅老板提供一个餐厅管理平台。管理员可以设置菜系、菜品以及餐桌的全部信息，为前台顾客点餐提供选择；
功能模块：菜系、菜品和餐桌的添加、修改和删除操作；
				菜品在添加和修改过程中实现菜品图片的上传；【DiskFileItemFactory + FileItem + ServletFileUpload 】
				点击菜系、菜品、餐桌各栏时，显示分页信息；【】
技术要点：Servlet、JSP、MVC 设计模式；
				采用 ThreadLocal 封装 Connection，单例模式；
				JDBC 事务管理，c3p0 数据库连接池；


2018.03-2018.04 教育产业创新公共服务平台 项目成员
企业用户通过注册，登录公共服务平台。日常可了解行业资讯、发布企业需求以及企业供应、上传企业数据；
负责模块：系统需求文档和详细设计文档的编写，数据库的设计与开发；
开发工具：PowerDesigner、MySQL



社区问答系统：
一个小社区，人们可以在此分享有趣的事物，交流新鲜的想法；
功能模块：提出问题和回答问题的实现，问题列表的数量控制；
技术要点：SSM、jQuery
---------------------------------------------------------------------------------------------------------------------------------------------------------------


项目分析：

信息管理系统：

1、数据校验：jQuery前端校验【正则表达式】+JSR303后端校验【由springmvc提供的。1导包；2在bean中在属性上面添加@Pattern】
	关键数据既要前端校验，又要后端校验

2、JSR303数据校验：后端校验，tomcat7以上支持，在相关属性前面添加@pattern（regexp="正则表达式",message=""）。

3、配置文件的填写：
	1引入jQuery和bootstrap文件；
	2springmvc配置文件中，JSR303、快捷ajax、映射动态请求：添加注解<mvc:annotation-driven/>
	3spring配置文件内容：
				---数据源
				---与mybatis整合
				---配置扫描器
				---配置事务控制
	4mybatis配置文件：全局配置、别名配置、分页插件。
	5需要测试什么部分，就在测试类中添加什么部分的类和对象。
	6json的实现：返回json可以实现平台无关性；
								注解@ResponseBody；可以指示返回json字符串。
								自己写一个类，增删改查都可以使用它，就不用只写一个PageInfo类。



--------------------------------------------------------------------------------------------------------
概括：员工个人信息管理系统；
功能：主要包括信息的增删改查操作；
技术要点：
		  1MySQL建立数据库；【mysql】
	      2Maven项目管理，【maven】
	      3后台mybatis跟数据库进行交互，获取数据；使用springMVC接收请求、做出响应；【ssm】
	      4使用Restful风格的URI实现页面请求；【restful uri】（Rest风格的URI；对资源的操作（get、post、put、delete）
	      5使用分页插件pagehelper来查询分页信息；【pagehelper】（在mybatis配置文件中导包）
	      6前端主要是使用了bootstrap和jQuery来完成页面编写和页面操作；用ajax完成页面和服务器间数据的异步交互；【bootstrap、jquery、ajax】（jQuery中已经有封装好的ajax，ajax的经典写法）

	      maven：
	      				1.maven是一个项目构建和管理的工具，可以方便的编译代码、进行依赖管理等等。
	      				2.通过maven内置的Tomcat启动项目，这时不需要使用编辑器在安装Tomcat插件；
	      				3.利用maven直接把maven项目打成war包；
	      				4.热部署，热编译：意思就是，在你web项目已经运行的时候，修改代码的能直接被web服务器所接受，就不需要你重启服务器了，或者重新部署代码了，而且你可以直接通过maven打包war或者jar项目。

			            优点一：项目非常大时，可借助Maven将一个项目拆分成多个工程，最好是一个模块对应一个工程，利于分工协作。而且模块之间还是可以发送消息的。
						
						问题：同样的jar包重复出现在不同的工程中，一方面浪费空间，同时也让工程臃肿；同一项目的jar包  复制 和 粘贴到WEB/INF/lib下。
						优点二：借助Maven，可将jar包仅仅保存在“仓库”中，有需要该文件时，就引用该文件接口，不需要复制文件过来占用空间。

						问题：如果jar包都到各个官网网站下载，会浪费很多时间，而且可能不全。
						优点三：借助Maven可以以规范的方式下载jar包，因为所有的知名框架或第三方工具的jar包已经按照统一的规范存放到了Maven的中央仓库中。

						问题：一个jar包依赖的其他jar包可能没导入到项目而导致项目跑不起来。
						优点四：Maven会自动将你要加入到项目中的jar包导入，不仅导入，而且还会将该jar包所依赖的jar包都自动导入进来。

	      ssm：3大框架；

	        SpringMVC：
			1.客户端发送请求到DispacherServlet（分发器）；
			2.由DispacherServlet控制器查询HanderMapping，找到处理请求的Controller；
			3.Controller调用业务逻辑处理后，返回ModelAndView；
			4.DispacherSerclet查询视图解析器，找到ModelAndView指定的视图；
			5.视图负责将结果显示到客户端；

			Spring：我们平时开发接触最多的估计就是IOC容器，它可以装载bean（也就是我们Java中的类，当然也包括service dao里面的），有了这个机制，我们就不用在每次使用这个类的时候为它初始化，很少看到关键字new。另外spring的aop，事务管理等等都是我们经常用到的。

			Mybatis：mybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。


	      restful uri：
						    --REST：representational State Transfer，英语的直译就是“表现层状态转移”。

							--什么是RESTful：用URL（统一资源定位符）定位资源，用HTTP动词（GET,POST,PUT,DELETE)描述操作。
								 RESTful API就是一套协议来规范多种形式的前端和同一个后台的交互方式。
								 它由服务器来提供、前端来调用的。前端调用API向后台发起HTTP请求，后台响应请求将处理结果反馈给前端。
								 也就是说RESTful 是典型的基于HTTP的协议。由一个URL与之对应可以通过HTTP中的GET方法得到资源，这就是典型的RESTful风格。

							 --这种风格的接口有什么好处呢？
							 	前后端分离。
							 	前端拿到数据只负责展示和渲染，不对数据做任何处理。
							 	后端处理数据并以JSON格式传输出去，定义这样一套统一的接口，在web，ios，android三端都可以用相同的接口；

							 --什么是REST？
								可以总结为一句话：REST是所有Web应用都应该遵守的架构设计指导原则。

								主要原则如下：

								1. C/S模型,通过统一接口通讯
								2. 层次化,可与多个服务器通讯
								3. 无状态,服务器不保存客户状态,发送请求时需包含足够信息
								4. Cache,C/S之间可使用缓存
								5. 唯一资源标识来标识资源
								6. 传递消息的自身描述
								7. 返回资源的自身描述
								8. 可选的超媒体即应用状态引擎（HATEOAS） 

								面向资源是REST最明显的特征，对于同一个资源的一组不同的操作。资源是服务器上一个可命名的抽象概念，资源是以名词为核心来组织的，首先关注的是名词。REST要求，必须通过统一的接口来对资源执行各种操作。对于每个资源只能执行一组有限的操作。（7个HTTP方法：GET/POST/PUT/DELETE/PATCH/HEAD/OPTIONS）

								什么是RESTful API？
								符合REST架构设计的API，是一种设计风格。

								总结
								符合REST设计标准的API，即Restful API。REST架构设计，遵循的各项标准和准则，就是HTTP协议的表现，换句话说，HTTP协议就是属于REST架构的设计模式。比如，无状态，请求-响应。。。,即HTTP API是Restful API的实现和表现，Restful API是HTTP API的基础，提供了标准接口。

								优点：
								基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。


	      pagehelper：分页插件；

	      bootstrap：前端框架；

	      jquery：
	     				 jQuery的具体作用：
										1 、取得页面中的元素。如果不使用JavaScript 库，遍历DOM （Document Object Model ，文档对象模型）树，以及查找HTML 文档结构中某个特殊的部分，必须编写很多行代码。jQuery 为准确地获取需要检查或操纵的文档元素，提供了可靠而富有效率的选择符机制。
										2 、修改页面的外观。CSS 虽然为影响文档呈现的方式提供了一种强大的手段，但当所有浏览器不完全支持相同的标准时，单纯使用CSS 就会显得力不从心。 jQuery 可以弥补这一不足，它提供了跨浏览器的标准解决方案。而且，即使在页面已经呈现之后，jQuery 仍然能够改变文档中某个部分的类或者个别的 样式属性。
										3 、改变页面的内容。jQuery 能够影响的范围并不局限于简单的外观变化，使用少量的代码，jQuery 就能改变文档的内容。可以改变文本、插入或翻转图像、对列表重新排序，甚至，对HTML 文档的整个结构都能重写和扩充——所有这些只需一个简单易用的API 。
										4 、响应用户的页面操作。即使是最强大和最精心设计的行为，如果我们无法控制它何时发生，那它也毫无用处。jQuery 提供了截取形形色色的页面事件 （比如用户单击一个链接）的适当方式，而不需要使用事件处理程序搞乱HTML代码。此外，它的事件处理API 也消除了经常困扰Web 开发人员的浏览器不一 致性。
										5 、为页面添加动态效果。为了实现某种交互式行为，设计者也必须向用户提供视觉上的反馈。jQuery 中内置的一批淡入、擦除之类的效果，以及制作新效果的工具包，为此提供了便利。
										6 、无需刷新页面即可从服务器获取信息。这种编程模式就是众所周知的AJAX （Asynchronous JavaScript and XML ，异步JavaScript 和XML ），它能辅助Web 开发人员创建出反应灵敏、功能丰富的网站。jQuery 通过消除这一过程中的浏览器特定的复 杂性，使开发人员得以专注于服务器端的功能设计。
										7.封装了ajax，调用jQuery可以直接使用ajax。

	      ajax：
	      			直白一点：ajax是使用js代码动态从服务器拿数据。
	      			根本原理：在不刷新页面的情况下访问服务器处理数据，并根据数据的处理结果按照既定的方式对页面需要更新部分作出即时更改。实现页面与服务器之间数据的异步交互；
	      			具体流程：AJAX发出请求-->服务器接受请求，处理请求并将处理结果返回-->AJAX收到结果，按照你设定的方式解析结果并更改页面内容。


难点：
如何解决：

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
社区问答系统：【熟悉ssm框架的使用】
1.ssm框架搭建
2.jQuery实现页面的局部刷新。

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
点餐系统：

概括：针对餐厅管理员而开发的一个点餐系统后台管理；
功能：完成菜系、菜品以及餐桌的增删改查操作；
技术要点：
		  1使用MySQL建立数据库；【MySQL】
		  2连接数据库时使用JDBC的事务管理操作；【JDBC】
		  3采用c3p0数据库连接池获取数据库连接，【c3p0】
		  4设计单例模式来封装获取的数据库连接；【单例模式】
		  5使用Threadlocal维护获取到的connection实例；【Threadlocal】
		  6项目基于MVC三层模式，分离控制器、模型和视图，来实现应用程序的分层开发；【mvc】

		  JDBC：
		  			简单地说，JDBC 可做三件事：与数据库建立连接、发送 SQL 语句并处理返回结果。
		  			JDBC优缺点：
										1）优点：简单易学,上手快,非常灵活构建SQL，效率高。
										2）缺点：代码繁琐，难以写出高质量的代码（例如：资源的释放，SQL注入安全性等）开发者既要写业务逻辑，又要写对象的创建和销毁，必须管底层具体数据库的语法（例如：分页）。
										3）适合于超大批量数据的操作，速度快 。
										jdbc的主要工作原理：
										         1、加载驱动程序  Class.forName(driver)；JDBC只定义接口，具体实现由各个数据库厂商负责。程序员使用时只需要调用接口，实际调用的是底层数据库厂商的实现部分
										         2、获取数据库连接，getconnection()调用driver的connect（）方法 返回一个实现了Connection接口的对象
										         3、创建语句对象，利用connection创建的statement执行sql语句。
										                   Statement   PreparedStatement  CallableStatement
										         4、提交执行语句对象获取返回的结果集
										         5、遍历访问结果集
										         6、关闭

						jdbc事务管理：在service层进行业务逻辑的编写，使用jdbc事务管理机制，首先禁止connection进行事务的自动提交，等到所有操作都执行完在手动提交。如果在这个过程中发生意外，那么所有操作都会回滚到原来状态。

						过程：首先用JDBCUtil获取connection，然后把connection封装到ThreadLocal中。

		  c3p0：
					  数据库连接池技术带来的优势： 
						　　1、资源复用
						　　　　由于数据库连接得到重用，避免了频繁创建、释放连接引起的大量性能开销。在减少系统　　消耗的基础上，另一方面也增进了系统运行环境的平稳性（减少内存碎片以及数据库临时进程/线程的数量）。
						　　2、更快的系统响应速度
						　　　　数据库连接池在初始化过程中，往往已经创建了若干数据库连接至于池中备用。此时连接　　的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接　　初始化和释放过程的时间，从而缩减了系统整体响应时间。
						　　3、统一的连接管理，避免数据库连接泄漏
						　　　　在较为完备的数据库连接池实现中，可根据预先的连接占用超时设定，强制收回被占用连接。从而避免了常规数据库连接操作中可能出现的资源泄漏。
							  4、里面有什么？

		  单例模式：
						  数据库链接用单例模式的原因：
							1，单例只保留一个对象，可以减少系统资源开销。
							2，提高创建速度，每次都获取已经存在的对象，因此提高创建全局共享对象速度。
							3，单例在系统中只存在一个对象实例，因此任何地方使用此对象都是一个对象避免多实例创建使用时产生的逻辑错误。
							例模式是一种常用的软件设计模式，它的核心结构只包含一个被称为单例的特殊类。它的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。单例模式有3种实现方式：懒汉式、饿汉式和双重锁的形式。
							一、 懒汉式
							构造函数声明为private或者protect防止被外部函数实例化，内部保存一个private static的类指针保存唯一的实例，实例的动作有一个public的类方法实现。
							二、 饿汉式
							在GetInstance函数里定义一个静态的实例，可以保证拥有唯一的实例，在返回是需要返回其指针即可。
							三、双重锁
							在GetInstance函数里定义一个静态的实例，可以保证拥有唯一的实例，在返回是需要返回其指针即可。


							//饿汉式
							public class Singleton{
								private Singleton(){

								}
								private static Singleton singleton=new Singleton();
								public static Singleton getInstance(){
									return singleton;
								}
							}

							//懒汉式
							public class Singleton{
								private Singleton(){

								}
								private static Singleton singleton;
								public static Singleton getInstance(){
									if(singleton==null)
										instance=new Singleton();
									 return singleton;
								}
							}


							//静态内部类
							public class Singleton{
								private Singleton(){

								}

								private static class SingletonH{
									private static final Singleton singleton=new Singleton();
								}
								public static final Singleton getInstance(){
									return SingletonH.singleton;
								}
							}




							//双检锁
							public class Singleton{
								private Singleton(){

								}
								private volatile static Singleton singleton;
								public static Singleton getInstance(){
									if(instance==null){
										synchronized(Singleton.class){
											if (instance==null) {
												singleton= new Singleton();
											}
										}
									}
									return singleton;
								}
							}


		  ThreadLocal的作用：

				---ThreadLocal是用来维护本地线程的变量，并不能解决共享变量的并发问题。
					ThreadLocal是各线程将值存入该线程的map中，以ThreadLocal自身作为key，需要用时获得的是该线程之前存入的值。如果存入的是共享变量，那取出的也是共享变量，并发问题还是存在的。

				---ThreadLocal和多线程并发没有什么关系！
					ThreadLocal模式是为了解决 单线程内的 跨类跨方法 调用的。ThreadLocal不是用来解决对象共享访问问题的，而主要是提供了 保持对象方法 和 便于参数传递 的对象访问方式。一般情况下，通过ThreadLocal.set() 到线程中的对象是该线程自己使用的对象，其他线程是不需要访问的，也访问不到的。各个线程中访问的是不同的对象。

				
						  						

		  MVC：
					  MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。
						Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。
						View（视图） - 视图代表模型包含的数据的可视化。
						Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。

						MVC要实现的目标是将软件用户界面和业务逻辑分离以使代码可扩展性、可复用性、可维护性、灵活性加强。




			此外，对分页工具类的封装：
					1）首先写一个Paging（），包含每页数据列表，当前页，总记录，每页显示记录数，还有计算总页数；
					2）然后先设置首页=1，每页显示记录数为2，这两个参数作为方法的参数，在Dao中，查找数据库中的数据，然后封装到Paging对象上，传到servlet，在jsp页面上用el表达式和jstl调用即可。

					图片上传：
								实现web开发中的文件上传功能，需完成如下二步操作：
											在web页面中添加上传输入项；
											在servlet中读取上传文件的数据，并保存到本地硬盘中。
								涉及到2个API：
								其中，必须把form的enctype属性值设为multipart/form-data。
														DiskFileItemFactory类：是创建FileItem对象的工厂。
														常用方法有设置缓冲区大小，指定临时文件目录。
														ServletFileUpload类：负责处理上传的文件数据，将表单中的输入项封装成FileItem对象。

														FileItem接口：
								上传文件的实现步骤： 
								1、创建DiskFileItemFactory对象，设置缓冲区大小和临时文件目录。 
								2、使用DiskFileItemFactory 对象创建ServletFileUpload对象，并设置上传文件的大小限制。 
								3、调用ServletFileUpload.parseRequest方法解析request对象，得到一个保存了所有上传内容的List对象。 
								4、对list进行迭代，每迭代一个FileItem对象，调用其isFormField方法判断是否是上传文件： 
								4.1、 为普通表单字段，则调用getFieldName、getString方法得到字段名和字段值。 
								4.2、为上传文件，则调用getInputStream方法得到数据输入流，从而读取上传数据。


         

难点：中文乱码；
如何解决：
				（1）准备知识
				  凡是会出现乱码的地方都是由于编码的问题产生的，页面默认编码为ISO-8859-1，简体中文编码为GB2312，中文汉字集（简体与   繁体）编码为GBK，国际编码为UTF-8。由于UTF-8编码支持的语言类型最广，所以在这里建议凡是用到字符编码的地方都使用       UTF-8格式。接下来看看所有可能出现乱码场景的解决方案。
				  （2）页面显示乱码
				  html页面：
				  jsp页面：
				  （3）客户端和服务器端传输乱码
				  tomcat配置
				  Request请求
				  Response响应
				  struts.xml
				  Filter（拦截器）
				  （4）数据库插入乱码：
				  安装
				  创建数据库
				  创建表
				  数据库连接（mysql）
---------------------------------------------------------------------------------------------------------------------------------------------------------

教育产业创新公共服务平台：

概述：小组项目；
职责：系统数据库的开发【都是单表，表间无外键连接】；
细节：利用Powerdesigner先画出概念模型，然后转换成物理模型，最后生成SQL语句；



----------------------------------------------------------------------------------------------------------------------------------------------------

课程管理系统：

概述：课程管理系统主要针对学生和老师而开发的，提高了学校的工作效率；

功能：1.学生查询可选课程、已选课程、已修课程、选课、退课操作；
		  2.教师可以查询自己讲授的课程，并且给学生进行打分；
		  3.管理员管理课程信息、学生信息、教师信息，修改学生和教师的账号密码；

技术要点：1.mysql建立数据库；
				2.maven导包，ssm框架建立开发的架构；
				3.使用shiro进行权限控制；【shiro】
				4前端调用了bootstrap进行页面的编写；


				shiro：一个开源的权限管理框架，主要实现用户认证、用户授权。



------------------------------------------------------------------------------------------------------------------------------------------------------


1.你好，我叫xxx，是广东财经大学的一名大四学生，专业是计算机科学与技术；
2.学校期间，我学习过Java程序设计、数据结构、算法、数据库、计算机网络、操作系统这些基础知识，学习方向是Java后端开发；
3.课余时间，有自学过一些前端开发、JavaWeb开发、ssm框架开发；
4.然后自己有结合到学到的东西，做过一些管理系统，比如说信息管理系统、点餐系统之类的；
5.今天来，是想面试Java开发工程师这个岗位，谢谢！




阐述你应聘该岗位的优势：
本人专业是计算机科学与技术，在学校学习过专业的基础课程。
在我的职业生涯规划中，决定在未来XXXxxx，因此我会努力学习，继续自我提高。
本人有着认真负责的工作态度，注重团队的通力合作，如果有幸通过面试，我将在工作中全力以赴，做到最好。




有什么想问的问题：
1.你可以对我的面试表现做一个简单的评价吗？
2.请问你们平常是怎么学习技术的？
3.对于即将走进职场的大学生，有什么可以传递的工作经验吗？
4.Java后端开发需要写前端页面吗？
5.请问面试分几轮？什么时候有通知？




复习是否有效评判的标准是闭上眼睛能否回忆出所学内容。
第一次：即刻；
第二次：当天晚上或者第二天上午；
第三次：第二天晚上；




熟悉Java语言编程，具备良好的Java基础，了解Java多线程编程技术；
熟悉常用数据结构和算法以及计算机网络知识，了解常见设计模式；
熟悉JavaWeb开发技术，了解HTML、CSS、JavaScript的基本用法；了解JUnit程序调试，SVN的使用；
熟悉MySQL等关系型数据库，能使用SQL进行数据库编程；
熟悉SSM等常用开发框架的搭建和使用，了解Maven的使用；
了解Linux基本操作和操作系统知识；










熟悉Java语言，具备扎实的Java基础，了解Java核心高级技术，有良好的编码规范以及了解设计模式
熟悉JavaWeb开发, 了解运用JUnit,Debug进行程序调试, 了解并会运用缓存
熟悉运用SSM, Spring boot框架等常用框架技术，了解一些框架实现原理
熟悉SQL语言，熟悉使用MySQL
熟悉常用的数据结构和算法以及计算机网络知识，了解linux基本操作和操作系统知识
了解Java多线程并发的原理以及使用, 以及微服务, 分布式, 消息中间件等相关原理和使用


