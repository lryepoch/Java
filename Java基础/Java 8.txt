
Optional：

·背景：解决NullPointerException（NPE）；

·创建 Optional 对象：
	
	··使用静态方法 empty() 创建一个空的 Optional 对象；
	··使用静态方法 of() 创建一个非空的 Optional 对象；
	··使用静态方法 ofNullable() 创建一个即可空又可非空的 Optional 对象：
	ofNullable()方法内部有一个三元表达式，如果为参数为null，则返回私有常量EMPTY；否则使用 new 关键字创建了一个新的 Optional 对象——不会再抛出 NPE 异常；

·判断值是否存在:
	··isPresent()判断一个Optional对象是否存在，如果存在，该方法返回true，否则返回 false；
	··Java11后还可以通过方法isEmpty()判断与isPresent()相反的结果；

·非空表达式：
	··ifPresent()：使用函数式编程的方式执行一些代码
	··Java9后还可以通过方法ifPresentOrElse(action, emptyAction)执行两种结果，非空时执行action，空时执行emptyAction。


·设置（获取）默认值：
	··orElse()方法用于返回包裹在 Optional对象中的值，如果该值不为null，则返回；否则返回默认值。该方法的参数类型和值的类型一致。
	··orElseGet()方法与orElse()方法类似，但参数类型不同。如果Optional对象中的值为 null，则执行参数中的函数。

	orElse在不论optional有没有值的时候都会执行，在optional为空值的情况下orElse和orElseGet都会执行，当optional不为空时，orElseGet不会执行。


·获取值：
	··get()方法才是最正宗的获取 Optional 对象值的方法，但很遗憾，该方法是有缺陷的，因为假如 Optional 对象的值为 null，该方法会抛出 NoSuchElementException 异常。这完全与我们使用 Optional 类的初衷相悖。
	··建议 orElseGet() 方法获取 Optional 对象的值。

·过滤值：
	··filter()方法的参数类型为 Predicate（Java 8 新增的一个函数式接口），也就是说可以将一个 Lambda 表达式传递给该方法作为条件，如果表达式的结果为 false，则返回一个 EMPTY 的 Optional 对象，否则返回过滤后的 Optional 对象。

·转换值：
	··map()方法，该方法可以按照一定的规则将原有Optional对象转换为一个新的 Optional对象，原有的Optional对象不会更改。


	