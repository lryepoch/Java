
·简介：
	synchronized是基于monitor实现的，synchronized经过编译后，会在同步块前后分别形成monitorenter和monitorexit两个字节码指令，在执行monitorenter指令时，首先要尝试获取对象锁，如果对象没有被锁定，或者当前已经拥有这个对象锁，把锁的计数器加1，相应的在执行monitorexit指令时，会将计数器减1，当计数器为0时，锁就被释放了。
	如果获取锁失败，那当前线程就要阻塞，直到对象锁被另一个线程释放为止。


·特点：
	··可重入锁；
		可重入锁实现可重入性原理或机制是：

	      每一个锁关联一个线程持有者和计数器，当计数器为 0 时表示该锁没有被任何线程持有，那么任何线程都可能获得该锁而调用相应的方法；

	      当某一线程请求成功后，JVM会记下锁的持有线程，并且将计数器置为 1；此时其它线程请求该锁，则必须等待；而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增；当线程退出同步代码块时，计数器会递减，如果计数器为 0，则释放该锁。

	··排他锁；
	··属于jvm，由jvm实现；



·synchronized保证可见性：
	JMM关于synchronized的两条规定：

	··线程解锁前，必须把共享变量的最新值刷新到主内存中；

	··线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新获取最新的值；



·JVM 对Synchronized的优化：
    锁的状态总共有四种，无锁状态、偏向锁、轻量级锁和重量级锁。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁，但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级。




· synchronized不禁止指令重排序却能保证有序性：
	synchronized是排他锁，执行前加锁，执行完后释放，保证单线程执行，
	满足as-if-serial语义，保证单线程执行，单线程有序性天然存在，
	as-if-serial语义：不管怎么重排序，单线程程序的执行结果不能被改变。