Java Web：

客户端<---（http请求与响应）--->服务器<---（传递）--->servlet容器（Tomcat，也是一种中间件）<---（根据web.xml映射）--->servlet

！关于Servlet：
		--什么是Servlet？
			Servlet是用来处理客户端请求并产生动态网页内容的Java类。Servlet主要是用来处理或者是存储HTML表单提交的数据，产生动态内容，在无状态的HTTP协议下管理状态信息。

		--servlet中的两个接口：
				--ServletConfig：获取配置信息。
					servletConfig对象：用于封装servlet的配置信息。从一个servlet被实例化后，对任何客户端在任何时候访问有效，但仅对servlet自身有效，一个servlet的ServletConfig对象不能被另一个servlet访问。

				--ServletContext：每个web应用都有唯一的一个ServletContext，可以被同一个web下的多个servlet共享数据。
					ServletContext对象：servlet容器在启动时会加载web应用，并为每个web应用创建唯一的servletContext对象，可以把ServletContext看成是一个Web应用的服务器端组件的共享内存，在ServletContext中可以存放共享数据。ServletContext对象是真正的一个全局对象，凡是web容器中的Servlet都可以访问。整个web应用只有唯一的一个ServletContext对象。


		--Servlet的生命周期：
			---在Servlet整个生命周期中是由Tomcat来维护的，当客户端第一次发起请求的时候，会根据web.xml文件中的配置实例化一个Servlet,而在以后客户端的每一次请求都会使用该实例来处理后续的工作，直到Tomcat停止该项目，这个Servlet才会被销毁，所占用的资源才会释放。

			---Servlet的生命周期一般可以用三个方法、四个阶段来表示：
				1.加载和实例化：Servlet启动，会读取配置文件中的信息，构造指定的Servlet对象，创建ServletConfig对象，将ServletConfig作为参数来调用init()方法。创建Servlet的实例是由Servlet容器来完成的，
					且创建Servlet实例是在初始化方法init()之前。
				2.初始化init()：仅执行一次，负责在装载Servlet时初始化Servlet对象；
				3.请求处理service() ：核心方法，每当有一个客户请求，容器会创建一个线程来处理客户请求；一般HttpServlet中会有get,post两种处理方式，在调用doGet和doPost方法时会构造servletRequest和servletResponse请求和响应对象作为参数；
				4.卸载destory()：仅执行一次，在停止并且卸载Servlet时执行，负责释放占用的资源。
				

		--根据JMM(Java内存模型)的设计，系统存在一个主内存，Java中所有实例变量都储存在主存中，对于所有线程都是共享的。
			每条线程都有自己的工作内存，工作内存由缓存和堆栈两部分组成，缓存中保存的是主存中变量的拷贝，缓存可能并不总和主存同步，也就是缓存中变量的修改可能没有立刻写到主存中；堆栈中保存的是线程的局部变量，线程之间无法相互直接访问堆栈中的变量。


		--如何在 Servlet 之间共享信息 ?

			我们可以通过 ServletContext 来维护在不同 Servlet 之间共享的信息 .

			如何解决 Servlet 的多 Thread 问题 ?
			如果 Servlet 需要读写外部资源 , 我们需要考虑 Thread 的问题 , 我们可以使用声明性接口 SingleThreadModel 来避免多 Thread 之间的资源冲突问题 . 但是需要注意的是 , 如果 Servlet 仅仅只是读外部资源的话 , 我们通常不应该实现这个接口 . 如果实现这个接口 ,Servlet 在同一时刻只能服务一个用户请求 , 后至的用户请求必须在队列中等待 。


		--在多线程的情况下，Servlet是线程不安全的。Servlet体系是建立在java多线程的基础之上的,它的生命周期是由Tomcat来维护的。当客户端第一次请求Servlet的时候,tomcat会根据web.xml配置文件实例化servlet，当又有一个客户端访问该servlet的时候，不会再实例化该servlet，也就是多个线程在使用这个实例。

        --Servlet是单例多线程的无需置疑；多线程存在共享实例时易发生线程不安全问题：
			---单例多线程：一个线程中只有一个实例对象，但是如果在多线程的环境中，就会出现多个实例的情况，这样就不是单例模式了，此时就容易发生线程不安全问题。
			---线程不安全问题详解：多个线程之间是不能直接传递数据交互的，它们之间的交互只能通过共享变量来实现。
				Servlet是线程不安全的，在Servlet类中可能会定义共享的类变量，这样在并发的多线程访问的情况下，不同的线程对成员变量的修改会引发错误。

		--Servlet线程安全问题:
           多线程和单线程Servlet具体区别：对局部变量而言，多线程下每个线程对局部变量都会有自己的一份copy，这样对局部变量的修改只会影响到自己的copy而不会对别的线程产生影响，线程安全的。但是对于实例变量来说，由于servlet在Tomcat中是以单例模式存在的，所有的线程共享实例变量。多个线程对共享资源的访问就造成了线程不安全问题。实例变量不正确的使用是造成Servlet线程不安全的主要原因。对于单线程而言就不存在这方面的问题(static变量除外)。

        --设计线程安全的Servlet：
        	1、实现 SingleThreadModel 接口(已被淘汰)；一个 Servlet被这个接口指定,那么在这个Servlet中的service方法将不会有两个线程被同时执行，当然也就不存在线程安全的问题。
        		不足: 
						a）SingleThreadModel接口的值与web服务器最多接收的线程数有关，可能会出现大值变小值的情况 
						b）SingleThreadModel接口如果发现某个线程正在占用该Servlet实例，会自动创建一个新的Servlet实例为浏览器服务， 这就违背了Servlet单例的原则。
			2、使用synchronized 关键字能保证一次只有一个线程可以访问被保护的区段，在本文中的Servlet可以通过同步块操作来保证线程的安全。
				不足：
				如果在程序中使用同步来保护要使用的共享的数据，也会使系统的性能大大下降。这是因为被同步的代码块在同一时刻只能有一个线程执行它，使得其同时处理客户请求的吞吐量降低，而且很多客户处于阻塞状态。另外为保证主存内容和线程的工作内存中的数据的一致性，要频繁地刷新缓存,这也会大大地影响系统的性能。所以在实际的开发中也应避免或最小化 Servlet中的同步代码；

			3、避免使用实例变量。本实例中的线程安全问题是由实例变量造成的，只要在Servlet里面的任何方法里面都不使用实例变量，那么该Servlet就是线程安全的。修正上面的Servlet代码，将实例变量改为局部变量实现同样的功能。在Servlet中避免使用实例变量是保证Servlet线程安全的最佳选择。从Java内存模型也可以知道，方法中的临时变量是在栈上分配空间，而且每个线程都有自己私有的栈空间，所以它们不会影响线程的安全。
			

		--Servlet作用域从小到大是这样排列的，page,request,session,pageContext。
				---page只是作用于当前请求的页面；
				---request是一次请求，根据HTTP无状态，所以可以知道每一次请求对象是不同的；
				---session是一次会话，比如有些网站需要登录后才能查看资源，从登录到你关闭浏览器后，这就是一次会话，session是存在服务端的。还有一种情况，有时你在一个网页上长时间没操作，再操作会让你重新登录，这也是session的问题，服务器那边设置了session失效的时间。
				---pageContext是在整个Web应用上都是有效的，可以理解为所有的网页，因为这个对象是常常用来共享资源的，也就是用户1提交了一个资源，放到了pageContext作用域中，其它用户也可以看到这个资源。



--HttpServlet容器响应Web客户请求流程如下：
      1）Web客户向Servlet容器发出Http请求；
      2）Servlet容器解析Web客户的Http请求；
      3）Servlet容器创建一个HttpRequest对象，在这个对象中封装Http请求信息；
      4）Servlet容器创建一个HttpResponse对象；

      5）Servlet容器调用HttpServlet的service方法，这个方法中会根据request的Method来判断具体是执行doGet还是doPost，把HttpRequest和HttpResponse对象作为service方法的参数传给HttpServlet对象；
      6）HttpServlet调用HttpRequest的有关方法，获取HTTP请求信息；
      7）HttpServlet调用HttpResponse的有关方法，生成响应数据；
      8）Servlet容器把HttpServlet的响应结果传给Web客户。

      doGet( ) 或者 doPost( ) 是创建HttpServlet时需要覆盖的方法.



--request中参数（parameter）和属性（Attribute）的区别？
		区别： 
		---来源不同：   
				参数（parameter）是从客户端（浏览器）中由用户提供的，若是GET方法是从URL中提供的，若是POST方法是从请求体（request body）中提供的； 
				属性（attribute）是服务器端的组件（JSP或者Servlet）利用requst.setAttribute（）设置的；
		---操作不同：   
				参数（parameter）的值只能读取不能修改，读取可以使用request.getParameter()读取； 
	    		属性（attribute）的值既可以读取亦可以修改，读取可以使用request.getAttribute(),设置可使用request.setAttribute()
		---数据类型不同：
				参数（parameter）不管前台传来的值语义是什么，在服务器获取时都以String类型看待，并且客户端的参数值只能是简单类型的值，不能是复杂类型，比如一个对象
				属性（attribute）的值可以是任意一个Object类型。 
		共同点：二者的值都被封装在request对象中。

		getParameter()是获取POST/GET传递的参数值；
		getInitParameter获取Tomcat的server.xml中设置Context的初始化参数
		getAttribute()是获取对象容器中的数据值；
		getRequestDispatcher是请求转发。 
		request.getAttribute()方法返回request范围内存在的对象，而request.getParameter()方法是获取http提交过来的数据。getAttribute是返回对象,getParameter返回字符串。

		下面的方法可用在 Servlet 程序中读取 HTTP 头。这些方法通过 HttpServletRequest 对象可用：

		1）Cookie[] getCookies( )
		返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。

		2）Object getAttribute(String name)
		以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。

		3）String getHeader(String name)
		以字符串形式返回指定的请求头的值。Cookie也是头的一种；

		4）String getParameter(String name)
		以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。

		


--请求转发：通过forward（）将当前请求传递给其他的web资源进行处理。
	 请求包含：返回的响应信息中，既包含当前servlet的响应信息，又包含其他web资源作出的响应信息。



--Cookie：会话数据保存在浏览器端的技术。Cookie[ ] cookies = request.getCookies（）；
	 Session：将会话数据保存到服务器端的技术。HttpSession session = request.getSession（）；
	 Session在用户登录，一些特殊场合在页面间传递数据的时候会经常用到。
	 二者结合：甲访问购物网站---服务器创建一个session（购物车）---将一台手机放到session中---服务器以cookie形式向浏
	                  览器发送session的id---完成购物要结账时，浏览器将cookie信息回送给服务器---服务器根据id找到对应的session
	                  ---结算。

	 Session长驻在服务器内存里，session有id标识，一个session专供一个用户使用。
	request只能存在于一次访问里，为了让每次访问区分开是哪个用户，所以request中会带上session的id标识，就是每个request都会属于一个session，一个session能为很多次request服务。类
	似于数据库的多对一关系。所以request.getSession的本质是使用request中的session id去找到这个用户对应的session。


	会话跟踪是一种灵活、轻便的机制，它使Web上的状态编程变为可能。
	HTTP是一种无状态协议，每当用户发出请求时，服务器就会做出响应，客户端与服务器之间的联系是离散的、非连续的。当用户在同一网站的多个页面之间转换时，根本无法确定是否是同一个客户，会话跟踪技术就可以解决这个问题。
	当一个客户在多个页面间切换时，服务器会保存该用户的信息。

	有四种方法可以实现会话跟踪技术：隐藏表单域、URL重写、Cookie、Session。

			1）.隐藏表单域：<input type="hidden">，非常适合不需要大量数据存储的会话应用。
			2）.URL 重写:URL 可以在后面附加参数，和服务器的请求一起发送，这些参数为名字/值对。

			3）.Cookie:一个Cookie是一个小的，已命名数据元素。服务器使用SET-Cookie头标将它作为HTTP响应的一部分传送到客户端，客户端被请求保存Cookie值，在对同一服务器的后续请求使用一个Cookie头标将之返回到服务器。与其它技术比较，Cookie 的一个优点是在浏览器会话结束后，甚至在客户端计算机重启后它仍可以保留其值；
			4）.Session：使用 setAttribute(String str,Object obj)方法将对象捆绑到一个会话。


	Session和Cookie的区别：
		---无论客户端浏览器做怎么样的设置，session都应该能正常工作。客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session。
		---在存储的数据量方面session和cookies也是不一样的。session能够存储任意的Java对象，cookie只能存储String类型的对象。

		1.session用来表示用户会话，session对象在服务端维护，一般tomcat设定session生命周期为30分钟，超时将失效，也可以主动设置无效； 

		2.cookie存放在客户端，可以分为内存cookie和磁盘cookie。内存cookie在浏览器关闭后消失，磁盘cookie超时后消失。当浏览器发送请求时，将自动发送对应cookie信息，前提是请求url满足cookie路径； 

		3.可以将sessionId存放在cookie中，也可以通过重写url将sessionId拼接在url。因此可以查看浏览器cookie或地址栏url看到sessionId； 

		4.请求到服务端时，将根据请求中的sessionId查找session，如果可以获取到则返回，否则返回null或者返回新构建的session，老的session依旧存在，请参考API。 




--关于JSP：建立在servlet规范之上的动态网页开发技术；html和Java代码可以共存。

	什么是JSP页面？
	JSP页面是一种包含了静态数据和JSP元素两种类型的文本的文本文档。
	静态数据可以用任何基于文本的格式来表示，比如：HTML或者XML。JSP是一种混合了静态内容和动态产生的内容的技术。

	 jsp转换过程：jsp---.Java文件---.class文件---servlet实例。

	 jsp脚本元素3种类型：JSP Scriptlets（<%……%>）；jsp声明语句（<%!……%>）；jsp表达式（<%=……  %>）。

	 out对象写入数据就是将数据插入到jspWriter对象的缓冲区中，还要调用response.getWriter（）才能输出。

	 ---使用JSP的优点：
		JSP页面是被动态编译成Servlet的，因此，开发者可以很容易的更新展现代码。
		JSP页面可以被预编译。
		JSP页面可以很容易的和静态模板结合，包括：HTML或者XML，也可以很容易的和产生动态内容的代码结合起来。
		开发者可以提供让页面设计者以类XML格式来访问的自定义的JSP标签库。
		开发者可以在组件层做逻辑上的改变，而不需要编辑单独使用了应用层逻辑的页面。

	---JSP 四大作用域： page (作用范围最小)、request、session、application（作用范围最大）。
		存储在application对象中的属性可以被同一个WEB应用程序中的所有Servlet和JSP页面访问。（属性作用范围最大）
		存储在session对象中的属性可以被属于同一个会话（浏览器打开直到关闭称为一次会话，且在此期间会话不失效）的所有Servlet和JSP页面访问。
		存储在request对象中的属性可以被属于同一个请求的所有Servlet和JSP页面访问（在有转发的情况下可以跨页面获取属性值），例如使用PageContext.forward和PageContext.请求包含include方法连接起来的多个Servlet和JSP页面。
		存储在pageContext对象中的属性仅可以被当前JSP页面的当前响应过程中调用的各个组件访问，例如，正在响应当前请求的JSP页面和它调用的各个自定义标签类。

	 ---JSP的隐式对象pageContext：
		 使用隐式对象pageContext（页面容器）可以获取jsp其他8个隐式对象：pageContext.getXXX（）；
		 pageContext（页面容器）还有存储数据的功能；可以指定作用的范围：page（格式：pageContext.PAGE_SCOPE）、request、session、application。


	---当isErrorPage ="false"时，用errorPage="error.jsp"(isErrorPage默认是false)
   		 当isErrorPage ="true"时,页面会直接使用exception.


   	---JSP中的include：
		    ---静态的include：是jsp的指令来实现的，<% @ include file="xx.html"%>特点是共享request请求域，先包含再编译，不检查包含页面的变化。静态的include不允许变量同名；
			静态include用 include 伪码实现 , 定不会检查所含文件的变化 , 适用于包含静态页面 <%@ include file="included.htm" %> 。先将文件的代码被原封不动地加入到了主页面从而合成一个文件，然后再进行翻译，此时不允许有相同的变量。 

			---动态的include：是jsp动作来实现的，<jsp:include page="xx.jsp" flush="true"/>  这个是不共享request请求域，先编译在包含，是要检查包含页面的变化的。
			动态include用 jsp:include 动作实现 <jsp:include page="included.jsp" flush="true" /> 它总是会检查所含文件中的变化 , 适合用于包含动态页面 , 并且可以带参数。各个文件分别先编译，然后组合成一个文件。

			以下是对 include 两种用法的区别 ， 主要有两个方面的不同 ;
			    一 : 执行时间上 :
			    <%@ include file="relativeURI"%> 是在翻译阶段执行
			    <jsp:include page="relativeURI" flush="true" /> 在请求处理阶段执行 .
			    二 : 引入内容的不同 :
			    <%@ include file="relativeURI"%>
			    引入静态文本 (html,jsp), 在 JSP 页面被转化成 servlet 之前和它融和到一起 .
			    <jsp:include page="relativeURI" flush="true" /> 引入执行页面或 servlet 所生成的应答文本 .


--隐式对象：
    ---EL表达式隐式对象：11个。pageContext可以获取其他10隐式对象。
	---Servlet与JSP九大内置对象的关系：
		JSP对象是怎样获得？
		out->response.getWriter
		request ->Service方法中的req参数
		response ->Service方法中的resp参数
		session ->request.getSession
		application ->getServletContext
		exception ->Throwable
		page  ->this
		pageContext  ->PageContext
		Config ->getServletConfig


--web领域相关对象：PageContext、HttpserveltRequest、HttpSession、ServletContext。
		特点：可以存储数据，内部定义了一个map集合，称为域。
		EL表达式为了获取域中数据，可以使用pageScope、requestScope、sessionScope、applicationScope这4个隐式对象。





--RESTful API：
						    --REST：representational State Transfer，英语的直译就是“表现层状态转移”。

							--什么是RESTful：用URL（统一资源定位符）定位资源，用HTTP动词（GET,POST,PUT,DELETE)描述操作。
								 RESTful API就是一套协议来规范多种形式的前端和同一个后台的交互方式。
								 它由服务器来提供、前端来调用的。前端调用API向后台发起HTTP请求，后台响应请求将处理结果反馈给前端。
								 也就是说RESTful 是典型的基于HTTP的协议。由一个URL与之对应可以通过HTTP中的GET方法得到资源，这就是典型的RESTful风格。

							 --这种风格的接口有什么好处呢？
							 	前后端分离。
							 	前端拿到数据只负责展示和渲染，不对数据做任何处理。
							 	后端处理数据并以JSON格式传输出去，定义这样一套统一的接口，在web，ios，android三端都可以用相同的接口；

							 --什么是REST？
								可以总结为一句话：REST是所有Web应用都应该遵守的架构设计指导原则。

								主要原则如下：

								1. C/S模型,通过统一接口通讯
								2. 层次化,可与多个服务器通讯
								3. 无状态,服务器不保存客户状态,发送请求时需包含足够信息
								4. Cache,C/S之间可使用缓存
								5. 唯一资源标识来标识资源
								6. 传递消息的自身描述
								7. 返回资源的自身描述
								8. 可选的超媒体即应用状态引擎（HATEOAS） 

								面向资源是REST最明显的特征，对于同一个资源的一组不同的操作。资源是服务器上一个可命名的抽象概念，资源是以名词为核心来组织的，首先关注的是名词。REST要求，必须通过统一的接口来对资源执行各种操作。对于每个资源只能执行一组有限的操作。（7个HTTP方法：GET/POST/PUT/DELETE/PATCH/HEAD/OPTIONS）

								什么是RESTful API？
								符合REST架构设计的API，是一种设计风格。

								总结
								符合REST设计标准的API，即Restful API。REST架构设计，遵循的各项标准和准则，就是HTTP协议的表现，换句话说，HTTP协议就是属于REST架构的设计模式。比如，无状态，请求-响应。。。,即HTTP API是Restful API的实现和表现，Restful API是HTTP API的基础，提供了标准接口。

								优点：
								基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。



--转发forward和重定向redirect区别：

	1.从地址栏显示来说 
	forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器，	浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址。
	redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL。

	2.从数据共享来说 
	forward:转发页面和转发到的页面可以共享request里面的数据.
	redirect:不能共享数据.

	3.从运用地方来说 
	forward:一般用于用户登陆的时候,根据角色转发到相应的模块.
	redirect:一般用于用户注销登陆时，返回主页面和跳转到其它的网站等.

	4.从效率来说 
	forward:高.
	redirect:低.

	本质区别：
					解释一　　
					一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程：

					转发过程：客户浏览器发送http请求----》web服务器接受此请求--》调用内部的一个方法在容器内部完成请求处理和转发动作----》将目标资源 
					发送给客户；在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。
					在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。 

					重定向过程：客户浏览器发送http请求----》web服务器接受后发送302状态码响应及对应新的location给客户浏览器--》客户浏览器发现 是302响
					应，则自动再发送一个新的http请求，请求url是新的location地址----》服务器根据此请求寻找资源并发送给客户。在这里 location可以重定向到
					任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的 路径，客户可以观察到地
					址的变化的。重定向行为是浏览器做了至少两次的访问请求的。 

					解释二 
					重定向，其实是两次request, 第一次，客户端request A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，
					而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。



--JSTL标签：
	---<c:forEach> 标签的varStatus属性和var 属性的区别：

		我们一般用<c:forEach> 来遍历需要的数据，为了方便使用，varStatus属性可以方便我们实现一些与行数相关的功能，varStatus 是循环索引。
		如：奇数行、偶数行差异；最后一行特殊处理等等。
		先就varStatus属性常用参数总结下：

		${status.index} 输出行号，从0开始。
		${status.count} 输出行号，从1开始。
		${status.current} 当前这次迭代的（集合中的）项
		${status.first} 判断当前项是否为集合中的第一项，返回值为true或false
		${status.last} 判断当前项是否为集合中的最后一项，返回值为true或false
		begin、end、step分别表示：起始序号，结束序号，跳跃步伐。

		而var 是你要循环集合的别名。




--实现多系统应用群的登录：
		---单点登录（Single Sign On(SSO)在多系统应用群中，用户只需要登录一次就可以访问所有相互信任的应用系统）。
		---单点登录的过程实质上是sso客户端与服务端通信的过程。方式有多种：httpclient、web service、rpc、restful api。
		授权令牌是一串随机的字符串。UUID.randomUUID（）.toString（）；
		---java拦截请求的方式有servlet、filter、listener三种方式。

		


--其他：

---web.xml加载顺序: listener -> filter -> servlet；

---jsp跳转到servlet的时候，路径设置为/项目名/Servlet名。Servlet中dispatcher跳转到jsp页面时，也要写上/文件夹名/jsp文件名。
		
---monthIn=Integer.parseInt(args[0]);//这里的Integer.parseInt(args[0])是什么意思？

	Integer.parseInt(String)就是将String字符类型数据转换为Integer整型数据，args[0]就是输入参数中的第一个参数字符串。
	Integer.parseInt(String)遇到一些不能被转换为整型的字符时，会抛出异常。


---web静态资源：html。
				缺点：内容无法动态更新；无法连接数据库，不能与用户进行交互。

	动态资源：Microsoft ASP【已淘汰】、ASP.NET【升级版，性能有所改善，但受限于平台，c#开发】
				PHP【跨平台、代码简单】
				JAVA Servlet/JSP【基于Java】


---关于request.getServletContext().getRealPath("")和request.getServletContext().getRealPath("/")，很早以前就遇到了。但是一直没有不晓得区别，刚过测试了下,request.getServletContext().getRealPath("/")获取到的是当前绝		对项目路径并且最后有/号结尾。而那个""就是最后没有/号结尾的。但是经过我的测试后，发现还是有的。



---乱码：
	开始项目前，必须统一编码格式为utf-8。
	所以乱码的本质就是：读取二进制的时候采用的编码和最初将字符转换成二进制时的编码不一致。
	ps：编码有动词含义也有名词含义，名词含义就是一套字符和二进制序列之间的转换规则，动词含义是使用这种规则将字符转换成二进制序列。
	因为UTF-8和GBK是两套中文支持较好的编码，所以经常会进行它们之间的转换。




