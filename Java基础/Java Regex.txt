
·正则表达式定义了字符串的模式。
	正则表达式可以用来搜索、编辑或处理文本。


·从JDK1.4开始提供了支持正则表达式API。java.util.regex 包主要包括以下三个类：

		··Pattern类：
			pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。

			切割：String split()方法;            #根据给定正则表达式的匹配拆分此字符串。返回一个字符串数组。

			获取：将字符串中的符合规则的子串取出。
						操作步骤：
				　　　　1，将正则表达式封装成对象。											Pattern p = Pattern.compile(regex);
				　　　　2，让正则对象和要操作的字符串相关联。								Matcher m  = p.matcher(str);
				　　　　3，关联后，获取正则匹配引擎。
				　　　　4，通过引擎对符合规则的子串进行操作，比如取出。					m.matches()：全部匹配，是将整个输入串与模式匹配，如果要验证一个输入的数据是否为数字类型或其他类型，一般要用matches()；
																					m.find()：部分匹配，是查找输入串中与模式匹配的子串，如果该匹配的串有组还可以使用group()函数；
																					结论：当正则完全匹配字符串，从头到尾正好匹配上字符串，matches()方法是true，find()方法为false；
      																					  当正则只能匹配字符串中的部分内容，matches()方法是fasle ，find()方法是true；

																					m.group()：只能获取一个匹配后的结果，所以需要遍历。
																					group是针对（）来说的，group（0）就是指的整个串，group（1） 指的是第一个括号里的东西，group（2）指的第二个括号里的东西。

			 OR boolean isMatch = Pattern.matches(regex, str);

		··Matcher类：
			Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。

			匹配：String  matches（） 		#用规则匹配整个字符串，只要有一处不符合规则，就匹配结束，返回false。
				  							其实，String类中的matches方法。用的就是Pattern和Matcher对象来完成的。	只不过被String的方法封装后，用起来较为简单。但是功能却单一。

			替换：String replaceAll(regex,str)方法          #使用给定的replacement替换此字符串所有匹配给定的正则表达式的子字符串。
						replaceFirst 替换首次匹配；


		··PatternSyntaxException：
			PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。



·符号意思：
	.（点号）：它匹配任何一个字符(除了\n外)
	()：组
	[]：或
	{}：范围




·捕获组：
	··把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。
	··通过从左至右计算其开括号来编号。
	··通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。
			一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。




·关于\：
		在其他语言中，\\ 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。
		在 Java 中，\\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。

		所以，在其他的语言中（如Perl），一个反斜杠 \ 就足以具有转义的作用，而在 Java 正则表达式中，则需要有两个反斜杠才能被解析为其他语言中的转义作用。
		也可以简单的理解在 Java 的正则表达式中，两个 \\ 代表其他语言中的一个 \，这也就是为什么表示一位数字的正则表达式是 \\d，而表示一个普通的反斜杠是 \\\\，一个*普通的反斜杠是 \\\*。





·正则表达式的贪婪和非贪婪匹配：
	··什么是正则表达式的贪婪【非懒惰模式】与非贪婪【懒惰模式】匹配

		如：
		(1)String str="abcaxc";

			Patter p="ab*c";

			贪婪匹配：正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。如上面使用模式p匹配字符串str，结果就是匹配到：abcaxc

			非贪婪匹配：就是匹配到结果就好，就少的匹配字符。如上面使用模式p匹配字符串str，结果就是匹配到：abc

		(2)<img src="test.jpg" width="60px" height="80px"/>
			非懒惰模式匹配src内容，即：src=".*"
			匹配结果：src="test.jpg" width="60px" height="80px"
				意思是从="往后匹配，直到最后一个"匹配结束。

			懒惰模式即后边多加一个?表示，必须跟在*或者+后边用：src=".*?"
			匹配结果：src="test.jpg"
				因为匹配到第一个"就结束了一次匹配，不会继续向后匹配，因为他懒惰嘛。



	··编程中如何区分两种模式

		默认是贪婪模式；在量词后面直接加上一个问号？就是非贪婪模式。

		量词：{m,n}：m到n个

		*：0个或者多个

		+：1个或者多个

		？：0或一个



