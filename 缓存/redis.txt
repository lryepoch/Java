
·NoSQL：基于内存的数据库，并且提供一定的持久化功能；


·Redis技术：
	··它的性能十分优越，可以支持每秒十几万级别的读/写操作，其性能远超数据库；
	··支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中；
	··还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。



·应用场景：
	··Redis能够做什么；
		1.缓存；
		2.排行榜；
		3.计数器；
		4.好友关系；
		5.简单消息队列（订阅发布、阻塞队列）；
		6.Session服务器；

	··Redis不能做什么；
		1.数据量太大不适合；
		2.数据访问频率太低不适合；




·使用Redis进行存储的时候，我们需要从以下几个方面来考虑：
	··业务数据常用吗？命中率如何？如果命中率很低，就没有必要写入缓存；
	··该业务数据是读操作多，还是写操作多？如果写操作多，频繁需要写入数据库，也没有必要使用缓存；
	··业务数据大小如何？如果要存储几百兆字节的文件，会给缓存带来很大的压力，这样也没有必要；


·Redis来应对这样的高并发需求的场合，阐述这个过程：
	··当一个请求到达服务器时，只是把业务数据在 Redis 上进行读写，而没有对数据库进行任何的操作，这样就能大大提高读写的速度，从而满足高速响应的需求；
	··但是这些缓存的数据仍然需要持久化，也就是存入数据库之中，所以在一个请求操作完Redis的读/写之后，会去判断该高速读/写的业务是否结束，这个判断通常会在秒杀商品为0，红包金额为0时成立，如果不成立，则不会操作数据库；如果成立，则触发事件将Redis缓存的数据以批量的形式一次性写入数据库，从而完成持久化的工作。




·redis与Java的配合：
	1.在常见命令中，使用各种Redis自带客户端的命令行方式访问Redis服务。而使用Java代码访问，使用第三方jar包：Jedis，就能方便地访问Redis的各种服务了。

	2.在Java中我们却通常以类对象为主，所以在需要Redis存储的五种数据类型与Java对象之间进行转换，如果自己编写一些工具类，比如一个角色对象的转换，还是比较容易的，但是涉及到许多对象的时候，这其中无论工作量还是工作难度都是很大的，Redis无法操作对象的问题，无法在那些基础类型和Java对象之间方便的转换；

	3.但是在Spring中，这些问题都可以通过使用RedisTemplate得到解决！除了Jedis包以外还需要在 Spring 引入spring-data-redis包；

	4.配置RedisTemplate时，普通的连接根本没有办法直接将对象直接存入Redis内存中，我们需要替代的方案：将对象序列化（可以简单的理解为继承Serializable接口）。我们可以把对象序列化之后存入Redis缓存中，然后在取出的时候又通过转换器，将序列化之后的对象反序列化回对象，这样就完成了我们的要求。





·springboot与redis集成：
	··导入springboot框架中redis的jar包；
	··springboot配置文件中配置redis参数；
	··自定义redis缓存器【redisTemplate】【@Configuration + @Bean】；

	··使用注解；
		---------------
		@Cacheable：支持缓存，当被调用后将返回值缓存起来，保证下次利用同样参数执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法；
			参数： value/cacheNames缓存名、 key缓存键值、 condition满足缓存条件、unless否决缓存条件 
	
				value/cacheNames属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。

				key属性是用来指定Spring缓存方法的返回结果时对应的key的。该属性支持SpringEL表达式。当我们没有指定该属性时，Spring将使用默认策略生成key。可以直接使用“#参数名”或者“#p参数index”。
				如果不填 key ，默认的 key 是当前的方法名，更新缓存时会因为方法名不同而更新失败。

				condition属性默认为空，表示将缓存所有的调用情形。当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。


		----------------
		@CachePut：支持缓存，执行前不会检查是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中； 主要用于数据新增和修改方法。
					cacheNames 和 key 都必须填，如果不填 key ，默认的 key 是当前的方法名，更新缓存时会因为方法名不同而更新失败。

		----------------
		@CacheEvict：触发缓存的清除操作；方法执行成功后会从缓存中移除相应数据。
		参数： value缓存名、 key缓存键值、 condition满足缓存条件、unless否决缓存条件、allEntries是否移除所有数据（设置为true时会移除所有缓存）、beforeInvocation（指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素）


		------------------
		@CacheConfig是一个类级别的注解，允许共享缓存的名称、KeyGenerator、CacheManager 和CacheResolver。 

		Spring Redis默认使用JDK进行序列化和反序列化，因此被缓存对象需要实现java.io.Serializable接口，否则缓存出错。
		当被缓存对象发生改变时，可以选择更新缓存或者失效缓存，但一般而言，后者优于前者，因为执行速度更快。

	··其他常用功能：
		1.cacheNames也可以统一写在类上面， @CacheConfig(cacheNames = "product")；
		2.key也可以动态设置为方法的参数，@Cacheable(cacheNames = "prodcut", key = "#openid")；
		如果参数是个对象，也可以设置对象的某个属性为 key。比如其中一个参数是 user 对象，key 可以写成 key="#user.id"
		3.缓存还可以设置条件；设置当 openid 的长度大于3时才缓存，@Cacheable(cacheNames = "prodcut", key = "#openid", condition = "#openid.length > 3")。

		还可以指定 unless 即条件不成立时缓存。#result 代表返回值，意思是当返回码不等于 0 时不缓存，也就是等于 0 时才缓存。@Cacheable(cacheNames = "prodcut", key = "#openid", condition = "#openid.length > 3", unless = "#result.code != 0")



·@EnableCaching注解：作用是启用缓存注解；
					是spring framework中的注解驱动的缓存管理功能。自spring版本3.1起加入了该注解。如果你使用了这个注解，那么你就不需要在XML文件中配置cache manager了。

当你在配置类(@Configuration)上使用@EnableCaching注解时，会触发一个post processor，这会扫描每一个spring bean，查看是否已经存在注解对应的缓存。如果找到了，就会自动创建一个代理拦截方法调用，使用缓存的bean执行处理。



·SpringBoot自动帮我们在容器中生成了一个RedisTemplate和一个StringRedisTemplate。但是，这个RedisTemplate的泛型是<Object,Object>，写代码不方便，需要写好多类型转换的代码；我们需要一个泛型为<	String,Object>形式的RedisTemplate。并且，这个RedisTemplate没有设置数据存在Redis时，key及value的序列化方式。
  	看到这个@ConditionalOnMissingBean注解后，就知道如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。因此我们可以直接自己写个配置类，配置RedisTemplate。





·JedisPool(非切片链接池)和ShardedJedisPool(切片链接池)：

	非切片池，一般项目基本都使用非切片池；只连接一台Redis服务器；

	切片池，主要用于分布式项目，设置主从Redis库；如果需要指明Redis连接哪个库，需要在使用Redis进行数据操作之前使用如下语句：	Jedis resource = jedisPool.getResource();
	resource.select(1);	select(1)表示指定Redis库的第二个库；

	JedisPool连一台Redis，ShardedJedisPool连Redis集群，通过一致性哈希算法决定把数据存到哪台上，算是一种客户端负载均衡，所以添加是用这个（Redis 3.0之后支持服务端负载均衡）




·spring-data-redis针对jedis提供了如下功能：
	1. 连接池自动管理，提供了一个高度封装的“RedisTemplate”类

	2. 针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口

	ValueOperations：简单K-V操作
	SetOperations：set类型数据操作
	ZSetOperations：zset类型数据操作
	HashOperations：针对map类型的数据操作
	ListOperations：针对list类型的数据操作

	3. 提供了对key的“bound”(绑定)便捷化操作API，可以通过bound封装指定的key，然后进行一系列的操作而无须“显式”的再次指定Key，即BoundKeyOperations：

	BoundValueOperations
	BoundSetOperations
	BoundListOperations
	BoundSetOperations
	BoundHashOperations

	4. 将事务操作封装，有容器控制。

	5. 针对数据的“序列化/反序列化”，提供了多种可选择策略(RedisSerializer)：【序列策略】

		JdkSerializationRedisSerializer：POJO对象的存取场景，使用JDK本身序列化机制，将pojo类通过ObjectInputStream/ObjectOutputStream进行序列化操作，最终redis-server中将存储字节序列。这是目前最常用的序列化策略。

		StringRedisSerializer：key或者value为字符串的场景，根据指定的charset对数据的字节序列编码成string，是“new String(bytes, charset)”和“string.getBytes(charset)”的直接封装。这是最轻量级和高效的策略。

		JacksonJsonRedisSerializer：jackson-json工具提供了javabean与json之间的转换能力，可以将pojo实例序列化成json格式存储在redis中，也可以将json格式的数据转换成pojo实例。因为jackson工具在序列化和反序列化时，需要明确指定Class类型，因此此策略封装起来稍微复杂。【需要jackson-mapper-asl工具支持】

		OxmSerializer：提供了将javabean与xml之间的转换能力，目前可用的三方支持包括jaxb，apache-xmlbeans；redis存储的数据将是xml工具。不过使用此策略，编程将会有些难度，而且效率最低；不建议使用。【需要spring-oxm模块的支持】

	如果你的数据需要被第三方工具解析，那么数据应该使用StringRedisSerializer而不是JdkSerializationRedisSerializer。

	6.设置缓存过期：
	a.@Scheduled和@CacheEvict(cacheNames="", allEntries=true)
	b.redis还可以通过application.yml配置一个全局的过期时间
	spring:
		cache:
			redis:
				time-to-live: 600s 	#默认从不过期，可以设置一个过期时间




· 通过源码可以看出，SpringBoot自动帮我们在容器中生成了一个RedisTemplate和一个StringRedisTemplate。但是，这个RedisTemplate的泛型是<Object,Object>，写代码不方便，需要写好多类型转换的代码；我们需要一个泛型为<String,Object>形式的RedisTemplate。并且，这个RedisTemplate没有设置数据存在Redis时，key及value的序列化方式。
    看到这个@ConditionalOnMissingBean注解后，就知道如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。因此我们可以直接自己写个配置类，配置RedisTemplate。

    StringRedisTemplate构建的时候默认设置了所有的序列化方式为String，也就是说StringRedisTemplate的数据格式都是String。	RedisTemplate没有设置的话就都是JDK。





·StringRedisTemplate 与 RedisTemplate 的区别：
	1.StringRedisTemplate 继承了 RedisTemplate。

	2.RedisTemplate 是一个泛型类，而 StringRedisTemplate 则不是。

	3.StringRedisTemplate 只能对 key=String，value=String 的键值对进行操作，RedisTemplate 可以对任何类型的 key-value 键值对操作。

	4.他们各自序列化的方式不同，但最终都是得到了一个字节数组，殊途同归，StringRedisTemplate 使用的是 StringRedisSerializer 类；RedisTemplate 使用的是 JdkSerializationRedisSerializer 类。反序列化，则是一个得到 String，一个得到 Object。

	5.两者的数据是不共通的，StringRedisTemplate 只能管理 StringRedisTemplate 里面的数据，RedisTemplate 只能管理 RedisTemplate中 的数据。





·Redis的数据类型：
	··String字符串
	string是redis最基本的类型，一个key对应一个value。
	string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。
	string类型是Redis最基本的数据类型，一个键最大能存储512MB。

	String 数据结构是简单的key-value类型，value其实不仅是String，也可以是数字。


	··链表
	redis列表是简单的字符串列表，排序为插入的顺序。列表的最大长度为2^32-1。
	redis的列表是使用链表实现的，这意味着，即使列表中有上百万个元素，增加一个元素到列表的头部或尾部的操作都是在常量的时间完成。
	可以用列表获取最新的内容（像帖子，微博等），用ltrim很容易就会获取最新的内容，并移除旧的内容。
	用列表可以实现生产者消费者模式，生产者调用lpush添加项到列表中，消费者调用rpop从列表中提取，如果没有元素，则轮询去获取，或者使用brpop等待生产者添加项到列表中。

	list的应用场景非常多，也是Redis最重要的数据结构之一，比如twitter的关注列表，粉丝列表等都可以用Redis的list结构来实现。


	··集合
	redis集合是无序的字符串集合，集合中的值是唯一的，无序的。可以对集合执行很多操作，例如，测试元素是否存在，对多个集合执行交集、并集和差集等等。
	我们通常可以用集合存储一些无关顺序的，表达对象间关系的数据，例如用户的角色，可以用sismember很容易就判断用户是否拥有某个角色。
	在一些用到随机值的场合是非常适合的，可以用 srandmember/spop 获取/弹出一个随机元素。
	同时，使用@EnableCaching开启声明式缓存支持，这样就可以使用基于注解的缓存技术。注解缓存是一个对缓存使用的抽象，通过在代码中添加下面的一些注解，达到缓存的效果。

	set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。
	Set 就是一个集合，集合的概念就是一堆不重复值的组合。利用Redis提供的Set数据结构，可以存储一些集合性的数据。

	··ZSet有序集合
	有序集合由唯一的，不重复的字符串元素组成。有序集合中的每个元素都关联了一个浮点值，称为分数。可以把有序看成hash和集合的混合体，分数即为hash的key。
	有序集合中的元素是按序存储的，不是请求时才排序的。

	sorted set的使用场景与set类似，区别是set不是自动有序的，而sorted set可以通过用户额外提供一个优先级(score)的参数来为成员排序，并且是插入有序的，即自动排序。当你需要一个有序的并且不重复的集合列表，那么可以选择sorted set数据结构，比如twitter 的public timeline可以以发表时间作为score来存储，这样获取时就是自动按时间排好序的。


	··Hash哈希
	redis的哈希值是字符串字段和字符串之间的映射，是表示对象的完美数据类型。
	哈希中的字段数量没有限制，所以可以在你的应用程序以不同的方式来使用哈希。	

	Hash的应用场景，比如我们要存储一个用户信息对象数据。




















-------------------------
·Redis有不同的数据类型，有不同的命令方式；
	··数据库键总是一个字符串对象SDS；
	··数据库键的值可以是5种数据类型：字符串SDS、列表、哈希表、集合、有序集合；
	
	字符串：
		·简单动态字符串【SDS】：底层是一个结构体，属性包含len[字符串长度，不计算空字符‘\0’的值]，free[未使用字节的数量]，buf[][字节数组，保存字符串，深一点说是保存二进制数据]；
		·C字符串只会作为字符串字面量，用于无须对字符串进行值修改的地方，如日志。SDS不仅是一个字符串字面量，还是一个可以被修改的字符串值。字符串值底层都是SDS实现的。
		·C字符串和SDS区别：
			··常数复杂度获取字符串长度。SDS为O(1)；字符串为O(n)，因为需要遍历计算;
			··杜绝缓冲区溢出。SDS可以动态扩容，C字符串不行；
			··减少修改字符串时带来的内存重分配次数。SDS包括空间预分配和惰性空间释放，修改n次最多执行n次内存分配；C字符串修改n次必须执行n次内存分配；
				空间预分配时，如果len的值小于1MB，那么分配和len属性同样大小的未使用空间(free);如果大于等于1MB,则分配1MB未使用的空间；
			··二进制安全。C字符串只能保存文本数据，因为字符串中不能包含空字符；SDS API都会以二进制的方式处理数组中的数据，可以保存文本和一系列二进制数据；
			··兼容部分C字符串的函数。SDS遵循C字符串也以空字符结尾，以便重用一部分<string.h>库定义的函数，避免不必要的代码重复；
		·SDS有很多API可供使用；

	链表：
		·链表底层：双端、无环、带表头指针和表尾指针、链表长度计算器、多态；
		·列表键底层实现之一就是链表；条件：包含数量较多的元素，或者列表中包含的元素是比较长的字符串时； 
		·链表用于列表键、发布和订阅、慢查询、监视器；
		·每个节点都有一个前置指针和后置指针，所以链表的实现是双端链表；
		·表头的前置节点和表位的后置节点都指向null，所以Redis的链表实现是无环链表；
		·链表可以保存不同类型的值；

	字典：
		·用于保存键值对，数据库和哈希键的底层都是字典；
		·字典底层则使用哈希表实现，一个哈希表有多个哈希表节点，每个哈希表节点保存了字典中一个键值对；
		·每个字典都有两个哈希表，一个平时使用，另一个仅在进行rehash时使用；

	跳跃表：
		·一种有序数据结构，在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点；
		·跳跃表用于有序集合键和集群节点中用作内部数据结构；


	整数集合：
		·整数集合是集合键的底层实现之一，当集合只包含整数值元素，这个集合元素数量不多时，就会使用它；
		·整数集合的底层实现为数组，以有序、无重复的方式保存集合元素，在有需要时，程序会根据新添加元素的类型，改变这个数组的类型；


	压缩列表：
		·一种为节约内存而开发的顺序型数据结构；
		·用作列表键和哈希键的底层实现之一；




	对象：
		·基于以上的数据结构，Redis创建了一个对象系统；5种类型的对象至少都有两种或者2种以上的编码方式，不同的编码在不同的场景上优化对象的使用效率；
		·使用OBJECT ENCODING 可以查看一个数据库键的值对象的编码；

		·服务器执行某些命令时，先检查给定键的类型能否执行指定的命令，而检查一个键的类型就是检查键的值对象的类型；
		·操作键的命令分为2种，一种可以对任何类型的键执行；一种只能对特定类型的键执行；
		·Redis的对象系统带有引用计数实现的内存回收机制，当一个对象不再被使用时，该对象所占用的内存就会被自动释放；
		·Redis会共享值为0-9999的字符串对象；
		·对象会记录自己的最后一次被访问的时间，这个时间可以用于计算对象的空转时间；



·Redis单机数据库：
	··数据库：
		···Redis默认创建16个数据库；
		···默认下，Redis客户端的目标数据库为0号数据库，可通过SELECT指令来切换目标数据库；
		···键空间和用户所见的数据库是直接对应的，键空间是一个字典；
		···设置键的生存时间：EXPIRE 键值 生存时间		->服务器自动删除生存时间为0的键；

	··RDB持久化：
		指定时间间隔将数据写入到磁盘中

	··AOF持久化：
		以日志形式构建数据


·Redis多机数据库：




·独立功能的实现：
	··事务：
		···MULTI：进入事务；
			EXEC：提交事务；
			WATCH：一个乐观锁。在EXEC命令执行之前，监视任意数量的数据库键，并在EXEC命令执行时，检查被监视的键是否至少有一个已经被修改过了，如果是的话，服务器将拒绝执行事务，并向客户端返回代表事务执行失败的空回复。

		···当一个客户端处于非事务状态时，这个客户端发送的命令会立即被服务器执行；而当客户端处于事务状态后，服务器根据客户端发来的不同命令执行不同操作：
			=======当发送命令为EXEC/DISCARD/WATCH/MULTI四个命令的其中一个，服务器立刻执行这个命令；
			=======当非以上命令时，则不会立即执行，而是将命令放入一个事务队列里面，然后向客户端返回QUEUED回复；

		···提供了一种将多个命令打包，然后一次性、有序地执行的机制；

		···多个命令会被放入到事务队列中，然后按照先进先出的顺序执行；

		···事务在执行过程中不会被中断，当事务队列中所有命令都被执行完毕后，事务才会结束；

		···Redis的事务总是具有ACID中的原子性、一致性、隔离性；当服务器运行在AOF持久化模式下，并且appendfsync选项的值为always时，事务也具有持久性；






	