
·应用场景：
		解耦：将消息写入消息队列，需要消息的系统自己从消息队列中订阅；
		异步：将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度；
		削峰：系统慢慢的按照数据库能处理的并发量，从消息队列中慢慢拉取消息。在生产中，这个短暂的高峰期积压是允许的。
				传统模式的缺点：并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常；

		使用消息队列不可能是单机的（必然是分布式or集群）；如果是单机的消息队列，万一这台服务器挂了，整个系统就不可用了。









RabbitMQ：
----------------------------
·与activemq不一样， rabbitmq 使用的是一种叫做 AMQP 的协议来通信。 AMQP 是 dvanced Message Queuing Protocol 的缩写。协议内容我们就没必要深入研究了，简单地说，通过这种协议，可以处理更为复杂的业务需求。

·与 ActiveMQ 拿到消息就直接放在队列等待消费者拿走不同， Rabbit 拿到消息之后，会先交给 交换机 （Exchange）, 然后交换机再根据预先设定的不同绑定( Bindings )策略，来确定要发给哪个队列。
如图所示，比起 ActiveMQ 多了 Exchange 和 Bindings。正式由于有了 Exchange 和 Bindings， RabbitMQ 就可以灵活地支撑各种模式。

·RabbitMQ提供了四种Exchange模式：fanout,direct,topic,header 。 header模式在实际使用中较少。