
·docker概念：
	··docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。
		容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。

　　··docker：最早是dotCloud公司出品的一套容器管理工具，但后来Docker慢慢火起来了，连公司名字都从dotCloud改成Docker。

　　··dockerfile：它是Docker镜像的描述文件，可以理解成火箭发射的A、B、C、D……的步骤。

　　··Dockerfile由多条指令组成，每条指令在编译镜像时执行相应的程序完成某些功能，由指令+参数组成，以逗号分隔，
		#作为注释起始符，虽说指令不区分大小写，但是一般指令使用大些，参数使用小写；

　　··docker镜像：通过Dockerfile做出来的，包含操作系统基础文件和软件运行环境，它使用分层的存储方式。镜像不包含任何动态数据，其内容在构建之后也不会被改变。

　　··docker容器：是运行起来的镜像，简单理解，Docker镜像相当于程序，容器相当于进程。容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。
					Docker容器通过 Docker镜像来创建。

	··docker仓库：镜像构建完成后，可以很容易的在当前宿主机上运行。但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 					就是这样的服务。
					一个Docker Registry中可以包含多个仓库；每个仓库可以包含多个标签；每个标签对应一个镜像，其中标签可以理解为镜像的版本号。
					Docker仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。

	··Docker版本：Docker划分为CE 和EE。CE即社区版（免费，支持周期三个月），EE即企业版，强调安全，付费使用。

	··分层存储：镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。
				镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。
				分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。





·文件src/main/docker/Dockerfile。每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。
	Dockerfile的基本指令有十三个，分别是：FROM、MAINTAINER、RUN、CMD、EXPOSE、ENV、ADD、COPY、ENTRYPOINT、VOLUME、USER、WORKDIR、ONBUILD。

	#指定基础镜像，必须为第一个命令。如果镜像不是本地的将会从DockerHub进行下载
	>FROM java:8

	#维护者信息
	>MAINTAINER: lryepoch

	#指定与外界交互的端口
	注：
　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口
	>EXPOSE 8080

	#指定持久化目录。在宿主机的/var/lib/docker目录下创建一个临时文件并把他链接到tomcat容器的工作目录 /tmp
	>VOLUME /tmp

	#将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget。此处是项目jar文件作为"app.jar"添加到容器中。
	>ADD springboot-docker-1.0.SNAPSHOT.jar app.jar

	#功能类似ADD，但是是不会自动解压文件，也不能访问网络资源
	>COPY target/springboot-docker-1.0.SNAPSHOT.jar demo.jar

	#构建镜像时执行的命令。此处运行jar包
	>RUN base -c 'touch /app.jar'

	#为docker容器设置环境变量
	>ENV JAVA_OPTS="xxx"

	#构建容器后调用，也就是在容器启动时才进行调用
	>CMD echo "This is a test."

	#配置容器，使其可执行化。配合CMD可省去"application"，只使用参数。ENTRYPOINT执行项目app.jar。为了缩短Tomcat启动时间，添加一个系统属性指向"/dev/urandom"作为Entropy Source
	>ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]

	#用于为镜像添加元数据
	>LABEL version="1.0" description="这是一个Web服务器" by="IT笔录"

	#工作目录，类似于cd命令
	>WORKDIR /a   #这时工作目录为/a

	#指定运行容器时的用户名或UID，后续的RUN也会使用指定用户
	>USER user:group

	#用于指定传递给构建运行时的变量
	>ARG build_user=www

	#用于设置镜像触发器
	>ONBUILD ADD . /app/src     注：当所构建的镜像被用做其他镜像的基础镜像，该镜像中的触发器将会被钥触发

	eg:
		# This my first nginx Dockerfile
		# Version 1.0

		# Base images 基础镜像
		FROM centos

		#MAINTAINER 维护者信息
		MAINTAINER tianfeiyu 

		#ENV 设置环境变量
		ENV PATH /usr/local/nginx/sbin:$PATH

		#ADD  文件放在当前目录下，拷过去会自动解压
		ADD nginx-1.8.0.tar.gz /usr/local/  
		ADD epel-release-latest-7.noarch.rpm /usr/local/  

		#RUN 执行以下命令 
		RUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm
		RUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre && yum clean all
		RUN useradd -s /sbin/nologin -M www

		#WORKDIR 相当于cd
		WORKDIR /usr/local/nginx-1.8.0 

		RUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre && make && make install

		RUN echo "daemon off;" >> /etc/nginx.conf

		#EXPOSE 映射端口
		EXPOSE 80

		#CMD 运行以下命令
		CMD ["nginx"]





·安装docker-ce版本：
	yum install docker-ce；		#安装最新版本
	yum -y install docker-ce；	#-y表示不询问安装，直到安装成功

·彻底卸载docker：
	yum list installed | grep docker 
	yum remove xxx -y

	rm -rf /etc/systemd/system/docker.service.d
	rm -rf /var/lib/docker
	rm -rf /var/run/docker

·部署文件：一般来说，在服务器新建一个docker文件夹/docker，将maven打包好的jar包和Dockerfile文件都复制到该docker文件夹下
·设置docker镜像地址：vi  /etc/docker/daemon.json
·常见指令:
	docker build -t xxx .       #制作镜像，-t 表示 指定镜像仓库名称/镜像名称:镜像标签。 . 表示使用当前目录下的Dockerfile文件

	docker images               #查看镜像
	docker ps                   #查看运行中的容器
	docker ps -a				#查看所有容器
	docker run -d -p 8080:8085 xxx    #启动容器，-d 指定容器在后台运行，-p 8080:8085 用于将容器内的8085端口映射到宿主机的8080端口，也可以换成其他本机端口。 
									【-P将容器内部开放的网络端口随机映射到宿主机的一个端口上；
									  -p指定要映射的端口，一个指定端口上只可以绑定一个容器；】
	docker run -p 80:80 --name nginx \
	-e TZ="Asia/Shanghai" \
	-v /mydata/nginx/html:/usr/share/nginx/html \
	-d nginx:1.17.0
	
	-p：将宿主机和容器端口进行映射，格式为：宿主机端口:容器端口；
	--name：指定容器名称，之后可以通过容器名称来操作容器；
	-e：设置容器的环境变量，这里设置的是时区；
	-v：将宿主机上的文件挂载到容器上，格式为：宿主机文件目录:容器文件目录；
	-d：表示容器以后台方式运行。


	--------------------------------					  
	docker port CONTAINER_ID		#查看映射端口配置

	docker create [contianer_name]		#创建一个新的容器但不启动它
	docker start [contianer_name]		#启动一个或多个已经被停止的容器
	docker restart [contianer_name]		#重启容器
	docker pause [contianer_name]		#暂停容器
	docker unpause [contianer_name]		#恢复容器
	docker stop [contianer_name]或者docker stop c5f5d5125587		#停止容器
	docker kill $ContainerName          # 强制停止容器
	docker kill CONTAINER_ID        #强制停止指定ID容器


	docker inspect [contianer_name]		#检查这个容器里的各项信息
	docker exec -it [contianer_name] /bin/bash 		#进入容器，就是进入启动的运行Tomcat的Linux。
	docker commit [contianer_name] [repository]		#根据容器创建一个新的镜像

	docker pull xxx		#从镜像仓库中拉取或者更新指定镜像
	docker push xxx		#将本地的镜像上传到镜像仓库,要先登陆到镜像仓库
	docker search xxx	#从Docker Hub查找镜像
	docker info 		#显示 Docker 系统信息，包括镜像和容器数
	docker version 		#显示 Docker 版本信息。

	docker stop $(docker ps -a -q)		#停止所有容器
	docker rm $(docker ps -a -q)		#删除所有容器，可通过添加 -f 参数强制删除
	docker rm <container id>				#删除指定id容器

	docker rmi $(docker images -q)		#删除全部镜像
	docker rmi -f $(docker images -q)	#当要删除的iamges和其他的镜像有关联而无法删除时，可通过 -f 参数强制删除
	docker rmi <image id>				#删除指定id镜像




·常见方式使用docker部署springboot项目：
	··idea使用docker插件一键部署；

	··创建一个文件夹docker里面放置 Dockerfile和 springBoot打包的项目docker_spring_boot.jar
		docker build -t xxx .
		docker run -d -p 8080:8080 xxx
	
	··把整个工程代码拷到centos服务器某个目录下（包括src、pom.xml），服务器需要提前安装好maven。
		在该目录下，创建镜像：mvn package xxx:build      
					查看镜像：docker images
					运行镜像：docker run -d -p 8010:8010 -t springio/gs-spring-boot-docker-master



·常见docker端口包括：
	2375：未加密的docker socket，远程root无密码访问主机
	2376：tls加密套接字，很可能这是您的CI服务器4243端口作为https 443端口的修改
	2377：群集模式套接字，适用于群集管理器，不适用于docker客户端
	5000：docker注册服务
	4789和7946：覆盖网络




·不通过docker hub怎样把docker image进行共享？
	1.主机A有镜像nginx，版本为v1.0版本。执行命令：
	docker save nginx:v1.0 -o /root/nginx.tar ---> 将nginx:v1.0保存为nginx.tar包
	2.通过scp命令将nginx.tar包拷贝给主机B。
	3.在主机B上执行命令：
	docker load -i /root/nginx.tar ---> 从nginx.tar包load为镜像nginx:v1.0

	注意：执行docker save nginx:v1.0 -o /root/nginx.tar命令，如果不加版本v1.0，会将主机A上所有版本nginx镜像都save到一个nginx.tar包。




·使用export/import导出和导入docker容器：
	导出容器：docker export [container id] > xxx.tar
	导入容器：cat xxx.tar | docker import - cai/demo:v2.1.30
	也可以通过指定 URL 或者某个目录来导入：docker import http://example.com/exampleimage.tgz example/imagerepo

	注：用户既可以使用docker load 来导入镜像存储文件到本地镜像库，也可以使用docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。



·设置Docker运行时根目录：
	因第一次玩 Docker，装系统的时候没有分配 /var 分区,而500多G的剩余空间都分给了 /home。
	Docker默认存放位置是在 /var/lib/docker。

	解决方法有二：
		1.重装系统、重新分区或者挂载新的磁盘到 /var/lib/docker，这也太不人性化了，忽略。。。下次部署 Docker 宿主机的时候得好好分区下。

		2.改变 Docker 默认存放路径。

		查了下手册发现： -g, –graph=”/var/lib/docker”	#设置Docker运行时根目录

		使用 –graph 参数：docker –graph=/opt/docker -d，会自动生成/opt/docker目录（0700），并在该目录下创建 docker 相关文件
		原来的镜像和容器都找不到了，因为路径改了（原来的镜像是在/var/lib/docker/devicemapper/devicemapper/{data,metadata}）

		Docker 的配置文件可以设置大部分的后台进程参数，在各个操作系统中的存放位置不一致。
		在 ubuntu 中的位置是：/etc/default/docker；在 centos 中的位置是：/etc/sysconfig/docker。

		使用 CentOS 7时，只需要更改 vim /etc/sysconfig/docker 成 OPTIONS=--graph="/home/lib/docker" --selinux-enabled -H fd://，
		然后 service docker start 重新启动，Docker 的路径就改成 /home/lib/docker 了。



·Docker Compose是一个用于定义和运行多个docker容器应用的工具。使用Compose你可以用YAML文件来配置你的应用服务，然后使用一个命令，你就可以部署你配置的所有服务了。


-----------------------
## Docker环境安装
	安装`yum-utils`：yum install -y yum-utils device-mapper-persistent-data lvm2

	为yum源添加docker仓库位置：yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

	安装docker服务：yum install docker-ce

	启动docker服务：systemctl start docker


## Docker镜像常用命令

### 搜索镜像：docker search java

### 下载镜像：docker pull java:8

### 查看镜像版本
	由于`docker search`命令只能查找出是否有该镜像，不能找到该镜像支持的版本，所以我们需要通过`Docker Hub`来搜索支持的版本。
	进入`Docker Hub`的官网，地址：https://hub.docker.com
	然后搜索需要的镜像：
	查看镜像支持的版本：

	进行镜像的下载操作：docker pull nginx:1.17.0

### 列出镜像：docker images

### 删除镜像：
	指定名称删除镜像：docker rmi java:8

	指定名称删除镜像（强制）：docker rmi -f java:8

	删除所有没有引用的镜像：docker rmi `docker images | grep none | awk '{print $3}'`
	强制删除所有镜像：docker rmi -f $(docker images)

### 打包镜像

# -t 表示指定镜像仓库名称/镜像名称:镜像标签 .表示使用当前目录下的Dockerfile文件docker build -t mall/mall-admin:1.0-SNAPSHOT .


## Docker容器常用命令

### 新建并启动容器

docker run -p 80:80 --name nginx \-e TZ="Asia/Shanghai" \-v /mydata/nginx/html:/usr/share/nginx/html \-d nginx:1.17.0

- \-p：将宿主机和容器端口进行映射，格式为：宿主机端口:容器端口；
- \--name：指定容器名称，之后可以通过容器名称来操作容器；
- \-e：设置容器的环境变量，这里设置的是时区；
- \-v：将宿主机上的文件挂载到宿主机上，格式为：宿主机文件目录:容器文件目录；
- \-d：表示容器以后台方式运行。

### 列出容器

列出运行中的容器：docker ps
列出所有容器：docker ps -a

### 停止容器

注意：`$ContainerName`表示容器名称，`$ContainerId`表示容器ID，可以使用容器名称的命令，基本也支持使用容器ID，比如下面的停止容器命令。

docker stop $ContainerName(or $ContainerId)

例如：docker stop nginx#或者docker stop c5f5d5125587

### 强制停止容器
docker kill $ContainerName

### 启动容器
docker start $ContainerName

### 进入容器
先查询出容器的`pid`：docker inspect --format "{{.State.Pid}}" $ContainerName
根据容器的pid进入容器：nsenter --target "$pid" --mount --uts --ipc --net --pid

### 删除容器

删除指定容器：docker rm $ContainerName
按名称通配符删除容器，比如删除以名称`mall-`开头的容器：docker rm `docker ps -a | grep mall-* | awk '{print $1}'`
强制删除所有容器：docker rm -f $(docker ps -a -q)

### 查看容器的日志
查看容器产生的全部日志：docker logs $ContainerName
动态查看容器产生的日志：docker logs -f $ContainerName

### 查看容器的IP地址：docker inspect --format '{{ .NetworkSettings.IPAddress }}' $ContainerName

### 修改容器的启动方式


# 将容器启动方式改为always：docker container update --restart=always $ContainerName

### 同步宿主机时间到容器：docker cp /etc/localtime $ContainerName:/etc/


### 指定容器时区
docker run -p 80:80 --name nginx \-e TZ="Asia/Shanghai" \-d nginx:1.17.0


### 查看容器资源占用状况
查看指定容器资源占用状况，比如cpu、内存、网络、io状态：docker stats $ContainerName

查看所有容器资源占用情况：docker stats -a

### 查看容器磁盘使用情况：docker system df

### 执行容器内部命令：docker exec -it $ContainerName /bin/bash


### 指定账号进入容器内部


# 使用root账号进入容器内部：docker exec -it --user root $ContainerName /bin/bash


### 查看所有网络：docker network ls


### 创建外部网络：docker network create -d bridge my-bridge-network


### 指定容器网络：docker run -p 80:80 --name nginx \--network my-bridge-network \-d nginx:1.17.0


## 修改镜像的存放位置

	查看Docker镜像的存放位置：docker info | grep "Docker Root Dir"
	关闭Docker服务：systemctl stop docker

	先将原镜像目录移动到目标目录：mv /var/lib/docker /mydata/docker
	建立软连接：ln -s /mydata/docker /var/lib/docker


