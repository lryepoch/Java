
·docker概念：
	··docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。
		容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。

　　··docker：最早是dotCloud公司出品的一套容器管理工具，但后来Docker慢慢火起来了，连公司名字都从dotCloud改成Docker。

　　··dockerfile：它是Docker镜像的描述文件，可以理解成火箭发射的A、B、C、D……的步骤。

　　··Dockerfile由多条指令组成，每条指令在编译镜像时执行相应的程序完成某些功能，由指令+参数组成，以逗号分隔，
		#作为注释起始符，虽说指令不区分大小写，但是一般指令使用大些，参数使用小写；

　　··docker镜像：通过Dockerfile做出来的，包含操作系统基础文件和软件运行环境，它使用分层的存储方式。

　　··docker容器：是运行起来的镜像，简单理解，Docker镜像相当于程序，容器相当于进程。容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。
					Docker 容器通过 Docker 镜像来创建。

	··docker仓库：镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库；每个仓库可以包含多个标签；每个标签对应一个镜像，其中标签可以理解为镜像的版本号。
	




·文件src/main/docker/Dockerfile

	#使用JDK8环境为基础镜像，如果镜像不是本地的将会从DockerHub进行下载
	FROM openjdk:8-jdk-alpine
	/FROM java:8

	#允许指定端口转发(可无)
	EXPOSE 8080

	#在宿主机的/var/lib/docker目录下创建一个临时文件并把他链接到tomcat容器的工作目录 /tmp
	VOLUME /tmp

	#项目的jar文件作为"app.jar"添加到容器中。复制文件并且重命名
	ADD springboot-docker.jar app.jar

	#运行jar包（可无）
	RUN base -c 'touch /app.jar'

	#用于为docker容器设置环境变量（可无）
	ENV JAVA_OPTS=""

	#ENTRYPOINT执行项目app.jar。为了缩短Tomcat启动时间，添加一个系统属性指向"/dev/urandom"作为Entropy Source
	ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]






·部署文件：在服务器新建一个docker文件夹/usr/local/docker，将maven打包好的jar包和Dockerfile文件复制到服务器的docker文件夹下
·启动打包:
	docker build -t xxx .       #制作镜像，-t 参数是指定此镜像的tag名，xxx为自定义的镜像名称， . 点代表当前路径下的所有文件
	docker images                        #命令查看我们制作的镜像【查看镜像用docker images命令，查看容器用docker ps命令】
	docker run -d -p 8080:8085 xxx         #启动容器，-d 指定容器在后台运行，-p 8081:8081 用于将容器内的8081端口映射到主机的8081端口，也可以换成其他本机端口。 