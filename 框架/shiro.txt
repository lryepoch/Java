
·shiro框架：shiro可以完成认证、授权、加密、会话管理、与web集成、缓存等等。
     	   一个开源框架，一个权限管理框架，主要实现用户认证、用户授权。


·shiro和spring security区别：
	1.简单、灵活；复杂、笨重；
	2.可脱离spring；不可脱离spring；
	3.粒度较粗；粒度更细；



·整体架构：

	Subject：主体，可以是用户也可以是程序，主体要访问系统，系统需要对主体进行认证、授权。
				主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；
				所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；
				可以把Subject认为是一个门面；SecurityManager才是实际的执行者；

	SecurityManager：安全管理器，主体进行认证和授权都是通过securityManager进行。
					所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互。
					如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器。

	Realm：域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；
			也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。

	Authenticator：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；
					其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；

	Authrizer：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；

	SessionManager：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；
					而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所以，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；
					这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；

	SessionDAO：目的是为了将session持久化在内存中（MemorySessionDAO ），或者redis中（shiro-redis）。
				把session持久化的原因有多个，分布式情况下共享session应该是原因之一；持久化就是通过sessionDao完成的。默认情况下，sessionDao的实现是MemorySessionDAO，即把session保存在内存中

	CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能

	Cryptography：密码管理，提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。比如 md5散列算法。


	最简单的一个Shiro应用：
		1、应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；
		2、我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其	权限进行判断。
		从以上也可以看出，Shiro不提供维护用户/权限，而是通过Realm让开发人员自己注入。




·shiro的Realm：
	内置Realm
	··IniRealm：
	··JdbcRealm讲解：继承了AuthorizingRealm类；
	··自定义Realm：也要继承AuthorizingRealm类；

	··Realm概念：
		Realm在Shiro里到底扮演什么角色呢？ 它是真正进行用户认证和授权的关键地方。
		当应用程序向Shiro提供了账号和密码之后， Shiro就会问Realm这个账号密码是否对， 如果对的话，其所对应的用户拥有哪些角色，哪些权限。 

		所以Realm其实就是个中介。 
		Realm得到了Shiro给的用户和密码后，有可能去找ini文件，就像Shiro入门中的shiro.ini，也可以去找数据库。

		通过realm从数据库中查询用户信息，所以realm的作用可想而知：根据token中的身份信息去查询数据库（入门程序我们使用ini配置文件模拟数据库）。如果查到用户则返回认证信息，如果查询不到就返回null。

	··多Realm：与单一realm相同，首先根据不同的登录认证要求创建不同的realm。如支持多用户类型认证,系统用户,第三方用户等,其中认证的字段有所不同,比如,系统用户使用账号和密码登录,第三方用户使用手机号/验证码或邮箱之类的认证,不同的用户类型所使用的登录页和主页都不一样,而且在认证失败后都跳转到各自的登录页。


·shiro认证过程：【登录】
	
	认证就是验证用户身份的过程。在认证过程中，用户需要提交实体信息【principals】和凭据信息【credentials】以检验用户是否合法。最常见的“实体/凭证”组合便是“用户名/密码”组合。

	创建SecurityManager
	主体提交认证
	SecurityManager认证
	Authenticator认证
	Realm验证


	认证过程：
	1、首先调用Subject.login(token)进行登录，其会自动委托给SecurityManager，调用之前必须通过SecurityUtils.setSecurityManager()设置。

	2、SecurityManager负责真正的身份验证逻辑；它会委托给Authenticator进行身份验证。

	3、Authenticator才是真正的身份验证者，Shiro API中核心的身份认证入口点，此处可以自定义插入自己的实现。

	4、Authenticator可能会委托给相应的AuthenticationStrategy进行多Realm身份验证，默认ModularRealmAuthenticator会调用AuthenticationStrategy进行多Realm身份验证。

	5、Authenticator会把相应的token传入Realm，从Realm获取身份验证信息，如果没有返回/抛出异常表示身份验证失败了。此处可以配置多个Realm，将按照相应的顺序及策略进行访问。

	doGetAuthenticationInfo()方法：
		大致流程为：登录——>拿账号密码检验———>用着token的账号通过你的sql查询对象——>比对数据是否一致——>通过还是抛各种异常
		而在shiroConfig中，基于url过滤时authc即可访问


·shiro授权过程：访问控制，即应用中控制谁访问哪些资源；
				在用户认证通过后(注意只有当用户认证通过后才能对用户进行授权)，系统对用户访问资源进行控制，用户具有资源的访问权限方可访问。

				授权管理：是否登录——>是/否——（是）—>查询role/perm添加到subject——>过滤器校验该url需要权限——>可以访问/权限不足

	创建SecurityManager
	主体授权
	SecurityManager授权
	Authorizer授权
	Realm获取角色权限数据


	授权流程：
	1、对subject进行授权，调用方法isPermitted（"permission串"）

	2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权

	3、ModularRealmAuthorizer执行realm（自定义的Realm）从数据库查询权限数据

	调用realm的授权方法：doGetAuthorizationInfo

	4、realm从数据库查询权限数据，返回ModularRealmAuthorizer

	5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对

	6、如果比对后，isPermitted中"permission串"在realm查询到权限数据中，说明用户访问permission串有权限，否则 没有权限，抛出异常。（permission串即URL）

 
	权限控制通常有两类做法：
		角色授权：不同身份的用户登录，我们现在不同的操作菜单（没有权限的菜单不现实）。粗粒度的，范围较大。角色针对访问页面，权限针对方法！
		权限授权：对所有用户显示所有菜单，当用户点击菜单以后再验证当前用户是否有此权限，如果没有则提示权限不足。细粒度的。

	1.代码级别权限控制：通过写if/else授权代码块完成： 
		Subject subject = SecurityUtils.getSubject();  
		if(subject.hasRole(“admin”)) {  
		    //有权限  
		} else {  
		    //无权限  
		}   
		if(subject.isPermitted("sys:k:find")){
		    System.out.println("----------->查询客户信息");
		    return "customer_list";
		}else{
		    return "lesspermission";
		}	

	2.方法注解权限控制：通过在执行的Java方法上放置相应的注解完成： 没有权限将抛出相应的异常。AuthorizationAttributeSourceAdvisor && DefaultAdvisorAutoProxyCreator
			注解方式以硬编码的形式来授权，一旦权限发生变动就需要，修改代码，然后重新部署，这就比较麻烦，不灵活。
		@RequiresRoles(value={"admin","user"},logical = Logical.OR)
    	@RequiresPermissions(value={"add","update"},logical = Logical.AND)

	3.JSP/HTML标签：在页面通过相应的标签完成权限控制
		<shiro:hasRole name="admin">  
			<!— 有权限 —>  
		</shiro:hasRole>  

		<shiro:hasPermission name="sys:c:save">
    		<dd><a href="javascript:;">入库</a></dd>
		</shiro:hasPermission>

	4.采用自定义URL过滤器的方式来实现，权限可以自由随意配置/分配，无需改动代码，更加灵活。
		filterMap.put("/c_add.html","perms[sys:c:save]");



·shiro加密：
	··用户密码是明文的，这样是有巨大风险的，一旦泄露，就不好了。所以，通常都会采用非对称加密。

		什么是非对称呢？就是不可逆的，而md5就是这样一个算法：
		eg：123用md5加密后，得到字符串： 202CB962AC59075B964B07152D234B70。这个字符串，却无法通过计算反过来得到源密码是 123。

		这个加密后的字符串就存在数据库里了，下次用户再登陆，输入密码 123， 同样用md5加密后，再和这个字符串一比较，就知道密码是否正确了。
		如此这样，既能保证用户密码校验的功能，又能保证不暴露密码。
	
	··典型的加密算法是 MD5 和 SHA1；

	··在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符，这种过程称之为“加盐”。
	··盐：
		虽然每次123经过md5加密之后都是202CB962AC59075B964B07152D234B70，但是我加上盐，即123+随机数，那么md5值就不一样了。
		这个随机数，就是盐。
		这个随机数也会在数据库里保存下来，每个不同的用户，随机数也是不一样的。
		
		再就是加密次数，加密一次是202CB962AC59075B964B07152D234B70。加密两次，就是另一个数了。而黑客即便是拿到了加密后的密码，如果不知道到底加密了多少次，也是很难办的。



·springboot中集成shiro：（@Configuration+@Bean）
	
	ShiroFilter
	|
	Advisor
	|
	|__SecurityManager
	|	|__Realm
	|	|	|__CredentialsMatcher
	|	|	|__自定义的密码比较器
	|	|
	|	|__CacheManager
	|	|__SessionManager
	|	|
	|	|__RememberMeManager
	|		|__SimpleCookie		
	|
	ExceptionResolver	//异常处理器
	|
	LifecycleBeanPostProcessor	//生命周期的初始化、销毁






·通常企业开发中将资源和权限表合并为一张权限表，如下：
	资源（资源名称、访问地址）
	权限（权限名称、资源id）





·Shiro 中的 SecurityUtils：
	其中声明了一个静态属性，三个静态方法：
	静态属性 securityManager：用来存储当前应用中全局唯一的一个SecurityManager。
	getSubject 静态方法：这个是 Shiro 中最核心的方法了，用来获取 Subject




·subject如何获取登录用户信息？

	shiro管理登录，获取登录信息的方式常用的是：
	Subject sub = SecurityUtils.getSubject(); Object obj = sub.getPrincipal();
	这里的 obj 是字符串，还是某个实体，取决于 ShiroRealm 类的设置值，代码如下：

		@Override protected AuthenticationInfo
		doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
			System.out.println("获取登录者信息-->MyShiroRealm.doGetAuthenticationInfo()");
			UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;
			String userS = token.getUsername(); 
			User user = userService.findByName(userS);
			if (user != null) { 
				LoginInfo info = new LoginInfo();
				info.setName(user.getName()); 
				info.setLoginId(user.getId); 
				return new SimpleAuthenticationInfo(info, user.getPassword(), getName()); 
			} 
			return null; 
		}
	如果像上面这样设置，读取登录信息就是：LoginInfo login = (LoginInfo) SecurityUtils.getSubject().getPrincipal();


	如果设置登录信息的地方如下：
		@Override protected AuthenticationInfo
		doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
			System.out.println("获取登录者信息-->MyShiroRealm.doGetAuthenticationInfo()");
			UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;
			String userS = token.getUsername(); 
			User user = userService.findByName(userS);
			return new SimpleAuthenticationInfo(users, user.getPassword(), getName());
		}
	读取登录信息就是：String loginName = (String) SecurityUtils.getSubject().getPrincipal();





·拦截器Filter：
isAccessAllowed：判断是否登录。在登录的情况下会走此方法，此方法返回true直接访问控制器。
onAccessDenied：是否是拒绝登录。没有登录的情况下会走此方法。
如果isAccessAllowed方法返回True，则不会再调用onAccessDenied方法，如果isAccessAllowed方法返回Flase,则会继续调用onAccessDenied方法。而onAccessDenied方法里面则是具体执行登陆的地方。由于我们已经登陆，所以此方法就会返回True(filter放行)，所以上面的onPreHandle方法里面的onAccessDenied方法就不会被执行。