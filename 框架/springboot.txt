
·优点：
	··可以创建独立的Spring应用程序，并且有内置的服务器。不需要将我们的项目单独的发布到tomcat或者jboss等某个HHTP服务器上，因为它有内置的tomcat、jetty等服务器，它直接回归到了我们最初学习java	时的启动方式。也就是通过一个main函数的方式来启动我们的项目。只不过我们的main函数上面多了一个@SpringBootApplication的注解。
	··可以大量减少构建配置。基本上不需要代码的生成、XML的配置以及尽可能多的提供第三方库。SpringBoot只需通过注解的形式配置开发当中一些动态的参数即可；


·入门：
	··建立过程：
		1.新建一个maven工程；
		2.导入相应的jar包；
		3.创建 Application.java，其注解 @SpringBootApplication 表示这是一个SpringBoot应用，运行其主方法就会启动tomcat,默认端口是8080；
			注意：启动类Application.java应该位于什么位置呢？因为要扫描所有的类，所以必须位于所有子包的上一层！！！！否则就要手动指定要加载的包！！！

	··关注点：
		1、application.java内嵌有tomcat，所以当启动项目时，像正常滴启动一个java application即可。
		2、springboot是使用maven管理的，注意maven的创建过程。
			SpringBoot 应用，本质上是一个Java 程序，其采用的风格是 maven 风格，所以又是一个 Maven 项目，接下来我们就按照 maven 项目的方式创建就行了。 不要被花里胡哨的插件掩盖了其本质。
		3、热部署：当发现任何类发生了改变，马上通过JVM类加载的方式，加载最新的类到虚拟机中。这样就不需要重新启动也能看到修改后的效果了。完成热部署只需在pom.xml中新增加一个依赖和一个插件即可。Springboot 部署会采用两种方式：全部打包成一个jar，或者打包成一个war。
		4、通过修改application.properties，修改访问的端口号和上下文路径；

	··视图：
		1.Springboot的默认视图支持是thymeleaf。也可支持jsp。thymeleaf跟jsp一样，就是运行之后，就得到纯HTML了。 
		
		2.区别在于不运行之前，thymeleaf也是纯html。所以thymeleaf不需要 服务端的支持，就能够被以html的方式打开，这样就方便前端人员独立设计与调试。
		 jsp就不行了，不启动服务器jsp都没法运行出结果来。


	··异常处理：
		1.新建一个异常类：
		2.使用@ControllerAdvice + @ExceptionHandler进行全局的Controller层异常处理。而且，@Validated校验器注解的异常，也可以一起处理，无需手动判断绑定校验结果BindingResult/Errors了！
		但是，只能处理Controller层未捕获（往外抛）的异常，对于 Interceptor（拦截器）层的异常，Spring框架层的异常，就无能为力了。


	··配置文件格式：
		1.springboot的配置文件还支持yml格式。application.properties，application.yml是2种不同的格式，但作用是一样的。
		2.在application.yml 文件书写注意：
								1)不同“等级” 用冒号隔开；
								2)次等级的前面是空格，不能使用制表符(tab)；
								3)冒号之后如果有值，那么冒号和值之间至少有一个空格，不能紧贴着；
		3.要么用application.properties ，要么用 application.yml。不要都用。


·springboot默认static中放静态页面，而templates中放动态页面；
	··templates文件夹，是放置模板文件的，因此需要视图解析器来解析它。所以必须通过服务器内部进行访问，也就是要走控制器--服务--视图解析器这个流程才行。
	··static文件夹，既不能直接访问，也不能通过服务器访问到。因此，这个文件夹，可能是放一些css、图片这样的文件供服务器内部引用。



·static和templates两个文件夹下的文件：

	static：此文件下都是静态资源文件，最主要的一个特点，可以通过浏览器地址栏，直接访问；

	        ··在该文件夹下创建index.html，该页面会被默认为访问的首页，即在地址栏中输入http://localhost:8080可以直接访问该页面，不用其他配置。

	        ··如果该文件下还有其他静态文件夹，需要在application.properties中配置，否则该文件下的静态文件不能被引用或者访问。
				spring.mvc.static-path-pattern=/static/**  

	template：模板文件夹，该文件下的页面不能通过地址栏地址直接访问，需要经过Controller类来访问，需要在application.properties中配置对应的模板引擎：   

	         #配置模板引擎
	          spring.thymeleaf.prefix=classpath:/templates/
	          spring.mvc.view.prefix=classpath:/templates/
	          spring.mvc.view.suffix=.html（注：此处填写自己页面对应的后缀名，我的是html页面）

	静态页面的return默认是跳转到/static/目录下，当在pom.xml中引入了thymeleaf组件，动态跳转会覆盖默认的静态跳转，默认就会跳转到/templates/下，注意看两者return代码也有区别，动态没有html后缀。


	

··因为springboot项目默认是不支持jsp的，需要我们自己配置jar包依赖：
	    <dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<version>8.5.20</version>
		</dependency>
 
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>



·springboot异常处理：【status/code/message/data】
	
	局部异常处理：@Controller + @ExceptionHandler【在当前controller类中定义被@ExceptionHandler修饰的方法】
	全局异常处理：@ControllerAdvice + @ExceptionHandler

	Springboot异常处理，可以通过一下几种方法：
	1、通过自定义BasicErrorController 错误处理，这个是处理是基于状态码的。
		··在启动器里面，添加EmbeddedServletContainerCustomizer，然后在里面注册处理相应状态码的界面；
		··定义错误处理控制器，这个控制器和普通控制器类似，主要是用来处理状态码对应的错误的视图；

	2、使用@ControllerAdvice来进行统一异常处理，@ExceptionHandler(value = Exception.class)来指定捕获的异常 ；

		··定义一个返回值的数据结构CommonResult；
		··定义全局异常处理器@ControllerAdvice，里面定义了异常捕抓器@ExceptionHandler，可以捕抓参数检测不合格（MethodArgumentNotValidException）、其他Exception类及其子异常类、自定义异常类（GlobalException）；
		··定义一个错误码枚举类ResultEnum；
			常见状态码：200-OK-响应成功
						400-Bad Request-请求出现语法错误，一般请求参数不对
						401-Unauthorized-访问被拒绝
						403-Forbidden-资源不可用
						404-Not Found-无法找到指定位置的资源
						500-Internal server error-服务器内部错误

		··编译异常需要提前捕获或者抛出，编译异常处理完成之后程序继续往下执行，而运行异常会被全局异常处理器所捕获处理；
		
		··自定义异常：继承Exception/RuntimeException；定义成员code/message；构造方法；
						系统中需要手动throw new Exception(…);

		··controller层处理异常，service层中使用spring事务，处理异常之后需要再次抛出。如果service处理了(catch)异常，那么事务就不会回滚。


	服务层返回错误信息，大体分为两类：
									1.ResultModel(code,message)，使用if、else判断。
									2.抛出自定义exception，异常控制逻辑。






·单元测试：
	@RunWith(SpringRunner.class)
	@SpringBootTest(classes = Application.class)
	test方法加上@Test注解




·打包：
	··多模块打包：在parent的pom下执行deploy，这样就会自动将父pom以及子module都发布到仓库；
	··将子module的parent去掉，不要依赖不在仓库中的pom，将子module提升为一个独立的maven项目单独发布；




·WebMvcConfigurer解析：

	··WebMvcConfigurer：拦截器的注册类（实现HandlerInterceptor接口的类需要在这里注册，@Configuration）
	··HandlerInterceptorAdapter：拦截组件
							   拦截组件HandlerInterceptorAdapter可以有多个，需要注册到WebMvcConfigurer里面，在WebMvcConfigurer里面拦截器是按顺序执行的。

		在Spring Boot2.0及Spring 5.0前, 该类WebMvcConfigurerAdapter被标记为@Deprecated，已被废弃。官方推荐直接实现WebMvcConfigurer或者直接继承WebMvcConfigurationSupport，方式一实现WebMvcConfigurer接口（推荐），方式二继承WebMvcConfigurationSupport类。
		在Spring Boot 2.0后都是靠重写WebMvcConfigurer的方法来添加自定义拦截器，消息转换器等。


	··概念：
		直接点就是web的配置都可以在这类里面进行；
		采用JavaBean的形式来代替传统的xml配置文件形式进行针对框架个性化定制，可以自定义一些Handler，Interceptor，ViewResolver，MessageConverter。


	··该接口下常用方法：
		2.1 addInterceptors：拦截器。拦截器主要用途：进行用户登录状态的拦截，日志的拦截等。

		2.2 addViewControllers：页面跳转

		2.3 addResourceHandlers：静态资源。自定义静态资源映射目录。

		2.4 configureDefaultServletHandling：默认静态资源处理器

		2.5 configureViewResolvers：视图解析器

		2.6 configureContentNegotiation：配置内容裁决的一些参数

		2.7 addCorsMappings：跨域

		2.8 configureMessageConverters：信息转换器



·HandlerInterceptor解析:（这是拦截组件，一个接口）（或者@Component）
	1. boolean preHandle (HttpServletRequest request, HttpServletResponse response, Object handle)方法：该方法将在请求处理之前进行调用，只有该方法返回true，才会继续执行后续的Interceptor和Controller，当返回值为true 时就会继续调用下一个Interceptor的preHandle 方法，如果已经是最后一个Interceptor的时候就会是调用当前请求的Controller方法； 

	2.void postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView)方法：该方法将在请求处理之后，DispatcherServlet进行视图返回渲染之前进行调用，可以在这个方法中对Controller 处理之后的ModelAndView对象进行操作。 

	3.void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)方法：该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。用于进行资源清理。





·HttpSessionListener解析：（@WebListener，这是监听器）
	# public void sessionCreated(HttpSessionEvent se); 
	当一个浏览器第一次访问网站的时候，J2EE应用服务器会新建一个HttpSession对象，并触发HttpSession创建事件，如果注册了HttpSessionListener事件监听器，则会调用HttpSessionListener事件监听器的 sessionCreated方法。

	# public void sessionDestroyed(HttpSessionEvent se);
	1.执行session.invalidate()方法时；
	2.如果用户长时间没有访问服务器，超过了会话最大超时时间 ，服务器就会自动销毁超时的session。

	应用场景：在线人数的统计；