
SpringMVC :

--概念：
	相当于一个controller；
	一个实现了Web的MVC架构模式【web层职责解耦】的请求驱动型【请求响应模型】的轻量级框架。

	围绕 Servlet 设计，将请求发给控制器，然后通过模型对象，分派器来展示请求结果视图。其中核心类是 DispatcherServlet，它是一个 Servlet，顶层是实现的Servlet接口。
	Spring MVC 分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。


--架构流程：
		1.用户发送请求url到前端控制器DispatcherServelt;
		2.DispatcherServelt收到请求，调用处理器映射器HandlerMapping;
		3.处理器映射器根据请求的url找到具体的处理器，生成处理器对象以及、、并返回给DispatcherServlet；
		3.DispatcherServlet通过处理器适配器HandlerAdapter执行处理器对象；
		4.执行Handler返回ModelAndView;
		5.HandlerAdapter把Handler的执行结果ModelAndView返回给DispatcherServelt;
		6.DispatcherServlet将ModelAndView发送给视图解析器进行解析；
		7.返回具体的View给DispatcherServlet;
		8.DispatcherServlet对view进行视图渲染（把model模型数据填充到视图）；
		9.DispatcherServelt响应用户请求.


--SpringMVC 开发模式：xml文件（实现Controller接口）、基于注解。

	问题：如何知道创建哪个Controller接口的实例呢？
	2种方案：利用xml配置文件：
					利用注解：@Controller+@RequestMapping；



--SpringMVC 中Controller 返回值类型:
		---ModelAndView:   
										ModelAndView类用来存储处理完后的结果数据，以及显示该数据的视图。具体就是业务处理器调用模型层处理完用户请求后，把结果数据存储在model中，把返回的视图信息存储到view中，然后让该ModelAndView返回该springMVC框架。然后通过配置文件中定义的视图解释器，对该对象进行解析，最后把结果数据显示到指定的页面上。

										返回指定页面：（设置转向地址）；
										addObject(用于向model中添加数据，model底层是一个map，返回值是ModelAndView，可以向该model添加多个数据)，这也等价于在ModelAndView修饰的方法中带上参数 ，例如：在表单中添加数据可以通过带参数的形式。
										此外，ModelAndView也可以携带session参数，表示一个会话，这里用到getAttribute（）和setAttribute（）方法。

										返回所需数值：（传递结果数据到结果页面）。
										setViewName（指定将要跳转到的视图的名称）……，最后要return modelAndView;
										此外，还有所谓的视图定位，指的是代码还会写成这样：new ModelAndView("index");，但是会跳转到 /WEB-INF/page/index.jsp ，也就是视图解析器的前后缀的配置。

		---Map<Object，Object>：
						Map<String,Object> map=new HashMap<String, Object>();
						最后，return map;

		---String:   参数列表带有Model或者Map<Object，Object>等等。可以用model.addAttribute（）添加一些信息。最后要跳转页面的话，用return（eg：return "main";）来跳转。
		
						  如果controller方法返回jsp页面，可以简单将方法返回值类型定义 为字符串，最终返回逻辑视图名。
							eg：public String editItems(Model model) throws Exception{}
							通过返回字符串的方法，有时候会返回一些特殊的字符串(例如返回return "forward:url路径"或return "redirect:url路径")。分别代表请求转发和请求冲定向。

		---void:   添加 HttpServletRequest 和 HttpServletResponse 来进行页面的跳转。或者带参数Model、Map<Object，Object>等等。

						返回void:@RequestMapping(value = "/editItems",method = RequestMethod.GET)
						public void editItems(HttpServletRequest request, HttpServletResponse response) throws Exception{}
						返回值为void的方法我们容易输出json、xml格式的数据，即通过response指定响应结果。

		---其他自定义类型也可。




--Controller中的参数绑定：

	Controller的方法中默认支持的形参(即之前我们根据需求手动传入的参数，这些参数处理适配器会默认识别并进行赋值)有：

					1.HttpServletRequest：通过request对象获取请求信息。 
					2.HttpServletResponse：通过response处理响应信息。
					3.HttpSession：通过session对象得到session中存放的对象。
					4.Model/modelmap/map：通过model向页面传递数据，页面通过${item.XXXX}获取item对象的属性值,如下:
							//调用service查询商品信息
							Items item = itemService.findItemById(id);
							model.addAttribute("item", item);



--服务端和客户端跳转：服务端跳转URL地址栏不变，这个由服务器内部发生的；客户端跳转URL地址栏改变，这个由操作者操作的，人眼可见，
											eg：ModelAndView mav = new ModelAndView("redirect:/index");。

--文件上传：

--拦截器：



--Spring mvc 线程不安全的原因：
	
	请求时多线程请求的，但是每次请求过来调用的Controller对象都是一个，而不是一个请求过来就创建一个controller对象。原因就在于如果这个controller对象是单例的，那么如果不小心在类中定义了类变量，那么这个类变量是被所有请求共享的，这可能会造成多个请求修改该变量的值，出现与预期结果不符合的异常。

	在单例的情况下相当于所有类变量对于每次请求都是共享的，每一次请求对类变量的修改都是有效的。

		那有没有办法让controller不以单例而以每次请求都重新创建的形式存在呢？
			答案是当然可以：
			1.只需要在类上添加注解@Scope("prototype")即可，这样每次请求调用的类都是重新生成的（每次生成会影响效率）；
			2.使用ThreadLocal 来保存类变量，将类变量保存在线程的变量域中，让不同的请求隔离开来。



--Spring mvc数据校验：
	---JSR303：是Java为Bean数据合法性校验提供的一个标准规范；
			----@Pattern：验证String对象是否符合正则表达式的规范；




--SpringMVC注解：
			---@RequestMapping:
				----可以用于类或方法上，在类上表示所有响应请求的方法都是以该地址作为"父路径"；
				----params只是在其中的一个参数而已；
				----该注解有6个属性，分三类：
						a.value,method(重要)			##@RequestMapping(value = "/editCourse", method = {RequestMethod.GET})
						b.consumes,produces
						c.params,headers
						@RequestMapping注解：设置访问路径，一般和方法名一致。如果没有写/，会自动加上/。

			---@RequestParam注解：接收请求参数。

				@RequestParam是位列Controller层，作用是为获取前端参数，解决的是前后端参数不一致的问题。
				(@RequestParam（value（name）="id"，required=false，defaultValue=1）Integer id)【required默认是true。当设置为false时，无id时不会出错，以defaultValue值显示】


				区别与联系：
				@RequestParam 和 @PathVariable 注解是用于从request中接收请求的，两个都可以接收参数；

				不同的是@RequestParam 是从request里面拿取值，而 @PathVariable 是从一个URI模板里面来填充；

				总得来说，@RequestParam均是键值对形式。与@PathVariable中的占位符形式不同！！！


			---@PathVariable
				这个注解能够识别URL里面的一个模板。
				【注意：】如果URL中无参数，将会出错；
								如果URL有参数，但是没有使用@PathVariable该注解，那么URL的参数不会默认与方法参数绑定！方法里的参数会默认绑定表单里面对应的参数！
								如果参数名与占位符一致，则可直接使用@PathVariable；如果不一致，则在@PathVariable( )括号内绑定占位符。

				带占位符的 URL 是 Spring3.0 新增的功能，该功能在SpringMVC 向 REST 目标挺进发展过程中具有里程碑的意义
				通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中：URL 中的 {xxx} 占位符可以通过@PathVariable(“xxx“) 绑定到操作方法的入参中。

			---@PathParam
				这个注解是和spring的pathVariable是一样的，也是基于模板的，但是这个是jboss包下面的一个实现，上面的是spring的一个实现，都要导包。

			---@QueryParam
				@QueryParam 是 JAX-RS 本来就提供的，和Spring的RequestParam作用一致。

			---@ResponseBody
				@responseBody表示服务器返回的时候以一种什么样的方式进行返回， 将内容或对象作为 HTTP 响应正文返回，值有很多，一般设定为json。
				Spring的ResponseBody和RestController注解返回的json数据不是json字符串，而是json对象，因为可以点出对象里面的属性。

			---@RequestBody
				一般是post请求的时候才会使用这个请求，把参数丢在@Requestbody里面。


			---@Valid：@Valid不提供分组功能；
				@Valid注解用于校验，所属包为：javax.validation.Valid。

				① 首先需要在实体类的相应字段上添加用于充当校验条件的注解，如：@Min,如下代码（age属于Girl类中的属性）：
				@Min(value = 18,message = "未成年禁止入内")  
				private Integer age;  

				② 其次在controller层的方法的要校验的参数上添加@Valid注解，并且需要传入BindingResult对象，用于获取校验失败情况下的反馈信息，如下代码：
				@PostMapping("/girls")  
				public Girl addGirl(@Valid Girl girl, BindingResult bindingResult) {  
				    if(bindingResult.hasErrors()){  
				        System.out.println(bindingResult.getFieldError().getDefaultMessage());  
				        return null;  
				    }  
				    return girlResposity.save(girl);  
				}  
				bindingResult.getFieldError.getDefaultMessage()用于获取相应字段上添加的message中的内容，如：@Min注解中message属性的内容。





--SpringMVC 配置文件个别讲解：
	---<mvc:annotation-driven/>，这个配置会配置处理器映射器和适配器，这是springmvc分发请求所必需的。有了这个，就可以使用注解如：@Controller、@RequestMapping等。

			<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
			mvc:annotation-driven默认加载很多的参数绑定方法，
			比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
			实际开发时使用mvc:annotation-driven
			 -->
			<!-- <mvc:annotation-driven></mvc:annotation-driven> -->

	---<context:component-scan base-package="">,有了这个，spring自动去扫描base-package包，如果扫描到@Component、@Service、@Controller这些注解的类，就把这些类注册为bean。
			context上下文的意味。

	在Web MVC框架中，每个DispatcherServlet都拥自己的WebApplicationContext，它继承了ApplicationContext。WebApplicationContext包含了其上下文和Servlet实例之间共享的所有的基础框架beans。



--springmvc.xml配置文件内容：
											---xml文件格式；
											---spring全约束；
											---映射器和适配器；
											---视图解析器；
											---spring扫描controller包下的注解；
											---排除扫描静态资源；

			1、注解的处理器映射器（掌握）
			对标记@Controller类中标识有@RequestMapping的方法进行映射。在@RequestMapping里边定义映射的url。使用注解的映射器不用在xml中配置url和Handler的映射关系。

			2、注解的处理器适配器（掌握）
				注解处理器适配器和注解的处理器映射器是配对使用。理解为不能使用非注解映射器进行映射。

			3、视图解析器配置jsp路径的前缀(/WEB-INF/jsp/)和后缀（.jsp）


	（该文件默认位置：与web.xml在同级目录下，与默认命名：*-servlet.xml）
	（在src目录下时，要在web.xml配置文件中进行配置，如下：
																							  <!-- 4配置前端控制器 ，拦截所有请求-->
																							  <servlet>
																							    <servlet-name>springmvc</servlet-name>
																							    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
													即在这里加上这块标签：	【    <init-param>
																									      <param-name>contextConfigLocation</param-name>
																									      <param-value>classpath:config/springmvc.xml</param-value>
																									      //classpath：也就是src目录下了。
																									</init-param>
													否则，就去掉这块。			  】
																							    <load-on-startup>1</load-on-startup>
																							  </servlet>

																							  <servlet-mapping>
																							    <servlet-name>springmvc</servlet-name>
																							    
																							    <!--可以配置/：此工程所有的请求全部由springmvc解析，此种方式可以实现RESTful方式，需要特殊处理对静态文件的解析不能由springmvc解析，这个另作处理；
																							    可以配置*.do或者*.action,所有请求的url扩展名为.do或.action由springmvc解析，此种方法常用；
																							    可以配置/*,如果配置/*,返回jsp也由springmvc解析，这是不对的；
																							    对于静态资源，如果要拦截处理，则要明确配置好才行。
																							    -->
																							    <url-pattern>*.action</url-pattern>
																							  </servlet-mapping>
	）
		
		additionally，web.xml文件的内容如下：
																--默认首页（可有可无，Tomcat中也会规定默认页面）；
																--启动spring容器，即配置上下文；
																	其中有一个：<param-value>classpath:config/applicationContext-*.xml</param-value>
																--监听器；
																--配置前端控制器；有load-on-startup标签
																--拦截器，全站编码、实现restful风格的URI等等（注意：统一全站编码，这个拦截器filters要放在所有过滤器之前） ；
		
