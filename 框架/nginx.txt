
·正向代理：正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。
		   正向代理，"它代理的是客户端，代客户端发出请求"。


·反向代理：反向代理，"它代理的是服务端，代服务端接收请求"，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。
			客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。

·反向代理的作用：
	··保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网
	··负载均衡，通过反向代理服务器来优化网站的负载




·使用场景：
	在前后端分离的项目中，例如前端采用 Vue，后端采用Spring-Boot等，大多都会遇到同一个问题，就是跨域的问题，下面我将讲述一下如何使用Nginx来解决前后端分离的跨域问题。

	在servers文件夹下创建文件port_http.conf
	填写如下代码

	server {
	    listen *:8088;
	    server_name localhost;

	    
	    location ^~ /api/ {
	        proxy_pass http://127.0.0.1:8889/;
	    }
	    location ^~ /xx/ {
	        proxy_pass http://127.0.0.1:8089/xx/;
	    }
	}
	创建文件之后，启动(或重载)Nginx，配置便会生效

	启动 sudo nginx

	重载：sudo nginx -s reload	(若已经启动请执行此指令)

	以上代码表示 Nginx监听8088端口

	如果请求为 127.0.0.1:8088/api 则会被转发到127.0.0.1:8889

	如果请求为 127.0.0.1:8088/xx 则会被转发到127.0.0.1:8089/xx

	所以，如果当你想调用127.0.0.1:8889/test 的接口时，则应该改为调用127.0.0.1:8088/api/test

	与此同时，前端原本为 127.0.0.1:8089/xx/profile 的网址，则应改为打开127.0.0.1:8088/xx/profile

	这样，相当于对前后端的操作都是在8088端口下进行操作的，所以接就能完美解决前后端分离的项目中的跨域问题啦