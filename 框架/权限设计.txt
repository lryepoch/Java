
-----------------------------
·一个完整的权限管理系统，你有这样的完整权限的设计吗？

	··一是鉴权管理，即权限判断逻辑。

		1. 最基本的权限管理就是菜单管理，用户没有权限的功能模块在菜单节点上是不显示的。（很多人以为这就是权限管理！）
	      示例：普通业务人员登录系统后，是看不到【用户管理】菜单的。

	   2. 功能权限管理，B/S系统的功能体现为URL，所以功能权限管理主要是针对URL访问的管理。（很多人都不清楚权限管理的对象是什么？）
	      示例：
	      经过授权，部门经理可以查看【用户管理】菜单，并查看部门用户信息，但权限设计要求，该部门经理没有添加用户的权限。
	      所以在访问【添加用户】的功能（URL）时，应该有没有授权的提示信息。
	      同时在【用户管理】页面上，【添加用户】的按钮应该灰色显示，不能点击。

	   3. 行级权限管理
	      示例：
	      论坛管理员，权限设计要求 A能管理论坛 【新闻版块】，不能管理论坛 【技术交流】
	      此时的权限设计就应该根据论坛的相应ID来判断权限信息。

	   4. 列级权限管理
	      示例：
	      业务权限设计要求，除销售人员以外，其他用户不能看到客户的联系方式信息。
	      此时的权限设计要判断相应的字段（列）是否可以显示。

	   5. 组织机构/部门级数据权限管理
	      示例:
	      业务权限设计要求，销售一部的人员只能看到本部门的销售订单，销售二部的人员只能看到本部门的销售订单，但销售经理可以同时看到
	      销售一部和销售二部的销售订单。
	      此时的权限设计就要根据销售订单数据本身的部门属性来做判断

	   6. 范围型业务数据权限管理
	      示例：
	      大卖场销售人员在下销售订单时，要选择相应的产品所在仓库信息。
	      业务权限设计要求，【国美】的销售人员在选择仓库的下拉列表中不能看到【广州仓库】，而【大中电器】的销售人员在选择仓库的下拉列表中不能看到【北京顺义仓库】



	··二是授权管理，即权限分配过程。以上的权限管理内容都要通过系统的授权功能来分配给具体的用户，授权功能应该足够灵活。

	   1. 直接对用户授权，直接分配到用户的权限具有最优先级别。

	   2. 对用户所属岗位授权，用户所属岗位信息可以看作是一个分组，和角色的作用一样，但是每个用户只能关联一个岗位信息。

	   3. 对用户所属角色授权，用户所属角色信息可以看作是一个权限分组，每个用户可以关联多个角色。

	   4. 角色直接关联具体的功能权限（URL），也可以关联负权限，即此角色关联的权限不能使用负权限功能。负权限具有优先级别。

	   5. 分级授权，系统管理员可以将自己拥有的权限信息授权给其他用户。即可以设置分级管理员和超级管理员。




---------------------------------
·RBAC概念：
	RBAC是当下权限系统的设计基础，同时有两种解释：
	··Role-Based Access Control，基于角色的访问控制，基于角色的访问控制是不利于系统维护(可扩展性不强)。
		即，你要能够删除产品，那么当前用户就必须拥有产品经理这个角色；


	··Resource-Based Access Control，基于资源的访问控制，
		即，你要能够删除产品，那么当前用户就必须拥有删除产品这样的权限；

	基于RBAC概念，就会存在3张基础表： 用户，角色，权限， 以及2张中间表来建立用户与角色的多对多关系，角色与权限的多对多关系。用户与权限之间也是多对多关系，但是是通过角色间接建立的。

	补充多对多概念： 用户和角色是多对多，即表示：
						一个用户可以有多种角色，一个角色也可以赋予多个用户。
						一个角色可以包含多种权限，一种权限也可以赋予多个角色。




·用户组：当用户量过多时，添加一个角色又要重新大量分配用户。而将用户与用户组关联，然后直接给用户组分配角色。





--------------------------------
·权限设计 = 数据权限 + 功能权限；
 功能权限泛指对某个功能（页面、按钮、命令）的使用权；数据权限则泛指所能操纵的范围；比如你有删除邮件的功能（功能权限），但只能删除自己的邮件（数据权限）；


·页面权限：必须配置了页面模块权限后，才能配置当前页面模块下具体的操作权限，以及页面模块的数据展示权限。

·数据权限：
	有两种表现形式：一种是行权限、另外一种是列权限。
	所谓行权限，就是限制用户对某些行的访问权限，比如：只能对本人、本部门、本组织的数据进行访问；也可以是根据数据的范围进行限制，比如：合同额大小来限制用户对数据的访问。
	所谓列权限，就是限制用户对某些列的访问权限，比如：某些内容的摘要可以被查阅，但是详细内容就只有VIP用户才能查看。
	通过数据权限，可以从物理层级限制用户对数据的行或列进行获取，这种方式比把所有数据拿到之后再根据用户权限来限制某些行或列有诸多好处。

	数据级权限主要是针对访问数据的可见范围。一般包括以下几类：当前操作人可见、部门可见、部门及子部门可见……等。数据级权限目前常用的做法就是在业务模块的表中增加操作人字段（如：creator），然后通过aop或者是在基类的查询、查看、更新、删除中，把creator字段值与可见范围进行特殊处理。

	数据权限一般和企业的组织架构相关，而组织架构分为树状和扁平状的；



·功能权限（操作权限）：
	功能的粒度从粗到细一般分为：模块级->页面级->接口级（接口级的功能权限指的是哪个角色能调用哪些接口）；
	从后台角度：为了系统安全，代码肯定都会实现到接口级。那我们做粒度选择的意义是什么？当然是为用户降本增效。只是粒度越粗，用户操作越简单，灵活性却越低；
	具体表现形式就是你看不到某个菜单或按钮，当然也有的是把菜单或按钮灰掉的形式。

	功能级权限，有大有小。大的可以直接包括一个业务模块，小的可以是一个按钮。一般的功能级权限一般包括：菜单、url、按钮。



	如果没有使用shiro/spring security等权限框架的话，需要写相较于复杂的sql。



	在大型平台的应用上，试想如果用户量上万，新增一个角色时，可能需要为大量用户都分配一遍新的角色，工程量仍然巨大，此时即可以引入用户组的概念。如果部分用户的使用场景是相对一致和基础的，我们可以把这些用户打包成一个组，基于这个组的对象进行角色和权限的赋予。

	同理如果权限较多时也会存在一样的问题，处理方式是引入权限组的概念，将使用场景相对固定的一组功能或权限打包成组赋予角色。但是一般来讲一个系统中权限功能的体量是相对有限和可控的，所以实际应用中对权限组的使用较少。


·粗颗粒度和细颗粒度：
	对资源类型的管理称为粗颗粒度权限管理，即只控制到菜单、按钮、方法，粗粒度的例子比如：用户具有用户管理的权限，具有导出订单明细的权限。
	对资源实例的控制称为细颗粒度权限管理，即控制到数据级别的权限，比如：用户只允许修改本部门的员工信息，用户只允许导出自己创建的订单明细。


	基于url拦截是企业中常用的权限管理方法，实现思路是：将系统操作的每个url配置在权限表中，将权限对应到角色，将角色分配给用户，用户访问系统功能通过Filter进行过虑，过虑器获取到用户访问的url，只要访问的url是用户分配角色中的url则放行继续访问。
