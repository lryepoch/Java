
·集群：同一个业务，部署到多台服务器上（不同服务器运行着同一份代码，干同一件事情）；
·分布式：一个业务分拆多个子业务，部署在不同的服务器上(不同的服务器，运行不同的代码，为了同一个目的)；


·微服务：简单来说，一个springboot就是一个微服务；


·使用场景：
	很多人拿Dubbo和SpringCloud对比，是很不公平的，各自的定位不一样；SpringCloud的定位是提供微服务整个解决方案，Dubbo只是RPC的方案。
	Dubbo相当于SpringCloud的Feign和Ribbon组件。


·Maven实战--dependencies与dependencyManagement的区别：
	··dependencies即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）

    ··dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。



·Spring Cloud的5个核心组件，在微服务架构中，分别扮演的角色：

	Eureka：注册中心。各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里。
			Eureka Client分为服务提供者和服务消费者。
			但很可能，某服务既是服务提供者又是服务消费者。
			如果在网上看到SpringCloud的某个服务配置没有"注册"到Eureka-Server也不用过于惊讶(但是它是可以获取Eureka服务清单的)。很可能只是作者把该服务认作为单纯的服务消费者，单纯的服务消费者无需对外提供服务，也就无须注册到Eureka中了。

	Ribbon：服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台;
			负载均衡又区分了两种类型：
				··客户端负载均衡(Ribbon)服务实例的清单在客户端，客户端进行负载均衡算法分配。(从上面的知识我们已经知道了：客户端可以从EurekaServer中得到一份服务清单，在发送请求时通过负载均衡算法，在多个服务器之间选择一个进行访问);
				··服务端负载均衡(Nginx)服务实例的清单在服务端，服务器进行负载均衡算法分配;

	Feign：基于Feign的动态代理机制，根据注解和选择的机器，拼接请求URL地址，发起请求;

	Hystrix：发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题;

	Zuul：如果前端、移动端要调用后端系统，统一从Zuul网关进入，由Zuul网关转发请求给对应的服务。Spring Cloud Gateway已经孵化完成了，可以用来替代Zuul。