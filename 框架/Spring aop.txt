
Spring Aop：

·在Spring中声明AspectJ切面, 只需要在IOC容器中将切面声明为Bean实例。当在Spring IOC容器中初始化AspectJ切面之后, Spring IOC容器就会为那些与AspectJ切面相匹配的Bean创建代理。 
·Advice(通知)： 某个连接点所采用的处理逻辑，也就是向连接点注入的代码，AOP在特定的切入点上执行的增强处理。

·AspectJ 支持 5 种类型的通知注解：@Aspect 表示声明一个切面
	@Before，前置增强，方法执行前调用
	@Around，环绕增强：方法正常执行前后调用
	@AfterReturning，后置增强：方法正常退出时执行
	@AfterThrowing，异常抛出增强：方法抛异常时执行
	@After，final增强：不管是抛出异常或者正常退出都会执行

	详解：https://blog.csdn.net/u010502101/article/details/78823056


·切入点指示符：
	execution：用于匹配方法执行的连接点；

	within：用于匹配指定类型内的方法执行；

	this：用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配；

	target：用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；

	args：用于匹配当前执行的方法传入的参数为指定类型的执行方法；

	@within：用于匹配所以持有指定注解类型内的方法；

	@target：用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；

	@args：用于匹配当前执行的方法传入的参数持有指定注解的执行；

	@annotation：用于匹配当前执行方法持有指定注解的方法；

	bean：Spring AOP扩展的，AspectJ没有对应指示符，用于匹配特定名称的Bean对象的执行方法；

	reference pointcut：表示引用其他命名切入点，只有@ApectJ风格支持，Schema风格不支持。

	AspectJ切入点支持的切入点指示符还有：
	call、get、set、preinitialization、staticinitialization、initialization、handler、adviceexecution、withincode、cflow、cflowbelow、if、@this、@withincode；
	但Spring AOP目前不支持这些指示符，使用这些指示符将抛出IllegalArgumentException异常。这些指示符Spring AOP可能会在以后进行扩展。

	详解：http://sishuok.com/forum/posts/list/281.html



·JoinPoint用法：
	··JoinPoint对象封装了SpringAop中切面方法的信息,在切面方法中添加JoinPoint参数,就可以获取到封装了该方法信息的JoinPoint对象；

	··常用API:
		getSignature():目标方法名、类信息
		getArgs():参数
		getTarget():被代理对象
		getThis():代理对象


·ProceedingJoinPoint对象是JoinPoint的子接口,该对象只用在@Around的切面方法中,添加了以下两个方法：
	Object proceed() throws Throwable //执行目标方法 
	Object proceed(Object[] var1) throws Throwable //传入的新的参数去执行目标方法 


