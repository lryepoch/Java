
JUnit4：

1、C语言中单元指一个函数，Java里单元指一个类。
2、为什么使用Junit Test而不用普通java main方法来完成测试?
		a、如果你的类里有多个方法，用main方法测试的话就很不方便，想测试全部方法的话就得把测试代码全部写到main里，或者你测一个重写一次。
		且更重要的是，这样会使测试代码与运行逻辑代码混在一起，不规范。（重复、混淆）
		b、使用junit就方便多了，这是单元测试，你想测哪个方法就写一个对应的测试方法，然后用junit运行。每个方法之间是独立的，非常灵活。而
		且测试方法一般不会直接写在原类中，而是单独的测试类，这样测试代码就完全与逻辑代码分开了。可以测试一个类中多个方法，main不行。
		c、如果使用了maven之类的工具来管理项目，则junit的好处又会进一步体现出来：你可以编写好一大批测试类，然后用maven的一个简单命令
		来自动执行，想想看，全部自动测试，且测试结果自动生成文档，方便吧。

	写了业务代码累成狗，为什么还要写测试代码？不可以在项目完成时再测吗？
	答：看似增加了代码量，实际上帮助我们减少了排错时间，提高了代码质量；不至于出现bug时，面对众多的代码，无从debug。


3、结构上是：建一个包，与java源码的包并列。
	 命名：类名需要XxxTest；方法名需要testXxx( )
	 遵守约定，比如：
			a)关于包：类放在test包中
			b)关于测试类：类名用XxxTest结尾
			c)关于测试方法：方法用testMethod( ）命名
4、单元测试可以测试一个类，或者一个类中的一个方法。

5、常用hamcrest断言的使用说明：（hamcrest断言是最新版的，已经取代了assertEquals……）

	数值类型
	//n大于1并且小于15，则测试通过
	assertThat( n, allOf( greaterThan(1), lessThan(15) ) );
	//n大于16或小于8，则测试通过
	assertThat( n, anyOf( greaterThan(16), lessThan(8) ) );
	//n为任何值，都测试通过
	assertThat( n, anything() );
	//d与3.0的差在±0.3之间，则测试通过
	assertThat( d, closeTo( 3.0, 0.3 ) );
	//d大于等于5.0，则测试通过
	assertThat( d, greaterThanOrEqualTo (5.0) );
	//d小于等于16.0，则测试通过
	assertThat( d, lessThanOrEqualTo (16.0) );
	 
	字符类型
	//str的值为“tgb”，则测试通过
	assertThat( str, is( "tgb" ) );
	//str的值不是“tgb”，则测试通过
	assertThat( str, not( "tgb" ) );
	//str的值包含“tgb”，则测试通过
	assertThat( str, containsString( "tgb" ) );
	//str以“tgb”结尾，则测试通过
	assertThat( str, endsWith("tgb" ) ); 
	//str以“tgb”开头，则测试通过
	assertThat( str, startsWith( "tgb" ) ); 
	//str忽略大小写后，值为“tgb”，则测试通过
	assertThat( str, equalToIgnoringCase( "tgb" ) ); 
	//str忽略空格后，值为“tgb”，则测试通过
	assertThat( str, equalToIgnoringWhiteSpace( "tgb" ) );
	//n与nExpected相等，则测试通过（对象之间）
	assertThat( n, equalTo( nExpected ) ); 
	 
	collection类型
	//map中包含key和value为“tgb”的键值对，则测试通过
	assertThat( map, hasEntry( "tgb", "tgb" ) );
	//list中包含“tgb”元素，则测试通过
	assertThat( iterable, hasItem ( "tgb" ) );
	//map中包含key为“tgb”的元素，则测试通过
	assertThat( map, hasKey ( "tgb" ) );
	//map中包含value为“tgb”的元素，则测试通过
	assertThat( map, hasValue ( "tgb" ) );

6、assertEquals是Assert类中的一系列的静态方法，一般的使用方式是Assert. assertEquals()，但是使用了静态包含后，前面的类名就
	 可以省略了，即不要了Assert，使用起来更加的方便。

7、Fixture的含义就是“在某些阶段必然被调用的代码”。“在任何一个测试执行之前必须执行的代码”就是一个Fixture，我们用@Before来标注它。
	 同理，如果“在任何测试执行之后需要进行的收尾工作”也是一个Fixture，使用@After来标注。

8、要想指定一个 Runner ，需要使用 @RunWith 标注，并且把你所指定的 Runner 作为参数传递给它。（有些没写，那是因为有默认的runner）
	另外一个要注意的是， @RunWith 是用来修饰类的，而不是用来修饰函数的。


9、（重点）Spring对Controller、Service、Dao进行Junit单元测试总结。所有用Junit进行单元测试，都需要下面的配置：
		@RunWith(SpringJUnit4ClassRunner.class)
		@ContextConfiguration(locations = {"classpath:applicationContext.xml"})

		applicationContext.xml 是整个项目的Spring的配置文件。包括数据源配置、MVC配置和各种Bean的注册扫描。
		如果你是多个文件，就用“，”隔开，像这样{ "classpath:applicationContext.xml","classpath:servlet-context.xml"}




慕课网视频教程：

--JUnit4快速入门：
	概念：xUnit的一个子集；
	与JUnit3的区别：4不需要继承任何类；
	为什么要使用JUnit：最大程度避免bug；可以使用断言句子将当前结果和预期结果比较；

	一个案例快速上手：加减乘除。
	建立思路：首先，对被测试类右键建立JUnit Test Case；修改包名，将测试代码和业务代码分离；点击next，选择需要测试的方法名，点击finish；最后对生成的测试类进行修改即可。


--JUnit4使用详解：
	---编码规范；
		1.测试方法使用@Test修饰；
		2.测试方法用public void修饰，不能带任何参数；
		3.新建一个源代码目录存放我们的测试代码；
		4.测试类的包和被测试类保持一致；
		5.测试单元每个方法可以独立测试，但是方法间不能有所依赖；

		6.测试类使用Test作为类名的后缀；（不是必须）
		7.测试方法使用test作为方法名前缀；（不是必须）


	---测试失败的两种情况 ：
		1.Failure一般由单元测试使用的断言方法判断失败所引起的，这表示测试点发生了问题，就是说程序输出的结果和我们预期的不一样。
		2.error是由代码异常引起的，他可以产生于测试代码本身的错误，也可以是被测试代码中一个隐藏的bug。
		3.测试用例不是用来证明你是对的，而是用来证明你没有错。


 	 ---JUnit运行流程 ：
	 	 1.@BeforeClass修饰的方法会在所有方法被调用前被执行，而且该方法是静态的，所以当测试类被加载后接着就会运行它，而且在内存中它只会存在一份实例，它比较适合加载配置文件；
	 	 2.@AfterClass修饰的方法通常用来对资源的清理，如关闭数据库的连接；
	 	 3.@Before和@After会在每个测试方法的前后各执行一次；


 	--- JUnit常用注解 ：
	 	 1.@Test：将一个普通方法修饰为一个测试方法；
	 	 		@Test(ecpected=xxxException.class)				##期望抛出的异常
	 	 		@Test(timeout=毫秒)										##设置时间限制
	 	 2.@BeforeClass：在所有方法运行前被执行，static修饰；	比如读取大文件，这就避免了每次测试都要读取一遍
	 	 3.@AfterClass：在所有方法运行后被执行，static修饰；
	 	 4.@Before：每个测试方法运行前执行一次；
	 	 5.@After：每个测试方法运行后执行一次；
	 	 6.@Ignore（"也可以在这里添加说明"）：所修饰的方法被测试运行器忽略；
	 	 7.@RunWith【此注解位于类上方】：可以更改测试运行器；JUnit4提供了默认的了。继承这个org.junit.runner.Runner即可；



--JUnit4的深入使用：

	---测试套件的使用（如何批量运行单元测试类？）：
		1.测试套件就是组织测试类一起运行的；
		2.写一个作为测试套件的入口类，这个类里不包含其他的方法；
		3.更改测试运行器@RunWith（Suite.class）
		4.将要测试的类作为数组传入到@Suite.SuiteClasses（{ 类名.class,……}）

			前人总结的经验：
			@Test(timeout =1000)注解：设置当前测试方法在一定的时间内运行完，否则返回错误；
			@Test（expected = Exception.class）注解：设置被测的方法是否有异常抛出，抛出的异常类型为：Exception.class； 
			eg: @Test（expected = NullPointException.class）
			@ignore注解：注释掉一个测试方法或一个类，被注释的方法或类，不会被执行；
			@RunWith(Suite.class):执行suite 
			@RunWith(Suite.class) 
			@Suite.SuiteClasses({JunitTest.class,TestClassDemo.class}) 
			public class AllTestClass { 
			//此类的作用是整合测试也称 打包测试;可以把之前所有的写好的test class类进行集成; 
			//如需测试多个类时，只需要把相关的测试类加入到”{}”即可;如果不是同一个包类的class记得加上package名称。 
			//@Suite.SuiteClasses({JunitTest.class,TestClassDemo.class}) 
			}

	
	---参数化设置？用于提高代码的可重用度。
		1.更改默认的测试运行器为RunWith(Parameterized.class)；
		2.声明变量来存放预期值和结果值；

		3.声明一个返回值为Colllection的公共静态方法，并使用@Parameters进行修饰；
		@Parameters
		public static Collection<Object[]> t(){
			return Array.asList(new Object[][]){
				{3,1,2},
				{4,2,2}
			});
		}

		4.为测试类声明一个带有参数的公共构造函数，并在其中为之声明变量赋值；
		5.接着就是之前的方法中使用断言；


--JUnit4在web项目中的使用：
	测试spring、hibernate的整合？