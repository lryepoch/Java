
·cookie：会话数据保存在浏览器端的技术。cookie[] cookies = request.getcookies()；

·session：将会话数据保存到服务器端的技术。Httpsession session = request.getsession()；	
		session在用户登录，一些特殊场合在页面间传递数据的时候会经常用到。
		session长驻在服务器内存里，session有id标识，一个session专供一个用户使用。
		request只能存在于一次访问里，为了让每次访问区分开是哪个用户，所以request中会带上session的id标识，就是每个request都会属于一个session，一个session能为很多次request服务。类似于数据库的多对一关系。所以request.getsession的本质是使用request中的session id去找到这个用户对应的session。

	··二者结合：甲访问购物网站---服务器创建一个session（购物车）---将一台手机放到session中---服务器以cookie形式向浏
	                  览器发送session的id---完成购物要结账时，浏览器将cookie信息回送给服务器---服务器根据id找到对应的session
	                  ---结算。

	··会话跟踪是一种灵活、轻便的机制，它使Web上的状态编程变为可能。
		HTTP是一种无状态协议，每当用户发出请求时，服务器就会做出响应，客户端与服务器之间的联系是离散的、非连续的。当用户在同一网站的多个页面之间转换时，根本无法确定是否是同一个客户，会话跟踪技术就可以解决这个问题。
		当一个客户在多个页面间切换时，服务器会保存该用户的信息。

		有四种方法可以实现会话跟踪技术：隐藏表单域、URL重写、cookie、session。

			···隐藏表单域：<input type="hidden">，非常适合不需要大量数据存储的会话应用。
			···URL 重写:URL 可以在后面附加参数，和服务器的请求一起发送，这些参数为名字/值对。

			···cookie:一个cookie是一个小的，已命名数据元素。服务器使用SET-cookie头标将它作为HTTP响应的一部分传送到客户端，客户端被请求保存cookie值，在对同一服务器的后续请求使用一个cookie头标将之返回到服务器。与其它技术比较，cookie 的一个优点是在浏览器会话结束后，甚至在客户端计算机重启后它仍可以保留其值；
			···session：使用 setAttribute(String str,Object obj)方法将对象捆绑到一个会话。

	··session和cookie的区别：
		无论客户端浏览器做怎么样的设置，session都应该能正常工作。客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session。
		在存储的数据量方面session和cookies也是不一样的。session能够存储任意的Java对象，cookie只能存储String类型的对象。

		1.session用来表示用户会话，session对象在服务端维护，一般tomcat设定session生命周期为30分钟，超时将失效，也可以主动设置无效； 

		2.cookie存放在客户端，可以分为内存cookie和磁盘cookie。内存cookie在浏览器关闭后消失，磁盘cookie超时后消失。当浏览器发送请求时，将自动发送对应cookie信息，前提是请求url满足cookie路径； 

		3.可以将sessionId存放在cookie中，也可以通过重写url将sessionId拼接在url。因此可以查看浏览器cookie或地址栏url看到sessionId； 

		4.请求到服务端时，将根据请求中的sessionId查找session，如果可以获取到则返回，否则返回null或者返回新构建的session，老的session依旧存在，请参考API。 

		cookie保存在客户端，session保存在服务器端；
		cookie目的可以跟踪会话，也可以保存用户喜好或者用户名密码；
		session用来跟踪会话；


	··request.getsession()一般是被用来存储当前用户对象到session中，或者从session中获取当前用户对象。 

		分为无参和有参两种写法： 
		1. 无参： request.getsession() 

		    从当前request中获取session，如果获取不到session，则会自动创建一个session，并返回新创建的session；如果获取到则返回获取到的session; 


		2. 有参： request.getsession(boolean var1) 

		    2.1.request.getsession(true) 
		           这种方式和无参时一样，只是增家了一个true参数，明确告诉它在获取不到的时候自动创建session; 
		    2.2.request.getsession(false) 
		           这种方式与上两种的区别，就是在获取不到session的时候，不会自动创建session，而是会返回null。

		各方式的应用场景：
			如果想要存储信息到session中时，使用request.getsession()；
			如果想要获取session中的信息时，使用request.getsession(false)，并在获取后对session变量进行是否为null的判断，再进行下一步操作。


