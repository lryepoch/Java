
##配置文件
sso.properties:
	appId=			//单点登录appId
	appKey=			//单点登录appkey
	getTokenUrl=		//单点登录获取token的url;		callback/appid/appkey
	getUserInfoUrl=		//单点登录获取用户信息url；	token/appid/appkey/ip
	logoutUrl=			//单点登录退出url;			token/appid/appkey/ip


data.properties:
	indexUrl=		//单点登录重定向url；
	noAuthorityUrl=


##工具类LoginUtils.java读取sso.properties
##工具类InitStatus.java读取data.properties


##登录接口
void logincb(String callback, HttpServletRequest request, HttpServletResponse response){
	//先获取token
	tokenUrl->String.format(tokenUrl, callback, appid, appkey)
	token=getSsoToken(tokenUrl)
	//没有则重定向到登录页面
	if(token==null) {
		sendRedirect(loginUrl)
	}

	if(token->true){
		//获取登录用户ip
		ip = getIpAddr(request)
		infoUrl->String.format(infoUrl,token("Message"),appid,appkey,ip)
		//获取token后，获取用户信息
		getSsoUserInfo(infoUrl)

		if(ssoUserInfo->true){
			//从SsoUserInfo中找到邮箱
			appAccount = get("AppAccount")
			//根据邮箱从数据库获取用户全部信息
			user = getUserByAppAccount(appAccount)
			if(user信息无效){
				//跳转到无权限页面
				sendRedirect(noAuthorityUrl)
			}
			//把当前用户ip加到ssoUserInfo中
			put("loginIp",ip);
			//在session中设置好当前用户信息，其他地方需要使用
			request.getSession().setAttribute("ssoUserInfo", ssoUserInfo)

			//根据ssoUserInfo，更新数据库中当前用户信息
			user.setUserName()
			user.setDepartment()
			user.setCompany()
			user.setJob()
			updateUser(user)

			//登录日志也可在此写入数据库

			saveToken(request,加密？)
			//登陆成功，跳转到首页地址
			response.sendRedirect(indexUrl)
		}
	}
}


##登出接口(获取ip、token)
logout(HttpServletRequest request){
	getIpAddr(request)
	String.format(logoutUrl, token, appid, appkey, ip)
	session.removeAttribute("ssoUserInfo")
}


##判断session是否过期
checkSession(HttpServletRequest request){
	request.getSession().getAttribute("ssoUserInfo").get("AppAccount");是否存在
}


##获取用户信息
getCurrentUserInfo(HttpServletRequest request){
	request.getSession().getAttribute("ssoUserInfo").get("AppAccount");获取邮箱号
}


##获取IP地址：
String getIpAddr(HttpServletRequest request){
	return string
}



##发送get请求：
String sendGet(String fullurl){
	in = new BufferedReader(new InputStreamReader(connection.getInputStream(),"utf-8"))	
}
##发送get请求返回的String转换成Map：
Map httpGet(String url){
	string->map
}


##获取用户token：
Map getSsoToken(String url){
	httpGet(String url)
}
##获取用户信息：
Map getSsoUserInfo(String url){
	httpGet(String url)
}
##退出单点登录：
Map getSsoOut(String url){
	httpGet(String url)
}









----------------------
·概念：多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统；

·登录认证机制：


·同域下的单点登录：
	··Cookie：将Cookie的域设置为顶域，这样所有的子域的系统都可以访问到顶域的Cookie。在设置Cookie时，只能设置顶域和自己的域，不能设置其他的域。
	··Session：共享Session，如：Spring-Session；


·不同域下的单点登录：
	··Cookie：不同域之间的Cookie是不共享的。
	··具体流程：
	1.用户访问app系统，app系统是需要登录的，但用户现在没有登录；
	2.跳转到CAS server，即SSO登录系统，以后图中的CAS Server我们统一叫做SSO系统，SSO系统也没有登录，弹出用户登录页；
	3.用户填写用户名、密码，SSO系统进行认证后，将登录状态写入SSO的session，浏览器中写入SSO域下的Cookie；
	4.SSO系统登录完成后会生成一个ST(Service Ticket)，然后跳转到app系统，同时将ST作为参数传递给app系统；
	5.app系统拿到ST后，从后台向SSO发送请求，验证ST是否有效；
	6.验证通过后，app系统将登录状态写入session并设置app域下的Cookie；
	7.至此，跨域单点登录就完成了，当我们再访问app系统时，app就是登录的。






·单点登录的方法中callback字符串：
	如何生成的？
	随机生成的，前端通过账号密码访问【OAUTH】http://172.21.1.144:8080/static/login.html获取到callback，
	然后带着callback回调后台地址http://172.21.1.144:8080/applicationIndex/sso/login?callback=
