
·OAuth就是一种授权机制。数据的所有者(我)告诉系统(微博)，同意授权第三方应用(简书)进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。OAuth的核心就是向第三方应用颁发令牌。

·之所以标注为2.0，是因为最初有一个1.0协议，但这个1.0协议被弄得太复杂，易用性差，所以没有得到普及。
	2.0是一个新的设计，协议简单清晰，但它并不兼容1.0，可以说与1.0没什么关系。

·OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。

	··授权码模式（authorization-code）:指的是第三方应用先申请一个授权码，然后再用该码获取令牌。
		这种方式是最常用的流程，安全性也最高，它适用于那些有后端的Web应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。

	··简化模式（implicit）:有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）"隐藏式"（implicit）。

	··密码模式（password）：如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为"密码式"（password）。

	··客户端模式（client-credentials）:适用于没有前端的命令行应用，即在命令行下请求令牌。客户端直接通过客户端认证（比如client_id和client_secret）从认证服务器获取访问令牌。	

	不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。